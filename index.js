/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={8927:(e,t)=>{async function n(){const e=function(){const e=window.location.href.match(/inbox\/message\/(\d+)/);if(e&&e.length>1)return e[1]}(),t=await async function(e){const t=await fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36","sec-ch-ua":'"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"Windows"',"sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"504b9a10-8d47-4c8e-afa1-6bfd89b94453"},referrer:`https://offerup.com/inbox/message/${e}?alertId=2890122750`,referrerPolicy:"strict-origin-when-cross-origin",body:`{"operationName":"GetChatById","variables":{"id":"${e}"},"query":"query GetChatById($id: String!, $before: String) {\\n  chat: discussion(data: {discussionId: $id, before: $before}) {\\n    itemId\\n    sellerId\\n    buyerId\\n    deactivatedUserId\\n    dateCreated\\n    lastPostDate\\n    readStatus {\\n      userId\\n      lastReadDate\\n      __typename\\n    }\\n    visualTags {\\n      tag\\n      type\\n      displayText\\n      __typename\\n    }\\n    messages {\\n      id\\n      recipientId\\n      senderId\\n      text\\n      sendDateString\\n      metadataType\\n      metadata {\\n        photos {\\n          small {\\n            url\\n            width\\n            height\\n            __typename\\n          }\\n          medium {\\n            url\\n            width\\n            height\\n            __typename\\n          }\\n          large {\\n            url\\n            width\\n            height\\n            __typename\\n          }\\n          __typename\\n        }\\n        messageUrl\\n        systemMessageContext {\\n          iconUrl\\n          actions {\\n            actionPath\\n            externalURL\\n            actionText\\n            __typename\\n          }\\n          titleText\\n          bodyText\\n          __typename\\n        }\\n        place {\\n          name\\n          formattedAddress\\n          placeId\\n          longitude\\n          latitude\\n          __typename\\n        }\\n        messageButtonText\\n        messageTitle\\n        __typename\\n      }\\n      __typename\\n    }\\n    listing {\\n      id\\n      listingId\\n      title\\n      price\\n      originalPrice\\n      isFirmOnPrice\\n      state\\n      category {\\n        id\\n        name\\n        levelOneName\\n        levelTwoName\\n        levelThreeName\\n        __typename\\n      }\\n      photos {\\n        uuid\\n        detail {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        detailSquare {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        __typename\\n      }\\n      fulfillmentDetails {\\n        buyItNowEnabled\\n        shippingEnabled\\n        localPickupEnabled\\n        shippingPrice\\n        estimatedDeliveryDateStart\\n        estimatedDeliveryDateEnd\\n        sellerPaysShipping\\n        shippingParcelId\\n        canShipToBuyer\\n        __typename\\n      }\\n      __typename\\n    }\\n    otherUserProfile {\\n      userId\\n      avatars {\\n        squareImage\\n        __typename\\n      }\\n      isTruyouVerified\\n      name\\n      dateJoined\\n      publicLocationName\\n      ratingSummary {\\n        count\\n        average\\n        __typename\\n      }\\n      c2cPhoneNumber {\\n        countryCode\\n        nationalNumber\\n        __typename\\n      }\\n      isAutosDealer\\n      isSubPrimeDealer\\n      isTruyouVerified\\n      websiteLink\\n      publicLocation {\\n        formattedAddress\\n        name\\n        latitude\\n        longitude\\n        __typename\\n      }\\n      __typename\\n    }\\n    otherUserRelationship {\\n      following\\n      blocked\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}`,method:"POST",mode:"cors",credentials:"include"}).then((e=>e.json()));return t&&t.data&&t.data.chat&&t.data.chat.itemId}(e);return t}window.getChatId=n,t.t=n},4484:(e,t,n)=>{"use strict";n.r(t),n.d(t,{_apiSendBug:()=>r});var i=n(2617),a=n(2287),s=n(4246);function r(e){const t=(new Date).getTime();e.log_id=t;try{e.email||(e.email=(0,i.g)())}catch(e){console.error("failed to add email to log.")}return window.tabId&&(e.tabId=window.tabId),window.taUID&&(e.uid=window.taUID),e.extension_version=window.extension_version,async function t(n){return fetch("https://webhook.hopla.workers.dev/offerupbot?project=OfferUpBot",{method:"POST",body:JSON.stringify(e),mode:"no-cors"}).then((async e=>(0,a.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (_apiSendBug)",e,n),n&&n>6?"":(await(0,s.sleep)(1e4),n||(n=0),t(n+=1)))))}().catch((e=>(console.error("Fetch Failed (_apiSendBug)",e),"")))}},9088:(e,t,n)=>{"use strict";n.r(t),n.d(t,{addAllUserListingsToSkipList:()=>r});var i=n(8498),a=n(3539),s=n(6725);async function r(e,t){const n=await(0,i.apiOfferUp)().getUserListings(e);if(n){const i=n.filter((e=>e.listingId)).map((e=>e.listingId));return(0,a.CONSOLE_MESSAGE)("custom",`Adding ${i.length} listings of ${t} (${e}) to skip list.`),(0,s.skips)().saveToSkipListingBatch(i)}}},8498:(e,t,n)=>{"use strict";n.r(t),n.d(t,{apiOfferUp:()=>m});var i=n(1203),a=n(3539),s=(n(9105),n(2617)),r=n(2287),o=n(6849),l=n(4246),c=n(7367);function d(e,t){return window.countDownId=Math.random(),u(e,t,window.countDownId),new Promise((t=>{window.countDownId="",setTimeout((()=>{t()}),1e3*e)}))}function u(e,t,n){window.isRun&&(e<=1||n===window.countDownId&&((new Date).getTime(),e<=1||setTimeout((()=>{u(e-1,t,n)}),1e3)))}var p=n(4484);function m(){return{sendMessage:async function(e,t,n,o,d){if(!t)return;if(!e)return;if(i.debug_disableMessages)return;let u=await async function n(i){return fetch("https://offerup.com/api/graphql",{credentials:"include",headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",Accept:"*/*","Accept-Language":"en-US,en;q=0.5","content-type":"application/json","x-ou-d-token":"web-8a263c39445e93084073408011803c17b413d18fa91fafb9f64f706f","x-ou-f-token":"6af29b25b551922205a90937fd164603",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0","Proxy-Authorization":"Basic dHJhZGVhcHBsZXM6YXBwbGVzdHJhZGU2OQ=="},referrer:`https://offerup.com/item/detail/${e}`,body:`{"operationName":"StartChat","variables":{"listingId":"${e}","text":"${t}","suggestedMessageUuid":"8E8F653A-F693-476C-8E33-6DA990D81763"},"query":"mutation StartChat($listingId: ID!, $text: String!, $suggestedMessageUuid: String) {\\n  postFirstMessage(\\n    data: {itemId: $listingId, text: $text, suggestedMessageUuid: $suggestedMessageUuid}\\n  ) {\\n    id: discussionId\\n    __typename\\n  }\\n}\\n"}`,method:"POST",mode:"cors"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (sendMessage)",e,i),i&&i>6?"":(await(0,l.sleep)(1e4),i||(i=0),n(i+=1)))))}().catch((e=>(console.error("Fetch Failed",e),"")));if(!u)return u;if(u&&u.match&&u.match(/currently serve areas outside of the US/i))return console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),(0,a.CONSOLE_MESSAGE)("custom","Proxy Failed - Got Error: Currently serve areas outside of the US"),await(0,l.sleep)(6e4),"";if(u&&u.includes("Before you can send a message, please verify your mobile number"))console.error("User is not verified. Requires mobile verification");else{if(u&&u.includes("Conversation limit reached")){(0,c.stats)().addKo(),localStorage.setItem("tsSpamDetected",(new Date).getTime()+60*i.waitIfSpamDetected*1e3);const r={msg:"Conversation limit has been reached"};window.isKO=!0;const u=(0,s.g)();u&&(r.email=u);const p=(0,c.getStats)();p&&(r.stats=p),r.streakSetting={streak:document.getElementById("streak").value,timeout:document.getElementById("streaktimeout").value};const h=(new Date).getTime()+60*i.waitIfSpamDetected*1e3;if((0,a.CONSOLE_MESSAGE)("halted_soft",{hh:moment(h).format("HH"),mm:moment(h).format("mm"),ss:moment(h).format("ss")}),await(0,l.sleep)(60*i.waitIfSpamDetected*1e3),window.isKO=!1,!window.isRun)return;return(0,c.stats)().addRun(),m().sendMessage(e,t,n,o,d)}if(u&&u.includes("Verification Required"))console.error("Verification required! Verify via app and restart the bot."),(0,p._apiSendBug)({msg:"Verification required! Verify via app and restart the bot.",apiresponse:u}),window.isKO=!0,(0,a.CONSOLE_MESSAGE)("custom","Verification required! Verify via app and restart the bot."),alert("Verification required! Verify via app and restart the bot."),await(0,l.sleep)(59994e4),window.isKO=!1;else if(u&&u.includes("have blocked the other user in the thread"))(0,a.CONSOLE_MESSAGE)("thread_removed",{listing_id:e,listing_name:n,owner_id:o,owner_name:d});else if(u&&u.includes("errors"))console.error("Failed to send message",u),(0,p._apiSendBug)({msg:"Failed to send message to user",apiresponse:u}),u.includes("INTERNAL_SERVER_ERROR")&&(console.error("Offerup INTERNAL_SERVER_ERROR. Bot will halt."),(0,a.CONSOLE_MESSAGE)("custom","Offerup INTERNAL_SERVER_ERROR. Bot will halt.")),window.isKO=!0,await(0,l.sleep)(60*i.waitIfSpamDetected*1e3),window.isKO=!1;else if(u&&u.includes("postFirstMessage"))return u=JSON.parse(u),u.data.postFirstMessage.id}},deleteMessage:async function(e,t){t||(t=0);const n=await async function(){return await async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"2b410a33-b5a6-455c-9093-a66e91d83e2d"},referrer:"https://offerup.com/item/detail/1236460483",referrerPolicy:"strict-origin-when-cross-origin",body:'{"operationName":"GetChats","variables":{},"query":"query GetChats {\\n  getChats: alertsWithAds(type: INBOX) {\\n    chats: alertsWithAds {\\n      ... on Alert {\\n        contentThumbnails\\n        id\\n        read\\n        seen\\n        type\\n        title\\n        notificationText\\n        dateAdded\\n        objectId\\n        visualTags {\\n          tag\\n          type\\n          displayText\\n          __typename\\n        }\\n        sender {\\n          id\\n          profile {\\n            firstName\\n            isTruyouVerified\\n            isAutosDealer\\n            avatars {\\n              squareImage\\n              __typename\\n            }\\n            notActive\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      ... on BingAd {\\n        ouAdId\\n        itemName\\n        imageUrl\\n        sellerName\\n        price\\n        lowPrice\\n        impressionFeedbackUrl\\n        contentUrl\\n        adNetwork\\n        adExperimentId\\n        adRequestId\\n        experimentDataHash\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}',method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (getChatId)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,o.Z)({error:"Failed to parse deleteMessage api response.",x:e}),{}}})).then((t=>{if(t&&"proxy-failed"===t.error_code)return console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),"";if(t&&t.data&&t.data.getChats&&t.data.getChats.chats)for(const n of t.data.getChats.chats)if(Number(n.objectId)===Number(e))return n.id;(0,p._apiSendBug)({error:"Failed to find target objectID",target:e})}))}();return n?(t&&(console.log({error:`Successfully deleted conversation after ${t} retries.`,postResponseId:e}),(0,p._apiSendBug)({success:`Successfully deleted conversation after ${t} retries.`,postResponseId:e})),async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"9d22b385-ea56-4954-b533-89b7c6be1829"},referrer:"https://offerup.com/inbox",referrerPolicy:"strict-origin-when-cross-origin",body:`{"operationName":"ArchiveChats","variables":{"ids":["${n}"]},"query":"mutation ArchiveChats($ids: [String!]!) {\\n  archiveAlerts(alertIds: $ids)\\n}\\n"}`,method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (deleteMessage)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((e=>{if(e&&e.includes("archiveAlerts"))return!0})).catch((e=>(console.error("Fetch Failed",e),"")))):(t+=1)<6?(await d(5,"Wait 5 seconds before retrying to delete conversation."),m().deleteMessage(e,t)):(console.error({error:"Failed to get chat id to delete after 5 retries.",postResponseId:e}),void(0,p._apiSendBug)({error:"Failed to get chat id to delete after 5 retries.",postResponseId:e}))},countConversations:async function(){try{async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"80707cf9-26e1-4dbb-b3b3-3bf45c711c5f"},referrer:"https://offerup.com/inbox",referrerPolicy:"strict-origin-when-cross-origin",body:'{"operationName":"GetChats","variables":{},"query":"query GetChats {\\n  getChats: alertsWithAds(type: INBOX) {\\n    chats: alertsWithAds {\\n      ... on Alert {\\n        contentThumbnails\\n        id\\n        read\\n        seen\\n        type\\n        title\\n        notificationText\\n        dateAdded\\n        objectId\\n        visualTags {\\n          tag\\n          type\\n          displayText\\n          __typename\\n        }\\n        sender {\\n          id\\n          profile {\\n            firstName\\n            isTruyouVerified\\n            isAutosDealer\\n            avatars {\\n              squareImage\\n              __typename\\n            }\\n            notActive\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      ... on BingAd {\\n        ouAdId\\n        itemName\\n        imageUrl\\n        sellerName\\n        price\\n        lowPrice\\n        impressionFeedbackUrl\\n        contentUrl\\n        adNetwork\\n        adExperimentId\\n        adRequestId\\n        experimentDataHash\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}',method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (countConversations)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}const t=await e().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,o.Z)({error:"Failed to parse countConversations api response.",x:e}),{}}}));if(t&&"proxy-failed"===t.error_code)return console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),"";if(t&&t.data&&t.data.getChats&&t.data.getChats.chats)return t.data.getChats.chats.length}catch(e){return 0}},fetchListings:async function(e,t){const n={operationName:"GetSearchFeed",query:"query GetSearchFeed($searchParams: [SearchParam]) {\n          search(params: $searchParams) {\n            nextPageCursor\n            query\n            feedItems {\n              type\n              tile {\n                ... on Listing {\n                  id\n                  title\n                  state\n                  condition\n                  postDate\n                  photos {\n                    uuid\n                    list {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    detail {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    small {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    squareSmall {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    __typename\n                  }\n                  category {\n                    id\n                    __typename\n                  }\n                  locationDetails {\n                    locationName\n                    distance\n                    __typename\n                  }\n                  price\n                  fulfillmentDetails {\n                    shippingEnabled\n                    shippingPrice\n                    sellerPaysShipping\n                    showShippingIconInFeed\n                    __typename\n                  }\n                  vehicleAttributes {\n                    vehicleMiles\n                    vehicleMake\n                    vehicleYear\n                    vehicleModel\n                    __typename\n                  }\n                  showCallForPrice\n                  isMerchantItem\n                  sku\n                  merchantId\n                  __typename\n                }\n                ... on SellerAd {\n                  itemId\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adNetwork\n                  adRequestId\n                  searchId\n                  tileType\n                  type\n                  campaignId\n                  impressionFeedbackUrls\n                  listing {\n                    id\n                    title\n                    condition\n                    postDate\n                    isMerchantItem\n                    photos {\n                      uuid\n                      list {\n                        url\n                        width\n                        height\n                        __typename\n                      }\n                      detail {\n                        url\n                        width\n                        height\n                        __typename\n                      }\n                      small {\n                        url\n                        width\n                        height\n                        __typename\n                      }\n                      __typename\n                    }\n                    locationDetails {\n                      locationName\n                      distance\n                      __typename\n                    }\n                    price\n                    fulfillmentDetails {\n                      shippingEnabled\n                      shippingPrice\n                      sellerPaysShipping\n                      showShippingIconInFeed\n                      __typename\n                    }\n                    vehicleAttributes {\n                      vehicleMiles\n                      __typename\n                    }\n                    showCallForPrice\n                    __typename\n                  }\n                  __typename\n                }\n                ... on BingAd {\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adNetwork\n                  adRequestId\n                  searchId\n                  tileType\n                  type\n                  experimentDataHash\n                  imageUrl\n                  contentUrl\n                  price\n                  priceCurrency\n                  itemName\n                  sellerName\n                  clientImpressionFeedbackUrls\n                  clickReturnUrl\n                  lowPrice\n                  impressionFeedbackUrl\n                  clickFeedbackUrl\n                  imageWidth\n                  imageHeight\n                  rating\n                  numberOfReviews\n                  __typename\n                }\n                ... on GoogleDisplayAd {\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adRequestId\n                  adNetwork\n                  tileType\n                  type\n                  experimentDataHash\n                  errorDrawable {\n                    listImage {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    actionPath\n                    __typename\n                  }\n                  clientId\n                  searchId\n                  displayAdType\n                  contentUrl\n                  adWidth\n                  adHeight\n                  additionalSizes\n                  __typename\n                }\n                ... on LocalDisplayAd {\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adRequestId\n                  adNetwork\n                  tileType\n                  type\n                  experimentDataHash\n                  searchId\n                  imageUrl\n                  contentUrl\n                  impressionFeedbackUrl\n                  clickFeedbackUrl\n                  headline\n                  businessName\n                  locationText\n                  callToAction\n                  callToActionType\n                  __typename\n                }\n                __typename\n              }\n              banner {\n                label\n                actionBannerType\n                __typename\n              }\n              __typename\n            }\n            feedOptions {\n              ... on FeedOptionListSelection {\n                position\n                type\n                name\n                label\n                labelShort\n                queryParam\n                options {\n                  label\n                  labelShort\n                  subLabel\n                  value\n                  selected\n                  default\n                  __typename\n                }\n                __typename\n              }\n              ... on FeedOptionNumericRange {\n                position\n                type\n                name\n                label\n                labelShort\n                units\n                lowerBound\n                upperBound\n                leftQueryParam\n                rightQueryParam\n                options {\n                  label\n                  currentValue\n                  textHint\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            feedPresentation {\n              columnCount\n              showDetailsOnTiles\n              __typename\n            }\n            searchAlert {\n              alertId\n              __typename\n            }\n            searchSuggestion {\n              originalQuery\n              suggestedQuery\n              itemSource\n              __typename\n            }\n            searchData {\n              searchPerformedEventUniqueId\n              searchSessionId\n              __typename\n            }\n            forcedCategory {\n              id\n              __typename\n            }\n            requestTimeMetadata {\n              totalResolverTimeSeconds\n              serviceRequestTimeSeconds\n              resolverComputationTimeSeconds\n              __typename\n            }\n            __typename\n          }\n        }",variables:{searchParams:[{key:"q",value:e},{key:"zipcode",value:t},{key:"platform",value:"web"},{key:"limit",value:"100"},{key:"searchSessionId",value:"82eb4f89-a745-4cee-a5c1-bd0ccb73a34e"}]}},i=await async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36","ou-experiment-data":'{"datamodel_id":"experimentmodel24"}',"sec-ch-ua":'"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkphY2tzb252aWxsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMjIwMlwiLFwibG9uZ2l0dWRlXCI6LTgxLjY0OTIsXCJsYXRpdHVkZVwiOjMwLjMyOTh9In0.9dKswdRFV427P3pvAOfIaH8ybQGx9TN3EBEFH3NOSCY","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"52b74dce-6306-4e36-a98a-837248ea416b"},referrer:"https://offerup.com/search?q=iphone+12",referrerPolicy:"strict-origin-when-cross-origin",body:JSON.stringify(n),method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (fetchListings)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return console.error(t),await(0,o.Z)({error:"Failed to parse fetchlistings api response.",x:e}),{}}}));return i&&"proxy-failed"===i.error_code?(console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),[]):i&&i.data&&i.data.search&&i.data.search.feedItems?i.data.search.feedItems.filter((e=>"item"===e.type&&e.tile&&e.tile.title)):[]},getUserListings:async function(e){const t=await async function t(n){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36","sec-ch-ua":'"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"Windows"',"sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"699815d5-4b0c-48f2-b821-0f7ceb793019"},referrer:"https://offerup.com/item/detail/1267519944?q=iphone+xs",referrerPolicy:"strict-origin-when-cross-origin",body:`{"operationName":"GetProfileUserItems","variables":{"userId":"${e}","limit":20,"pageCursor":null},"query":"query GetProfileUserItems($userId: String!, $pageCursor: String, $limit: Int) {\\n  userListings(userId: $userId, pageCursor: $pageCursor, limit: $limit) {\\n    pageCursor\\n    listings {\\n      id\\n      listingId\\n      title\\n      fulfillmentDetails {\\n  shippingEnabled\\n  shippingPrice\\n  sellerPaysShipping\\n  showShippingIconInFeed\\n  __typename\\n} postDate\\n description\\n price\\n      state\\n      locationDetails {\\n        locationName\\n        __typename\\n      }\\n      photos {\\n        uuid\\n        list {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        detail {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        __typename\\n      }\\n      vehicleAttributes {\\n        vehicleMiles\\n        __typename\\n      }\\n      owner {\\n        profile {\\n          isSubPrimeDealer\\n          isAutosDealer\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}`,method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (getUserListings)",e,n),n&&n>6?"":(await(0,l.sleep)(1e4),n||(n=0),t(n+=1)))))}().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,o.Z)({error:"Failed to parse getUserListings api response.",x:e}),{}}}));return t&&"proxy-failed"===t.error_code?(console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),[]):t&&t.data&&t.data.userListings&&t.data.userListings.listings?t.data.userListings.listings.filter((e=>"LISTED"===e.state)):((0,p._apiSendBug)({error:"Failed to get user listings",userid:e,apiResponse:t}),[])}}}},5596:(e,t,n)=>{"use strict";function i(e){const t=e.target.textContent;if(window.lastInputId){const e=document.getElementById(window.lastInputId[0]);let n=e.value;n=[n.slice(0,window.lastInputId[1]),t,n.slice(window.lastInputId[1])].join(""),e.value=n,e.parentNode.classList.add("is-focused"),e.focus();const i=window.lastInputId[1]+t.length;e.setSelectionRange(i,i)}}n.r(t),n.d(t,{attachEvents:()=>p});var a=n(3539);async function s(){"LISTINGS"===prompt("Are you sure you want to purge your listings skip list? Type LISTINGS to confirm:")&&((0,a.CONSOLE_MESSAGE)("custom","Purging listings..."),async function(){let e="listings";"single"===document.querySelector("[name=bot_mode]:checked").value||(e="listings_multi");const t=await fetch(`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?purge=1&listname=${e}&partnerid=${window.taPartnerId}`).then((e=>e.json()));t.success?(0,a.CONSOLE_MESSAGE)("custom","Listings has been successfully purged."):(console.error("Failed to purge listings.",t),(0,a.CONSOLE_MESSAGE)("custom","Failed to purge listings."))}())}async function r(){"OWNERS"===prompt("Are you sure you want to purge your owners skip list? Type OWNERS to confirm:")&&((0,a.CONSOLE_MESSAGE)("custom","Purging owners..."),async function(){const e=await fetch(`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?purge=1&listname=users&partnerid=${window.taPartnerId}`).then((e=>e.json()));e.success?(0,a.CONSOLE_MESSAGE)("custom","Owners has been successfully purged."):(console.error("Failed to purge owners.",e),(0,a.CONSOLE_MESSAGE)("custom","Failed to purge owners."))}())}n(5281);var o=n(7426),l=n(9973),c=n(7367);async function d(e){const t=e.target.id;if(t)if("radio"===e.target.type){const n=e.target.name;localStorage.setItem(`radio_${n}`,t)}else if("checkbox"===e.target.type)if(localStorage.setItem(`input_${t}`,e.target.checked),"switch-rununtil"===t&&e.target.checked){async function e(){try{await(0,l.start)()}catch(t){console.trace(),console.error("saveInput Caught error!",t),setTimeout(e,2e3)}}window.isRun=1,(0,o.o)(!1),(0,c.stats)().addRun(),e()}else window.isRun=0,(0,o.o)(!0);else localStorage.setItem(`input_${t}`,e.target.value)}var u=n(7121);function p(){document.querySelector("#roundupdown").addEventListener("change",d),document.querySelector("#streak").addEventListener("change",d),document.querySelector("#streaktimeout").addEventListener("change",d),document.querySelector("#maxconcurrentconversations").addEventListener("change",d),document.querySelector("#keywords").addEventListener("change",d),document.querySelector("#keywords").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#zipcodes").addEventListener("change",d),document.querySelector("#skipwords").addEventListener("change",d),document.querySelector("#skipwords").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#openermessage").addEventListener("change",d),document.querySelector("#openermessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#gbmessage").addEventListener("change",d),document.querySelector("#gbmessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#networkmessage").addEventListener("change",d),document.querySelector("#networkmessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#offermessage").addEventListener("change",d),document.querySelector("#offermessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#lowball_message").addEventListener("change",d),document.querySelector("#lowball_message").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_1").addEventListener("change",d),document.querySelector("#question_1").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_2").addEventListener("change",d),document.querySelector("#question_2").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_3").addEventListener("change",d),document.querySelector("#question_3").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_4").addEventListener("change",d),document.querySelector("#question_4").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_min_price").addEventListener("change",d),document.querySelector("#listing_min_price").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_max_price").addEventListener("change",d),document.querySelector("#listing_max_price").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_price_delta").addEventListener("change",d),document.querySelector("#listing_price_delta").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#custom_price_delta").addEventListener("change",d),document.querySelector("#custom_price_delta").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_max_age").addEventListener("change",d),document.querySelector("#listing_max_age").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#switch-continue_after_storage").addEventListener("change",d),document.querySelector("#switch-continue_after_network").addEventListener("change",d),document.querySelector("#meetupmessage").addEventListener("change",d),document.querySelector("#meetupmessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#partnermessage").addEventListener("change",d),document.querySelector("#partnermessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#runfrom").addEventListener("change",d),document.querySelector("#rununtil").addEventListener("change",d),document.querySelector("#switch-skipshippingenabled").addEventListener("change",d),document.querySelector("#switch-deleteaftersend").addEventListener("change",d),document.querySelector("#switch-rununtil").addEventListener("change",d),document.querySelector("#switch-rununtil").addEventListener("change",(()=>{(0,u.X)(!document.querySelector("#switch-rununtil").checked)})),document.querySelectorAll("#ta .variables .variable").forEach((e=>e.addEventListener("click",i))),document.querySelector("#ta #test_template").addEventListener("click",window.testTemplates),document.querySelector("#ta #restore_defaults").addEventListener("click",window.restoreDefaults),document.querySelector("#purge_listings").addEventListener("click",s),document.querySelector("#purge_owners").addEventListener("click",r),document.querySelector("#mode_single").addEventListener("change",d),document.querySelector("#mode_multi").addEventListener("change",d)}},1203:(e,t,n)=>{"use strict";n.r(t),n.d(t,{waitIfSpamDetected:()=>i,listingsPerKeyword:()=>a,intervalConversationsCheck:()=>s,maxItemsToOfferPartner:()=>r,showAlerts:()=>o,debug_disableMessages:()=>l,disableLogs:()=>c,messageDelay:()=>d,delayPerXMessages:()=>u,userDelay:()=>p});const i=1440,a=60,s=10,r=3,o=!1,l=!1,c=!1,d=[3,10],u=10,p=[100,300]},4347:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fetchListingDetail:()=>r});var i=n(2287),a=n(6849),s=n(4246);async function r(e,t){e&&(e=String(e));let n=`{"operationName":"GetListingDetailByListingId","variables":{"isLoggedIn":true,"listingId":"${e}"},"query":"query GetListingDetailByListingId($listingId: ID!, $isLoggedIn: Boolean = false, $deviceLocation: DeviceLocation) {\\n  listing(listingId: $listingId, deviceLocation: $deviceLocation) {\\n    ...listingDetail\\n    __typename\\n  }\\n}\\n\\nfragment listingDetail on Listing {\\n  id\\n  badges\\n  condition\\n  description\\n  discussionCount\\n  distance {\\n    unit\\n    value\\n    __typename\\n  }\\n  extractedAttributes {\\n    attributeName\\n    attributeValue\\n    attributeValueSource\\n    __typename\\n  }\\n  fulfillmentDetails {\\n    buyItNowEnabled\\n    canShipToBuyer\\n    estimatedDeliveryDateEnd\\n    estimatedDeliveryDateStart\\n    localPickupEnabled\\n    sellerPaysShipping\\n    shippingEnabled\\n    shippingParcelId\\n    shippingPrice\\n    showAsShipped\\n    __typename\\n  }\\n  isFirmOnPrice\\n  isLocal\\n  isMerchantItem\\n  lastEdited\\n  listingCategory {\\n    categoryAttributeMap {\\n      attributeName\\n      attributePriority\\n      attributeUILabel\\n      attributeValue\\n      attributeValueSource\\n      __typename\\n    }\\n    categoryV2 {\\n      id\\n      l1Id\\n      l1Name\\n      l2Id\\n      l2Name\\n      l3Id\\n      l3Name\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingDetailAds {\\n    adTiles {\\n      ...adsGoogleDisplayAd\\n      __typename\\n    }\\n    placements {\\n      adTileConfigs {\\n        adSize {\\n          additionalSizes\\n          height\\n          width\\n          __typename\\n        }\\n        displayType\\n        renderLocation\\n        __typename\\n      }\\n      adType\\n      quantity\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingId\\n  locationDetails {\\n    distance\\n    latitude\\n    locationName\\n    longitude\\n    __typename\\n  }\\n  merchantId\\n  merchantProfile {\\n    avatar {\\n      small {\\n        url\\n        __typename\\n      }\\n      __typename\\n    }\\n    description\\n    emailAddress\\n    legacyUserOwner\\n    phoneNumber\\n    publicLocationName\\n    storeName\\n    ratingSummary {\\n      average\\n      count\\n      __typename\\n    }\\n    __typename\\n  }\\n  originalPrice\\n  originalTitle\\n  owner {\\n    id\\n    profile {\\n      avatars {\\n        squareImage\\n        __typename\\n      }\\n      c2cPhoneNumber {\\n        countryCode\\n        nationalNumber\\n        __typename\\n      }\\n      clickToCallEnabled\\n      dateJoined\\n      isAutosDealer\\n      isSubPrimeDealer\\n      isTruyouVerified\\n      name\\n      notActive\\n      openingHours {\\n        day\\n        hours\\n        __typename\\n      }\\n      phoneNumber\\n      publicLocation {\\n        formattedAddress\\n        latitude\\n        longitude\\n        name\\n        __typename\\n      }\\n      publicLocationName\\n      itemsPurchased\\n      itemsSold\\n      responseTime\\n      ratingSummary {\\n        average\\n        count\\n        __typename\\n      }\\n      reviews {\\n        attributionIcon\\n        average\\n        readMoreUrl\\n        title\\n        userReviews {\\n          profilePhotoUrl\\n          text\\n          __typename\\n        }\\n        __typename\\n      }\\n      websiteLink\\n      __typename\\n    }\\n    __typename\\n  }\\n  ownerId\\n  photos {\\n    uuid\\n    detail {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    detailFull {\\n      url\\n      width\\n      height\\n      __typename\\n    }\\n    detailSquare {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    list {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    medium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    squareMedium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  postDate\\n  price\\n  quantity\\n  saved @include(if: $isLoggedIn)\\n  shippingOptions {\\n    maxHandlingDays\\n    maxShippingDays\\n    minHandlingDays\\n    minShippingDays\\n    name\\n    price\\n    priority\\n    __typename\\n  }\\n  shippingRate {\\n    maxDeliveryDays\\n    maxEstimatedDeliveryDate\\n    minDeliveryDays\\n    minEstimatedDeliveryDate\\n    price\\n    priority\\n    __typename\\n  }\\n  sku\\n  state\\n  title\\n  vehicleAttributes {\\n    vehicleBody\\n    vehicleCityMpg\\n    vehicleColor\\n    vehicleDriveTrain\\n    vehicleDriveTrainClean\\n    vehicleEngineCylinders\\n    vehicleEpaCity\\n    vehicleEpaHighway\\n    vehicleExternalHistoryReport {\\n      epochDate\\n      imageUrl\\n      issues\\n      price {\\n        microUnits\\n        __typename\\n      }\\n      providerName\\n      reportUrl\\n      source\\n      __typename\\n    }\\n    vehicleFuelType\\n    vehicleFundamentals\\n    vehicleHighwayMpg\\n    vehicleId\\n    vehicleMake\\n    vehicleMiles\\n    vehicleModel\\n    vehicleStyleDisplay\\n    vehicleTitleStatus\\n    vehicleTransmission\\n    vehicleTransmissionClean\\n    vehicleTrim\\n    vehicleVin\\n    vehicleYear\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment adsGoogleDisplayAd on GoogleDisplayAd {\\n  ...baseGoogleDisplayAd\\n  renderLocation\\n  tileType\\n  __typename\\n}\\n\\nfragment baseGoogleDisplayAd on GoogleDisplayAd {\\n  ouAdId\\n  adExperimentId\\n  adHeight\\n  adMediationId\\n  adNetwork\\n  adRequestId\\n  adWidth\\n  clientId\\n  contentUrl\\n  displayAdType\\n  errorDrawable {\\n    actionPath\\n    listImage {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  experimentDataHash\\n  personalizationProperties {\\n    key\\n    values\\n    __typename\\n  }\\n  type\\n  __typename\\n}\\n"}`;e&&e.includes&&!e.includes("-")&&(n=`{"operationName":"GetListingDetailByItemId","variables":{"isLoggedIn":false,"itemId":${e},"vehicleHistoryExperiment":"vinaudit_1"},"query":"query GetListingDetailByItemId($itemId: Int!, $vehicleHistoryExperiment: String, $isLoggedIn: Boolean = false, $deviceLocation: DeviceLocation) {\\n  listing(\\n    itemId: $itemId\\n    vehicleHistoryExperiment: $vehicleHistoryExperiment\\n    deviceLocation: $deviceLocation\\n  ) {\\n    ...listingDetail\\n    __typename\\n  }\\n}\\n\\nfragment listingDetail on Listing {\\n  id\\n  badges\\n  condition\\n  description\\n  discussionCount\\n  distance {\\n    unit\\n    value\\n    __typename\\n  }\\n  extractedAttributes {\\n    attributeName\\n    attributeValue\\n    attributeValueSource\\n    __typename\\n  }\\n  fulfillmentDetails {\\n    buyItNowEnabled\\n    canShipToBuyer\\n    estimatedDeliveryDateEnd\\n    estimatedDeliveryDateStart\\n    localPickupEnabled\\n    sellerPaysShipping\\n    shippingEnabled\\n    shippingParcelId\\n    shippingPrice\\n    showAsShipped\\n    __typename\\n  }\\n  isFirmOnPrice\\n  isLocal\\n  isMerchantItem\\n  lastEdited\\n  listingCategory {\\n    categoryAttributeMap {\\n      attributeName\\n      attributePriority\\n      attributeUILabel\\n      attributeValue\\n      attributeValueSource\\n      __typename\\n    }\\n    categoryV2 {\\n      id\\n      l1Id\\n      l1Name\\n      l2Id\\n      l2Name\\n      l3Id\\n      l3Name\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingDetailAds {\\n    adTiles {\\n      ...adsGoogleDisplayAd\\n      __typename\\n    }\\n    placements {\\n      adTileConfigs {\\n        adSize {\\n          additionalSizes\\n          height\\n          width\\n          __typename\\n        }\\n        displayType\\n        renderLocation\\n        __typename\\n      }\\n      adType\\n      quantity\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingId\\n  locationDetails {\\n    distance\\n    latitude\\n    locationName\\n    longitude\\n    __typename\\n  }\\n  merchantId\\n  merchantProfile {\\n    avatar {\\n      small {\\n        url\\n        __typename\\n      }\\n      __typename\\n    }\\n    description\\n    emailAddress\\n    legacyUserOwner\\n    phoneNumber\\n    publicLocationName\\n    storeName\\n    ratingSummary {\\n      average\\n      count\\n      __typename\\n    }\\n    __typename\\n  }\\n  originalPrice\\n  originalTitle\\n  owner {\\n    id\\n    profile {\\n      avatars {\\n        squareImage\\n        __typename\\n      }\\n      c2cPhoneNumber {\\n        countryCode\\n        nationalNumber\\n        __typename\\n      }\\n      clickToCallEnabled\\n      dateJoined\\n      isAutosDealer\\n      isSubPrimeDealer\\n      isTruyouVerified\\n      name\\n      notActive\\n      openingHours {\\n        day\\n        hours\\n        __typename\\n      }\\n      phoneNumber\\n      publicLocation {\\n        formattedAddress\\n        latitude\\n        longitude\\n        name\\n        __typename\\n      }\\n      publicLocationName\\n      itemsPurchased\\n      itemsSold\\n      responseTime\\n      ratingSummary {\\n        average\\n        count\\n        __typename\\n      }\\n      reviews {\\n        attributionIcon\\n        average\\n        readMoreUrl\\n        title\\n        userReviews {\\n          profilePhotoUrl\\n          text\\n          __typename\\n        }\\n        __typename\\n      }\\n      websiteLink\\n      __typename\\n    }\\n    __typename\\n  }\\n  ownerId\\n  photos {\\n    uuid\\n    detail {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    detailFull {\\n      url\\n      width\\n      height\\n      __typename\\n    }\\n    detailSquare {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    list {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    medium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    squareMedium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  postDate\\n  price\\n  quantity\\n  saved @include(if: $isLoggedIn)\\n  shippingOptions {\\n    maxHandlingDays\\n    maxShippingDays\\n    minHandlingDays\\n    minShippingDays\\n    name\\n    price\\n    priority\\n    __typename\\n  }\\n  shippingRate {\\n    maxDeliveryDays\\n    maxEstimatedDeliveryDate\\n    minDeliveryDays\\n    minEstimatedDeliveryDate\\n    price\\n    priority\\n    __typename\\n  }\\n  sku\\n  state\\n  title\\n  vehicleAttributes {\\n    vehicleBody\\n    vehicleCityMpg\\n    vehicleColor\\n    vehicleDriveTrain\\n    vehicleDriveTrainClean\\n    vehicleEngineCylinders\\n    vehicleEpaCity\\n    vehicleEpaHighway\\n    vehicleExternalHistoryReport {\\n      epochDate\\n      imageUrl\\n      issues\\n      price {\\n        microUnits\\n        __typename\\n      }\\n      providerName\\n      reportUrl\\n      source\\n      __typename\\n    }\\n    vehicleFuelType\\n    vehicleFundamentals\\n    vehicleHighwayMpg\\n    vehicleId\\n    vehicleMake\\n    vehicleMiles\\n    vehicleModel\\n    vehicleStyleDisplay\\n    vehicleTitleStatus\\n    vehicleTransmission\\n    vehicleTransmissionClean\\n    vehicleTrim\\n    vehicleVin\\n    vehicleYear\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment adsGoogleDisplayAd on GoogleDisplayAd {\\n  ...baseGoogleDisplayAd\\n  renderLocation\\n  tileType\\n  __typename\\n}\\n\\nfragment baseGoogleDisplayAd on GoogleDisplayAd {\\n  ouAdId\\n  adExperimentId\\n  adHeight\\n  adMediationId\\n  adNetwork\\n  adRequestId\\n  adWidth\\n  clientId\\n  contentUrl\\n  displayAdType\\n  errorDrawable {\\n    actionPath\\n    listImage {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  experimentDataHash\\n  personalizationProperties {\\n    key\\n    values\\n    __typename\\n  }\\n  type\\n  __typename\\n}\\n"}`);try{async function t(a){return fetch("https://offerup.com/api/graphql",{credentials:"include",headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",Accept:"*/*","Accept-Language":"en-US,en;q=0.5","content-type":"application/json","x-ou-d-token":"web-8a263c39445e93084073408011803c17b413d18fa91fafb9f64f706f","x-ou-f-token":"6af29b25b551922205a90937fd164603",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0","Proxy-Authorization":"Basic dHJhZGVhcHBsZXM6YXBwbGVzdHJhZGU2OQ=="},referrer:`https://offerup.com/item/detail/${e}?q=iphone`,body:n,method:"POST",mode:"cors"}).then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (fetchListingDetail)",e,a),a&&a>6?"":(await(0,s.sleep)(1e4),a||(a=0),t(a+=1)))))}return t().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,a.Z)({error:"Failed to parse fetchListingDetail api response.",x:e}),{}}})).then((async e=>e&&"proxy-failed"===e.error_code?(console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),""):e.data&&e.data.listing?e.data.listing:(console.error("Failed to get listing details",e),console.trace(),await(0,a.Z)({error:"Failed to get listing details",details:e}),""))).catch((e=>(console.error("Fetch Failed (fetchListingDetail))",e),"")))}catch(n){if(!t)return r(e,!0)}}},6901:(e,t,n)=>{"use strict";n.d(t,{f:()=>a,d:()=>s});var i=n(3539);function a(e){let t=Number(document.querySelector("#listing_min_price").value)||0,n=Number(document.querySelector("#listing_max_price").value)||0;if(0===t&&0===n)return e;const a=e.length,s=(e=e.filter((e=>{const i=e.tile&&Number(e.tile.price);return i>=t&&i<=n}))).length;return s!==a&&(0,i.CONSOLE_MESSAGE)("price_not_inrange",{num_listings:a-s}),e}function s(e){let t=Number(document.querySelector("#listing_min_price").value)||0,n=Number(document.querySelector("#listing_max_price").value)||0;return 0===t&&0===n||e>=t&&e<=n}},3539:(e,t,n)=>{"use strict";n.r(t),n.d(t,{getConsoleMessages:()=>r,CONSOLE_MESSAGE:()=>o});var i=n(2287),a=n(6849),s=n(7091);async function r(){if(window.consoleMessages)return window.consoleMessages;const e=await fetch("https://sheets.hopla.tools/?HT=1a6324ea456c27346230df0a70458cc9&format=json&sheet_name=ConsoleLog").then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text())).then((async e=>{try{return JSON.parse(e)}catch(t){return await(0,a.Z)({error:"Failed to parse getConsoleMessages api response.",x:e}),{}}}));if(e&&e.result){window.consoleMessages={};for(const t of e.result)t.variable&&(window.consoleMessages[t.variable]=t.message||"");return window.consoleMessages}return await(0,a.Z)({error:"Failed to get console messages."}),console.error("Failed to get console message"),{}}function o(e,t){if(function(e){return e="object"==typeof e?JSON.stringify(e):e,window.lastLog?window.lastLog===e||void(window.lastLog=e):(window.lastLog=e,!1)}(t||e))return;if("custom"===e)return window.lastLog=t,console.log(t),void(0,s.showLastConsoleLog)(t);if(!window.consoleMessages)return console.error("Called consoleMessage without initiating."),"";let n=window.consoleMessages[e];if(t)for(const e in t){const i=new RegExp(`{${e}}`,"gi");n=n.replace(i,t[e]||"")}console.log(n),(0,s.showLastConsoleLog)(n)}},5149:(e,t,n)=>{"use strict";function i(e,t){if(!e)return"";for(const n of e)if(n.attributeName===t&&Array.isArray(n.attributeValue)&&n.attributeValue.length)return n.attributeValue[0].toLowerCase();return""}n.d(t,{N:()=>i})},5508:(e,t,n)=>{"use strict";n.d(t,{T:()=>a});var i=n(4347);async function a(e){const t=await(0,i.fetchListingDetail)(e);if(!t)return{};const n=t.listingCategory.categoryAttributeMap;let{title:a,description:s,condition:r,price:o}=t;return a||(a=""),s||(s=""),r||(r=""),o||(o=""),{title:a,description:s,condition:r,price:o,attributes:n}}window.getItemInfo=a},9105:(e,t)=>{},8414:(e,t,n)=>{"use strict";async function i(e){return fetch(`https://us-central1-trade-apples.cloudfunctions.net/partners?getpartnerdetails=1&uid=${e}`).then((e=>e.json()))}n.r(t),n.d(t,{getPartnerDetails:()=>i})},2320:(e,t,n)=>{"use strict";n.r(t),n.d(t,{getQuote:()=>c});var i=n(9178),a=n(3539),s=n(6849);async function r(){try{if(window.kvJson)return window.kvJson;const e=await fetch("https://prices.phones.trade/?kvread=key_values").then((e=>e.json()));return window.kvJson=e,e}catch(e){return console.log("error",e),await(0,s.Z)({error:"Failed to get key values from prices endpoint"}),""}}function o(e){if(e&&e.match(/internal/i))return"internal";let t=e;const n=e.match(/\[(.+)\]/);let i="";return n&&(i=n[1].trim(),t=t.replace(`[${i}]`,"").trim(),t=t.split("-"),t=t.length>1?t[1].trim():t[0].trim()),t}async function l(e){const t=await r();if(!t)return"";const n=t.bykey;return n&&n[e]||""}async function c(e,t){console.log("Getting quote.."),(0,a.CONSOLE_MESSAGE)("custom",`Getting quote of listing (${t})`);const n=e.model||"13promax",s=e.storage,c=e.network,d=e.condition||"likenew",u=e.deductions||"";let p,m;e.model&&e.storage&&e.network&&e.condition&&e.deductions||console.log("Found case with missing variant details.",e,t);const h=await async function(e){const t=(await r()).bykey;let n=[];if(!t)return"";const i=Object.keys(t).filter((e=>e.startsWith("M")));for(const e of i)n.push({key:e,value:t[e]});e&&!e.startsWith("iphone")&&(e="iphone"+e);for(const t of n){let n=t.value;if(n=n.toLowerCase().replace(/\s+/g,""),"iphonese2020"===n&&(n="iphonese2"),"iphonese2022"===n&&(n="iphonese3"),n===e)return t.key}}(n);s&&(p=await async function(e){const t=await r();return e=e.toUpperCase(),t.byvalue[e]}(s)),c&&(m=await async function(e){const t=await r(),n=Object.keys(t.bykey).filter((e=>e.startsWith("N")));for(const a of n){const n=(0,i.M)(t.bykey[a]);if(e.toLowerCase()===n.toLowerCase())return a}}(c));const g=await async function(e){const t=(await r()).bykey,n=[];if(!t)return"";const i=Object.keys(t).filter((e=>e.startsWith("C")));for(const e of i)n.push({key:e,value:t[e]});e&&(e=e.toLowerCase().replace(/\s+/g,""));for(const t of n){let n=t.value;if(n=o(n),n=n.toLowerCase().replace(/\s+/g,""),n===e)return t.key}return""}(d),f=await function(e){const t=[];e&&e.forEach((e=>{let n;switch(e){case"touchid issue":case"faceid issue":n="D3";break;case"crackedback":case"crackediphone":n="D1";break;case"simcard reading issue":n="D5";break;case"wifiissues":case"wifiproblems":n="D4";break;case"camera issues":case"cameraproblems":case"brokencamera":n="D2";break;case"crackedcameralens":n="D13"}n&&t.push(n)}))}(u);console.log("deductionKeys",f);const w={model:(0,i.M)(await l(h)),condition:(0,i.M)(await l(g))};if(p&&(w.storage=(0,i.M)(await l(p))),m&&(w.network=(0,i.M)(await l(m))),f&&Array.isArray(f)){const e=f.map((e=>{console.log("key",e);let t=l(x);return(0,i.M)(t)}));w.deductions=e}u&&u.includes("icloud")&&(p="S5",m="N6"),console.log("modelKey",h),console.log("storageKey",p),console.log("networkKey",m),console.log("conditionKey",g),console.log("deductionKeys",f);const y=await async function(e,t,n,i,a){let s=a?a.join("-"):"";return s&&(s=`&deductions=${s}`),await fetch(`https://prices.phones.trade/?getvariantprice=1&model=${e}&storage=${t||""}&network=${n||""}&condition=${i||""}${s}`).then((e=>e.text())).then((e=>{try{return JSON.parse(e)}catch(e){return{}}}))}(h,p,m,g,f);return console.log("price",y.price),!p&&y.storageKey&&(w.storage=(0,i.M)(await l(y.storageKey))),!m&&y.networkKey&&(w.network=(0,i.M)(await l(y.networkKey))),w.price=y.price,w}},2617:(e,t,n)=>{"use strict";n.d(t,{g:()=>a});var i=n(4484);function a(){if(window.userEmail)return window.userEmail;try{const e=document.querySelector("#__NEXT_DATA__").textContent,t=JSON.parse(e);for(const e in t.props.pageProps.initialApolloState)if(e.startsWith("User")){window.userEmail=t.props.pageProps.initialApolloState[e].account.email;break}return window.userEmail}catch(e){console.error(e),(0,i._apiSendBug)({error:"Failed to get user email",details:e.toString()})}}},5826:(e,t,n)=>{"use strict";n.r(t),n.d(t,{getVariant:()=>m});var i=n(5149),a=n(5508),s=n(2287),r=n(4246),o=n(4484);async function l(){return console.log("Fetching model matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Model%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Model matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get model matches.",x:e}),alert("Failed to get model matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get model matches.",e:e.toString()}),(0,r.sleep)(1e4).then((()=>l())))))}async function c(){return console.log("Fetching storage matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Storage%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Storage matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get storage matches.",x:e}),alert("Failed to get storage matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get storage matches.",e:e.toString()}),(0,r.sleep)(1e4).then((()=>c())))))}async function d(){return console.log("Fetching network matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Network%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Network matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get network matches.",x:e}),alert("Failed to get network matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get network matches.",e:e.toString()}),(0,r.sleep)(1e4).then((()=>d())))))}async function u(){return console.log("Fetching deduction matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Deduction%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Deduction matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get deduction matches.",x:e}),alert("Failed to get deduction matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get deduction matches.",e:e.toString()}),alert("Failed to get deduction matches."),(0,r.sleep)(1e4).then((()=>u())))))}var p=n(5281);async function m(e){window.textMatchIndex={},window.textMatchIndex[e]={};const t=await(0,a.T)(e),n={};return n.model=await async function(){const n=t.title&&t.title.toLowerCase(),a=t.description&&t.description.toLowerCase(),s=(0,i.N)(t.attributes,"model"),r=["11promax","11pro","11","xsmax","xs","xr","x","8plus","8","7plus","7","se2","12promax","12pro","12mini","12","13promax","13pro","13mini","13","6plus","6splus","6s","6"];if(!window.modelMatches){const e=await l();window.modelMatches=[],r.forEach((t=>{window.modelMatches.push([t,e[t]])}))}const o=window.modelMatches;for(const t of o){const i=t[0],r=t[1];if(Array.isArray(r))for(const t of r){const r=new RegExp(t,"i");let o=s&&s.match(r);if(o)return window.textMatchIndex[e].modelFromAttribute||(window.textMatchIndex[e].modelFromAttribute={}),window.textMatchIndex[e].modelFromAttribute.model={rgx:r},i;if(o=n&&n.match(r),o)return window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.model={rgx:r},i;if(o=a&&a.match(r),o)return window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.model={rgx:r},window.textMatchIndex[e].model={via:"description",index:o.index,length:r.source.length},i}}for(const e of o){const t=e[0],n=e[1];if(console.log("keyMatches",n),n)for(const e of n){const n=new RegExp(e,"i");if(s&&s.match(n))return t;if(a&&a.match(n))return t}}}(),n.storage=await async function(){const i=t.title&&t.title.toLowerCase(),a=t.description&&t.description.toLowerCase();window.storageMatches||(window.storageMatches=await c());const s=window.storageMatches,r={"16gb":["16\\s?gb"]};for(const t in s){const n=s[t];for(const s of n){const n=new RegExp(s,"i");if(i&&i.match(n))return window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.storage={rgx:n},t;if(a&&a.match(n))return window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.storage={rgx:n},t}}for(const e in r){const t=r[e];for(const s of t){const t=new RegExp(s,"i");if(i&&i.match(t))return n.skip=!0,e;if(a&&a.match(t))return n.skip=!0,e}}}(),n.network=await async function(){const n=t.title&&t.title.toLowerCase(),a=t.description&&t.description.toLowerCase(),s=(0,i.N)(t.attributes,"carrierNetwork"),r=["unlocked","locked"];if(!window.networkMatches){const e=await d();window.networkMatches=[],r.forEach((t=>{window.networkMatches.push([t,e[t]])}))}const o=window.networkMatches;for(const t of o){const i=t[0],r=t[1];for(const t of r){const r=new RegExp(t,"i");if(s&&s.match(r))return window.textMatchIndex[e].networkFromAttribute||(window.textMatchIndex[e].networkFromAttribute={}),window.textMatchIndex[e].networkFromAttribute.network={rgx:r},i;if(n&&n.match(r))return window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.network={rgx:r},i;if(a&&a.match(r))return window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.network={rgx:r},i}}}(),n.condition=await function(){if(t&&t.condition){if(100===t.condition)return"likenew";if(80===t.condition)return"likenew";if(60===t.condition)return"new";if(40===t.condition)return"likenew";if(20===t.condition)return n.skip=!0,console.log("Skipped because condition is For Parts."),"dead";if(0===t.condition)return"likenew"}}(),n.deductions=await async function(){const n=t.title&&t.title.toLowerCase(),i=t.description&&t.description.toLowerCase(),a=["icloud","crackedcameralens","faceid issue"];if(!window.deductionMatches){const e=await u();window.deductionMatches=[],a.forEach((t=>{window.deductionMatches.push([t,e[t]])}))}const s=window.deductionMatches,r=[];for(const t of s){const a=t[0],s=t[1];for(const t of s){const s=new RegExp(t,"i");n&&n.match(s)?(window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.deductions||(window.textMatchIndex[e].title.deductions=[]),window.textMatchIndex[e].title.deductions.push(s),r.push(a)):i&&i.match(s)&&(window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.deductions||(window.textMatchIndex[e].description.deductions=[]),window.textMatchIndex[e].description.deductions.push(s),r.push(a))}}return r}(),t.price?n.listing_price=parseFloat(t.price):n.listing_price=0,window.lastVariant=n,(0,p.Q)(e,t),n}window.getVariant=m},3119:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var i=n(6849);async function a(e){return fetch(`https://us-central1-trade-apples.cloudfunctions.net/partners?getDomain=1&uid=${e}`).then((e=>e.text())).then((t=>{try{const n=JSON.parse(t);let i=n&&n.domain;return i||(i=`${e}.tradeapples.com`),`https://${i}`}catch(t){return`https://${e}.tradeapples.com`}})).catch((t=>((0,i.Z)({error:"getWebsiteVariable failed.",detail:t.toString()}),`https://${e}.tradeapples.com`)))}},2287:(e,t,n)=>{"use strict";function i(e){return new Promise(((t,n)=>window.isRun?e.ok?void t(e):(console.trace(),console.error("Fetch has caught error but is handled",e.statusText),void setTimeout((()=>{n(e.statusText)}),1e4)):t(e)))}n.r(t),n.d(t,{handleFetchErrors:()=>i})},6722:(e,t,n)=>{"use strict";function i(e){let t=document.createElement("script");t.setAttribute("src","https://login.hopla.to/js/hopla-login.js"),t.type="text/javascript",t.onload=function(){HOPLA_login.init({projectid:"-MuH8erCc-DO-GAWvO7v",onready:function(){console.log("User Details",HOPLA_login.user),console.log("You are logged in as ",HOPLA_login.user.uid),"function"==typeof e&&e(HOPLA_login.user)}})},document.head.appendChild(t),document.head.insertAdjacentHTML("beforeend","<style>\n    #ta .hopla-button {\n      position: absolute;\n      top: 29%;\n      left: 50%;\n      transform: translate(-50%);\n    }\n    </style>")}n.r(t),n.d(t,{injectHoplaLogin:()=>i})},7731:(e,t,n)=>{"use strict";n.r(t),n.d(t,{injectLogger:()=>a});const{showLastConsoleLog:i}=n(7091);function a(){void 0===window.everything&&(window.everything=[],console.defaultLog=console.log.bind(console),console.log=function(){i(Array.from(arguments).join(" ")),window.everything.push({type:"log",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultLog.apply(console,[(new Date).toLocaleString(),...arguments])},console.defaultError=console.error.bind(console),console.error=function(){i(Array.from(arguments).join(" ")),window.everything.push({type:"error",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultError.apply(console,arguments)},console.defaultWarn=console.warn.bind(console),console.warn=function(){window.everything.push({type:"warn",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultWarn.apply(console,arguments)},console.defaultDebug=console.debug.bind(console),console.debug=function(){window.everything.push({type:"debug",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultDebug.apply(console,arguments)})}},4559:(e,t,n)=>{"use strict";function i(){let e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("href","https://fonts.googleapis.com/icon?family=Material+Icons"),document.head.appendChild(e),e=document.createElement("link"),e.setAttribute("rel","stylesheet"),e.setAttribute("href","https://code.getmdl.io/1.3.0/material.indigo-pink.min.css"),document.head.appendChild(e),e=document.createElement("script"),e.setAttribute("src","https://code.getmdl.io/1.3.0/material.min.js"),document.head.appendChild(e),e=document.createElement("script"),e.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.4.2/dialog-polyfill.min.js"),document.head.appendChild(e),document.head.insertAdjacentHTML("beforeend","<style>\n    #ta .mdl-switch {\n      width: unset;\n    }\n\n    #__next, .MuiPaper-root {\n      width: calc(100% - 370px) !important;\n      left: 0px !important;\n    }\n    </style>")}n.r(t),n.d(t,{injectMdl:()=>i})},3695:(e,t,n)=>{"use strict";function i(){const e=document.createElement("script");e.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.2/moment.min.js"),document.head.appendChild(e)}n.r(t),n.d(t,{injectMoment:()=>i})},5729:(e,t,n)=>{"use strict";function i(){const e=document.createElement("style");document.head.append(e),e.textContent=".mdl-list__item.taseparator {\n    border-bottom: solid 1px #e0e0e0;\n  }\n  \n  .mdl-list__item.taseparator .mdl-textfield__input {\n    border-bottom: unset;\n    text-align: right;\n  }\n  \n  .mdl-list__item-secondary-action.tawsmall {\n    width: 45px;\n  }\n  \n  [id^=page] .demo-list-control {\n    margin-top: unset;\n    height: calc(100% - 143px);\n    overflow: auto;\n  }\n  \n  #page2 .demo-list-control {\n    /* margin-top: unset;\n    height: fit-content;\n    overflow: auto; */\n    margin-top: unset;\n    height: calc(100% - 198px);\n    overflow: auto;\n  }\n  \n  #ta .mdl-textfield {\n    width: 100%;\n  }\n  \n  /* #ta .mdl-textfield__label {\n    text-align: center;\n  } */\n  \n  .label {\n    font-weight: 700;\n    margin-right: 10px;\n  }\n  \n  #dialog-bug {\n    width: 400px;\n    height: max-content;\n  }\n  \n  .report-detail {\n    display: flex;\n  }\n  \n  #bugvariantdetails {\n    border: solid 1px;\n    padding: 8px;\n  }\n  \n  \n  .blue {\n    color: blue\n  }\n  .green {\n    color: green\n  }\n  .purple {\n    color: purple\n  }\n  .red {\n    color: red\n  }\n  .bgred {\n    background: red !important;\n  }\n  \n  .buttons_container {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n  }\n  "}n.r(t),n.d(t,{injectStyle:()=>i})},7933:(e,t,n)=>{"use strict";n.r(t),n.d(t,{injectTrackjs:()=>a});var i=n(6849);function a(){try{self.TrackJS=self.trackJs=function(e,t,n){var i=function(e,t){this.config=e,this.onError=t,e.enabled&&this.watch()};i.prototype={watch:function(){m.forEach(["EventTarget","Node","XMLHttpRequest"],(function(t){m.has(e,t+".prototype.addEventListener")&&m.hasOwn(e[t].prototype,"addEventListener")&&this.wrapEventTarget(e[t].prototype)}),this),this.wrapTimer("setTimeout"),this.wrapTimer("setInterval")},wrap:function(e){function t(){try{return e.apply(this,arguments)}catch(e){throw a.onError("catch",e,{bindTime:n,bindStack:i}),m.wrapError(e)}}var n,i,a=this;try{if(!m.isFunction(e)||m.hasOwn(e,"__trackjs__"))return e;if(m.hasOwn(e,"__trackjs_state__"))return e.__trackjs_state__}catch(t){return e}if(a.config.bindStack)try{throw Error()}catch(e){i=e.stack,n=m.isoNow()}for(var s in e)m.hasOwn(e,s)&&(t[s]=e[s]);return t.prototype=e.prototype,t.__trackjs__=!0,e.__trackjs_state__=t},wrapEventTarget:function(e){var t=this;m.has(e,"addEventListener.call")&&m.has(e,"removeEventListener.call")&&(m.patch(e,"addEventListener",(function(e){return function(n,i,a,s){try{m.has(i,"handleEvent")&&(i.handleEvent=t.wrap(i.handleEvent))}catch(e){}return e.call(this,n,t.wrap(i),a,s)}})),m.patch(e,"removeEventListener",(function(e){return function(t,n,i,a){try{n=n&&(n.__trackjs_state__||n)}catch(e){}return e.call(this,t,n,i,a)}})))},wrapTimer:function(t){var n=this;m.patch(e,t,(function(e){return function(t,i){var a=Array.prototype.slice.call(arguments),s=a[0];return m.isFunction(s)&&(a[0]=n.wrap(s)),m.has(e,"apply")?e.apply(this,a):e(a[0],a[1])}}))}};var a=function(e){this.initCurrent(e)||console.warn("[TrackJS] invalid config")};a.prototype={current:{},initOnly:{application:!0,cookie:!0,enabled:!0,token:!0,callback:{enabled:!0},console:{enabled:!0},navigation:{enabled:!0},network:{enabled:!0,fetch:!0},visitor:{enabled:!0},window:{enabled:!0,promise:!0}},defaults:{application:"",cookie:!1,dedupe:!0,dependencies:!0,enabled:!0,forwardingDomain:"",errorURL:"https://capture.trackjs.com/capture",errorNoSSLURL:"http://capture.trackjs.com/capture",faultURL:"https://usage.trackjs.com/fault.gif",usageURL:"https://usage.trackjs.com/usage.gif",onError:function(){return!0},serialize:function(e){function t(e){var t="<"+e.tagName.toLowerCase();e=e.attributes||[];for(var n=0;n<e.length;n++)t+=" "+e[n].name+'="'+e[n].value+'"';return t+">"}if(""===e)return"Empty String";if(e===n)return"undefined";if(m.isString(e)||m.isNumber(e)||m.isBoolean(e)||m.isFunction(e))return""+e;if(m.isElement(e))return t(e);if("symbol"==typeof e)return Symbol.prototype.toString.call(e);var i;try{i=JSON.stringify(e,(function(e,i){return i===n?"undefined":m.isNumber(i)&&isNaN(i)?"NaN":m.isError(i)?{name:i.name,message:i.message,stack:i.stack}:m.isElement(i)?t(i):i}))}catch(t){for(var a in i="",e)if(e.hasOwnProperty(a))try{i+=',"'+a+'":"'+e[a]+'"'}catch(e){}i=i?"{"+i.replace(",","")+"}":"Unserializable Object"}return i.replace(/"undefined"/g,"undefined").replace(/"NaN"/g,"NaN")},sessionId:"",token:"",userId:"",version:"",callback:{enabled:!0,bindStack:!1},console:{enabled:!0,display:!0,error:!0,warn:!1,watch:["log","debug","info","warn","error"]},navigation:{enabled:!0},network:{enabled:!0,error:!0,fetch:!0},visitor:{enabled:!0},window:{enabled:!0,promise:!0}},initCurrent:function(e){return this.removeEmpty(e),this.validate(e,this.defaults,"[TrackJS] config",{})?(this.current=m.defaultsDeep({},e,this.defaults),!0):(this.current=m.defaultsDeep({},this.defaults),!1)},setCurrent:function(e){return!!this.validate(e,this.defaults,"[TrackJS] config",this.initOnly)&&(this.current=m.defaultsDeep({},e,this.current),!0)},removeEmpty:function(e){for(var t in e)e.hasOwnProperty(t)&&e[t]===n&&delete e[t]},validate:function(e,t,n,i){var a=!0;for(var s in n=n||"",i=i||{},e)if(e.hasOwnProperty(s))if(t.hasOwnProperty(s)){var r=typeof t[s];r!==typeof e[s]?(console.warn(n+"."+s+": property must be type "+r+"."),a=!1):"[object Array]"!==Object.prototype.toString.call(e[s])||this.validateArray(e[s],t[s],n+"."+s)?"[object Object]"===Object.prototype.toString.call(e[s])?a=this.validate(e[s],t[s],n+"."+s,i[s]):i.hasOwnProperty(s)&&(console.warn(n+"."+s+": property cannot be set after load."),a=!1):a=!1}else console.warn(n+"."+s+": property not supported."),a=!1;return a},validateArray:function(e,t,n){var i=!0;n=n||"";for(var a=0;a<e.length;a++)m.contains(t,e[a])||(console.warn(n+"["+a+"]: invalid value: "+e[a]+"."),i=!1);return i}};var s=function(e,t,n,i,a,s,r){this.util=e,this.log=t,this.onError=n,this.onFault=i,this.serialize=a,r.enabled&&(s.console=this.wrapConsoleObject(s.console,r))};s.prototype={wrapConsoleObject:function(e,t){var n,i=(e=e||{}).log||function(){},a=this;for(n=0;n<t.watch.length;n++)!function(n){var s=e[n]||i;e[n]=function(){try{var i=Array.prototype.slice.call(arguments);if(a.log.add("c",{timestamp:a.util.isoNow(),severity:n,message:a.serialize(1===i.length?i[0]:i)}),t[n])if(m.isError(i[0])&&1===i.length)a.onError("console",i[0]);else try{throw Error(a.serialize(1===i.length?i[0]:i))}catch(e){a.onError("console",e)}t.display&&(a.util.hasFunction(s,"apply")?s.apply(e,i):s(i[0]))}catch(e){a.onFault(e)}}}(t.watch[n]);return e},report:function(){return this.log.all("c")}};var r=function(e,t,n,i,a){this.config=e,this.util=t,this.log=n,this.window=i,this.document=a,this.correlationId=this.token=null,this.initialize()};r.prototype={initialize:function(){this.token=this.getCustomerToken(),this.correlationId=this.getCorrelationId()},getCustomerToken:function(){if(this.config.current.token)return this.config.current.token;var e=this.document.getElementsByTagName("script");return e[e.length-1].getAttribute("data-token")},getCorrelationId:function(){var e;if(!this.config.current.cookie)return this.util.uuid();try{(e=this.document.cookie.replace(/(?:(?:^|.*;\s*)TrackJS\s*\=\s*([^;]*).*$)|^.*$/,"$1"))||(e=this.util.uuid(),this.document.cookie="TrackJS="+e+"; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/")}catch(t){e=this.util.uuid()}return e},report:function(){return{application:this.config.current.application,correlationId:this.correlationId,sessionId:this.config.current.sessionId,token:this.token,userId:this.config.current.userId,version:this.config.current.version}}};var o=function(e){this.config=e,this.loadedOn=(new Date).getTime(),this.originalUrl=m.getLocation(),this.referrer=m.isBrowser?t.referrer:""};o.prototype={discoverDependencies:function(){var t={TrackJS:"3.10.1"};for(var n in e.jQuery&&e.jQuery.fn&&e.jQuery.fn.jquery&&(t.jQuery=e.jQuery.fn.jquery),e.jQuery&&e.jQuery.ui&&e.jQuery.ui.version&&(t.jQueryUI=e.jQuery.ui.version),e.angular&&e.angular.version&&e.angular.version.full&&(t.angular=e.angular.version.full),e)if("_trackJs"!==n&&"_trackJS"!==n&&"_trackjs"!==n&&"webkitStorageInfo"!==n&&"webkitIndexedDB"!==n&&"top"!==n&&"parent"!==n&&"frameElement"!==n)try{if(e[n]){var i=e[n].version||e[n].Version||e[n].VERSION;"string"==typeof i&&(t[n]=i)}}catch(e){}return t.TrackJS&&t.trackJs&&delete t.trackJs,t},report:function(){return{age:(new Date).getTime()-this.loadedOn,dependencies:this.config.current.dependencies?this.discoverDependencies():{trackJs:"3.10.1"},originalUrl:this.originalUrl,referrer:this.referrer,userAgent:e.navigator.userAgent,viewportHeight:m.isBrowser?e.document.documentElement.clientHeight:0,viewportWidth:m.isBrowser?e.document.documentElement.clientWidth:0}}};var l=function(e){this.util=e,this.appender=[],this.maxLength=30};l.prototype={all:function(e){var t,n,i=[];for(n=0;n<this.appender.length;n++)(t=this.appender[n])&&t.category===e&&i.push(t.value);return i},clear:function(){this.appender.length=0},truncate:function(){this.appender.length>this.maxLength&&(this.appender=this.appender.slice(Math.max(this.appender.length-this.maxLength,0)))},add:function(e,t){var n=this.util.uuid();return this.appender.push({key:n,category:e,value:t}),this.truncate(),n},get:function(e,t){var n,i;for(i=0;i<this.appender.length;i++)if((n=this.appender[i]).category===e&&n.key===t)return n.value;return!1}};var c=function(e){var t={};return{addMetadata:function(e,n){t[e]=n},removeMetadata:function(e){delete t[e]},report:function(){var n,i=[];for(n in t)t.hasOwnProperty(n)&&i.push({key:n,value:e(t[n])});return i},store:t}},d=function(e,t){this.log=e,this.options=t,t.enabled&&this.watch()};d.prototype={isCompatible:function(t){return t=t||e,!m.has(t,"chrome.app.runtime")&&m.has(t,"addEventListener")&&m.has(t,"history.pushState")},record:function(e,t,n){this.log.add("h",{type:e,from:m.truncate(t,250),to:m.truncate(n,250),on:m.isoNow()})},report:function(){return this.log.all("h")},watch:function(){if(this.isCompatible()){var t=this,n=m.getLocationURL().relative;e.addEventListener("popstate",(function(){var e=m.getLocationURL().relative;t.record("popState",n,e),n=e}),!0),m.forEach(["pushState","replaceState"],(function(e){m.patch(history,e,(function(i){return function(){n=m.getLocationURL().relative;var a=i.apply(this,arguments),s=m.getLocationURL().relative;return t.record(e,n,s),n=s,a}}))}))}}};var u=function(e,t,n,i,a,s){this.util=e,this.log=t,this.onError=n,this.onFault=i,this.window=a,this.options=s,s.enabled&&this.initialize(a)};u.prototype={initialize:function(e){e.XMLHttpRequest&&this.util.hasFunction(e.XMLHttpRequest.prototype.open,"apply")&&this.watchNetworkObject(e.XMLHttpRequest),e.XDomainRequest&&this.util.hasFunction(e.XDomainRequest.prototype.open,"apply")&&this.watchNetworkObject(e.XDomainRequest),this.options.fetch&&m.isWrappableFunction(e.fetch)&&this.watchFetch()},escapeUrl:function(e){return(""+e).replace(/ /gi,"%20").replace(/\t/gi,"%09")},watchFetch:function(){var t=this,n=this.log,i=this.options,a=this.onError;m.patch(e,"fetch",(function(s){return function(r,o){if(o&&o.__trackjs__)return s.apply(e,arguments);var l;try{throw Error()}catch(e){l=e.stack}var c=r instanceof Request?r.url:r,d=r instanceof Request?r.method:(o||{}).method||"GET",u=(c=t.escapeUrl(c),s.apply(e,arguments));return u.__trackjs_state__=n.add("n",{type:"fetch",startedOn:m.isoNow(),method:d,url:m.truncate(c,2e3)}),u.then((function(e){var t=n.get("n",u.__trackjs_state__);if(t){m.defaults(t,{completedOn:m.isoNow(),statusCode:e.status,statusText:e.statusText});var s=e.headers.get("trackjs-correlation-id");s&&(t.requestCorrelationId=s),i.error&&400<=e.status&&((t=Error(t.statusCode+" : "+t.method+" "+t.url)).stack=l,a("ajax",t))}return e})).catch((function(e){e=e||{};var t=n.get("n",u.__trackjs_state__);throw t&&(m.defaults(t,{completedOn:m.isoNow(),statusCode:0,statusText:e.toString()}),i.error&&(a("ajax",{name:e.name,message:(e.message||"Failed")+": "+t.method+" "+t.url,stack:e.stack||l}),e.__trackjs_state__=!0)),e}))}}))},watchNetworkObject:function(e){var t=this,n=e.prototype.open,i=e.prototype.send;return e.prototype.open=function(e,i){var a=(i||"").toString();return 0>a.indexOf("localhost:0")&&(a=t.escapeUrl(a),this._trackJs={method:e,url:a}),n.apply(this,arguments)},e.prototype.send=function(){if(!this._trackJs)try{return i.apply(this,arguments)}catch(e){return void t.onError("ajax",e)}try{this._trackJs.logId=t.log.add("n",{type:"xhr",startedOn:t.util.isoNow(),method:this._trackJs.method,url:m.truncate(this._trackJs.url,2e3)}),t.listenForNetworkComplete(this)}catch(e){t.onFault(e)}return i.apply(this,arguments)},e},listenForNetworkComplete:function(e){var t=this;t.window.ProgressEvent&&e.addEventListener&&e.addEventListener("readystatechange",(function(){4===e.readyState&&t.finalizeNetworkEvent(e)}),!0),e.addEventListener?e.addEventListener("load",(function(){t.finalizeNetworkEvent(e),t.checkNetworkFault(e)}),!0):setTimeout((function(){try{var n=e.onload;e.onload=function(){t.finalizeNetworkEvent(e),t.checkNetworkFault(e),"function"==typeof n&&t.util.hasFunction(n,"apply")&&n.apply(e,arguments)};var i=e.onerror;e.onerror=function(){t.finalizeNetworkEvent(e),t.checkNetworkFault(e),"function"==typeof oldOnError&&i.apply(e,arguments)}}catch(e){t.onFault(e)}}),0)},finalizeNetworkEvent:function(e){if(e._trackJs){var t=this.log.get("n",e._trackJs.logId);t&&(t.completedOn=this.util.isoNow(),e.getAllResponseHeaders&&e.getResponseHeader&&0<=(e.getAllResponseHeaders()||"").toLowerCase().indexOf("trackjs-correlation-id")&&(t.requestCorrelationId=e.getResponseHeader("trackjs-correlation-id")),t.statusCode=1223==e.status?204:e.status,t.statusText=1223==e.status?"No Content":e.statusText)}},checkNetworkFault:function(e){if(this.options.error&&400<=e.status&&1223!=e.status){var t=e._trackJs||{};this.onError("ajax",e.status+" : "+t.method+" "+t.url)}},report:function(){return this.log.all("n")}};var p=function(t,n){this.util=t,this.config=n,this.disabled=!1,this.throttleStats={attemptCount:0,throttledCount:0,lastAttempt:(new Date).getTime()},e.JSON&&e.JSON.stringify||(this.disabled=!0)};p.prototype={errorEndpoint:function(t){var n=this.config.current,i=n.errorURL;return m.isBrowser&&!m.testCrossdomainXhr()&&-1===e.location.protocol.indexOf("https")?i=n.errorNoSSLURL:n.forwardingDomain&&(i="https://"+n.forwardingDomain+"/capture"),i+"?token="+t+"&v=3.10.1"},usageEndpoint:function(e){var t=this.config.current,n=t.usageURL;return t.forwardingDomain&&(n="https://"+t.forwardingDomain+"/usage.gif"),this.appendObjectAsQuery(e,n)},trackerFaultEndpoint:function(e){var t=(this.config||{}).current||a.prototype.defaults,n=t.faultURL;return t.forwardingDomain&&(n="https://"+t.forwardingDomain+"/fault.gif"),this.appendObjectAsQuery(e,n)},appendObjectAsQuery:function(e,t){for(var n in t+="?",e)e.hasOwnProperty(n)&&(t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n])+"&");return t},getCORSRequest:function(t,n){var i;return this.util.testCrossdomainXhr()?((i=new e.XMLHttpRequest).open(t,n),i.setRequestHeader("Content-Type","text/plain")):void 0!==e.XDomainRequest?(i=new e.XDomainRequest).open(t,n):i=null,i},sendTrackerFault:function(e){this.throttle(e)||(m.isBrowser?t.createElement("img").src=this.trackerFaultEndpoint(e):fetch(this.trackerFaultEndpoint(e),{mode:"no-cors",__trackjs__:!0}))},sendUsage:function(e){m.isBrowser?t.createElement("img").src=this.usageEndpoint(e):fetch(this.usageEndpoint(e),{mode:"no-cors",__trackjs__:!0})},sendError:function(t,i){var a=this;if(!this.disabled&&!this.throttle(t))try{if(m.isBrowser){var s=this.getCORSRequest("POST",this.errorEndpoint(i));s.onreadystatechange=function(){4!==s.readyState||m.contains([200,202],s.status)||(a.disabled=!0)},s._trackJs=n,s.send(e.JSON.stringify(t))}else if(m.isWorker){var r={method:"POST",mode:"cors",body:e.JSON.stringify(t),__trackjs__:1};fetch(this.errorEndpoint(i),r).then((function(e){e.ok||(a.disabled=!0)})).catch((function(e){a.disabled=!0}))}}catch(e){throw this.disabled=!0,e}},throttle:function(e){var t=(new Date).getTime();if(this.throttleStats.attemptCount++,this.throttleStats.lastAttempt+1e3>=t){if(this.throttleStats.lastAttempt=t,10<this.throttleStats.attemptCount)return this.throttleStats.throttledCount++,!0}else e.throttled=this.throttleStats.throttledCount,this.throttleStats.attemptCount=0,this.throttleStats.lastAttempt=t,this.throttleStats.throttledCount=0;return!1}};var m=function(){function i(e,t,s,r){return s=s||!1,r=r||0,m.forEach(t,(function(t){m.forEach(m.keys(t),(function(o){null===t[o]||t[o]===n?e[o]=t[o]:s&&10>r&&"[object Object]"===a(t[o])?(e[o]=e[o]||{},i(e[o],[t[o]],s,r+1)):e.hasOwnProperty(o)||(e[o]=t[o])}))})),e}function a(e){return Object.prototype.toString.call(e)}return{isBrowser:void 0!==e&&void 0!==e.document,isWorker:"object"==typeof self&&self.constructor&&0<=(self.constructor.name||"").indexOf("WorkerGlobalScope"),isNode:"undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node,addEventListenerSafe:function(e,t,n,i){e.addEventListener?e.addEventListener(t,n,i):e.attachEvent&&e.attachEvent("on"+t,n)},afterDocumentLoad:function(e){if(m.isWorker)m.defer(e);else{var n=!1;"complete"===t.readyState?m.defer(e):(m.addEventListenerSafe(t,"readystatechange",(function(){"complete"!==t.readyState||n||(m.defer(e),n=!0)})),setTimeout((function(){n||(m.defer(e),n=!0)}),1e4))}},bind:function(e,t){return function(){return e.apply(t,Array.prototype.slice.call(arguments))}},contains:function(e,t){return 0<=e.indexOf(t)},defaults:function(e){return i(e,Array.prototype.slice.call(arguments,1),!1)},defaultsDeep:function(e){return i(e,Array.prototype.slice.call(arguments,1),!0)},defer:function(e,t){setTimeout((function(){e.apply(t)}))},forEach:function(e,t,n){if(m.isArray(e)){if(e.forEach)return e.forEach(t,n);for(var i=0;i<e.length;)t.call(n,e[i],i,e),i++}},getLocation:function(){return e.location.toString().replace(/ /g,"%20")},getLocationURL:function(){return m.parseURL(m.getLocation())},has:function(e,t){try{for(var n=t.split("."),i=e,a=0;a<n.length;a++){if(!i[n[a]])return!1;i=i[n[a]]}return!0}catch(e){return!1}},hasFunction:function(e,t){try{return!!e[t]}catch(e){return!1}},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},isArray:function(e){return"[object Array]"===a(e)},isBoolean:function(e){return"boolean"==typeof e||m.isObject(e)&&"[object Boolean]"===a(e)},isBrowserIE:function(t){var n=(t=t||e.navigator.userAgent).match(/Trident\/([\d.]+)/);return n&&"7.0"===n[1]?11:!!(t=t.match(/MSIE ([\d.]+)/))&&parseInt(t[1],10)},isBrowserSupported:function(){var e=this.isBrowserIE();return!e||8<=e},isError:function(e){if(!m.isObject(e))return!1;var t=a(e);return"[object Error]"===t||"[object DOMException]"===t||m.isString(e.name)&&m.isString(e.message)},isElement:function(e){return m.isObject(e)&&1===e.nodeType},isFunction:function(e){return!(!e||"function"!=typeof e)},isNumber:function(e){return"number"==typeof e||m.isObject(e)&&"[object Number]"===a(e)},isObject:function(e){return!(!e||"object"!=typeof e)},isString:function(e){return"string"==typeof e||!m.isArray(e)&&m.isObject(e)&&"[object String]"===a(e)},isWrappableFunction:function(e){return this.isFunction(e)&&this.hasFunction(e,"apply")},isoNow:function(){var e=new Date;return e.toISOString?e.toISOString():e.getUTCFullYear()+"-"+this.pad(e.getUTCMonth()+1)+"-"+this.pad(e.getUTCDate())+"T"+this.pad(e.getUTCHours())+":"+this.pad(e.getUTCMinutes())+":"+this.pad(e.getUTCSeconds())+"."+String((e.getUTCMilliseconds()/1e3).toFixed(3)).slice(2,5)+"Z"},keys:function(e){if(!m.isObject(e))return[];var t,n=[];for(t in e)e.hasOwnProperty(t)&&n.push(t);return n},noop:function(){},pad:function(e){return 1===(e=String(e)).length&&(e="0"+e),e},parseURL:function(e){var t=e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);return t?((t={protocol:t[2],host:t[4],path:t[5],query:t[6],hash:t[8]}).origin=(t.protocol||"")+"://"+(t.host||""),t.relative=(t.path||"")+(t.query||"")+(t.hash||""),t.href=e,t):{}},patch:function(e,t,n){e[t]=n(e[t]||m.noop)},testCrossdomainXhr:function(){return m.isBrowser&&"withCredentials"in new XMLHttpRequest},truncate:function(e,t){if((e=""+e).length<=t)return e;var n=e.length-t;return e.substr(0,t)+"...{"+n+"}"},tryGet:function(e,t){try{return e[t]}catch(e){}},uuid:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},wrapError:function(e){var t=e||Object.prototype.toString.call(e);if(t&&t.innerError)return e;var n=Error("TrackJS Caught: "+(t.message||t));return n.description="TrackJS Caught: "+t.description,n.file=t.file,n.line=t.line||t.lineNumber,n.column=t.column||t.columnNumber,n.stack=t.stack,n.innerError=e,n}}}(),h=function(e,t,n,i,a,s){this.util=e,this.log=t,this.onError=n,this.onFault=i,this.options=s,this.document=a,e.isBrowser&&s.enabled&&this.initialize(a)};h.prototype={initialize:function(e){var t=this.util.bind(this.onDocumentClicked,this),n=this.util.bind(this.onInputChanged,this);e.addEventListener?(e.addEventListener("click",t,!0),e.addEventListener("blur",n,!0)):e.attachEvent&&(e.attachEvent("onclick",t),e.attachEvent("onfocusout",n))},onDocumentClicked:function(e){try{var t=this.getElementFromEvent(e);t&&t.tagName&&(this.isDescribedElement(t,"a")||this.isDescribedElement(t,"button")||this.isDescribedElement(t,"input",["button","submit"])?this.writeVisitorEvent(t,"click"):this.isDescribedElement(t,"input",["checkbox","radio"])&&this.writeVisitorEvent(t,"input",t.value,t.checked))}catch(e){this.onFault(e)}},onInputChanged:function(e){try{var t=this.getElementFromEvent(e);t&&t.tagName&&(this.isDescribedElement(t,"textarea")?this.writeVisitorEvent(t,"input",t.value):this.isDescribedElement(t,"select")&&t.options&&t.options.length?this.onSelectInputChanged(t):this.isDescribedElement(t,"input")&&!this.isDescribedElement(t,"input",["button","submit","hidden","checkbox","radio"])&&this.writeVisitorEvent(t,"input",t.value))}catch(e){this.onFault(e)}},onSelectInputChanged:function(e){if(e.multiple)for(var t=0;t<e.options.length;t++)e.options[t].selected&&this.writeVisitorEvent(e,"input",e.options[t].value);else 0<=e.selectedIndex&&e.options[e.selectedIndex]&&this.writeVisitorEvent(e,"input",e.options[e.selectedIndex].value)},writeVisitorEvent:function(e,t,i,a){"password"===this.getElementType(e)&&(i=n);var s=this.getElementAttributes(e);e.innerText&&(s.__trackjs_element_text=this.util.truncate(e.innerText,500)),this.log.add("v",{timestamp:this.util.isoNow(),action:t,element:{tag:e.tagName.toLowerCase(),attributes:s,value:this.getMetaValue(i,a)}})},getElementFromEvent:function(e){return e.target||t.elementFromPoint(e.clientX,e.clientY)},isDescribedElement:function(e,t,n){if(e.tagName.toLowerCase()!==t.toLowerCase())return!1;if(!n)return!0;for(e=this.getElementType(e),t=0;t<n.length;t++)if(n[t]===e)return!0;return!1},getElementType:function(e){return(e.getAttribute("type")||"").toLowerCase()},getElementAttributes:function(e){for(var t={},n=Math.min(e.attributes.length,10),i=0;i<n;i++){var a=e.attributes[i];m.contains(["data-value","value"],a.name.toLowerCase())||(t[a.name]=m.truncate(a.value,100))}return t},getMetaValue:function(e,t){return e===n?n:{length:e.length,pattern:this.matchInputPattern(e),checked:t}},matchInputPattern:function(e){return""===e?"empty":/^[a-z0-9!#$%&'*+=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/.test(e)?"email":/^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-]\d{4}$/.test(e)||/^(\d{4}[\/\-](0?[1-9]|1[012])[\/\-]0?[1-9]|[12][0-9]|3[01])$/.test(e)?"date":/^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/.test(e)?"usphone":/^\s*$/.test(e)?"whitespace":/^\d*$/.test(e)?"numeric":/^[a-zA-Z]*$/.test(e)?"alpha":/^[a-zA-Z0-9]*$/.test(e)?"alphanumeric":"characters"},report:function(){return this.log.all("v")}};var g=function(e,t,n,i,a){this.onError=e,this.onFault=t,this.serialize=n,a.enabled&&this.watchWindowErrors(i),a.promise&&this.watchPromiseErrors(i)};g.prototype={watchPromiseErrors:function(e){var t=this;e.addEventListener?e.addEventListener("unhandledrejection",(function(e){try{var i=(e=e||{}).detail?m.tryGet(e.detail,"reason"):m.tryGet(e,"reason");if(i!==n&&null!==i&&!i.__trackjs_state__){if(!m.isError(i))try{throw Error(t.serialize(i))}catch(e){i=e}t.onError("promise",i)}}catch(e){t.onFault(e)}})):m.patch(e,"onunhandledrejection",(function(e){return function(n){t.onError("promise",n),e.apply(this,arguments)}}))},watchWindowErrors:function(e){var t=this;m.patch(e,"onerror",(function(e){return function(n,i,a,s,r){try{if(m.isError(r))return t.onError("window",r),void e.apply(this,arguments);var o={message:(r=r||{}).message||t.serialize(n),name:r.name||"Error",line:r.line||parseInt(a,10)||null,column:r.column||parseInt(s,10)||null,stack:r.stack||null};"[object Event]"!==Object.prototype.toString.call(n)||i?o.file=r.file||t.serialize(i):o.file=(n.target||{}).src,t.onError("window",o)}catch(e){t.onFault(e)}e.apply(this,arguments)}}))}};var f,w,y=function(){this.hasInstalled=!1,this.hasEnabled=!0,this.window=e,this.document=t,this.util=m,this.install=m.bind(this.install,this),this.onError=m.bind(this.onError,this),this.onFault=m.bind(this.onFault,this),this.serialize=m.bind(this.serialize,this),this.log=new l(m),this.metadata=new c(this.serialize);var n=e&&(e._trackJs||e._trackJS||e._trackjs);n&&this.install(n)};return y.prototype={install:function(e){try{if(m.isNode)return this.warn("monitoring disabled in node"),!1;if(!m.has(e,"token"))return this.warn("missing token"),!1;if(this.hasInstalled)return this.warn("already installed"),!1;if(this.config=new a(e),this.transmitter=new p(this.util,this.config),this.environment=new o(this.config),this.customer=new r(this.config,this.util,this.log,this.window,this.document),!this.config.current.enabled)return this.hasEnabled=!1;if(this.windowConsoleWatcher=new s(this.util,this.log,this.onError,this.onFault,this.serialize,this.window,this.config.current.console),!this.util.isBrowserSupported())return!1;this.callbackWatcher=new i(this.config.current.callback,this.onError,this.onFault),this.visitorWatcher=new h(this.util,this.log,this.onError,this.onFault,this.document,this.config.current.visitor),this.navigationWatcher=new d(this.log,this.config.current.navigation),this.networkWatcher=new u(this.util,this.log,this.onError,this.onFault,this.window,this.config.current.network),this.windowWatcher=new g(this.onError,this.onFault,this.serialize,this.window,this.config.current.window);var t=this;return m.afterDocumentLoad((function(){t.transmitter.sendUsage({token:t.customer.token,correlationId:t.customer.correlationId,application:t.config.current.application,x:t.util.uuid()})})),this.hasInstalled=!0}catch(e){return this.onFault(e),!1}},pub:function(){var e=this,t={addMetadata:this.metadata.addMetadata,attempt:function(t,n){try{var i=Array.prototype.slice.call(arguments,2);return t.apply(n||this,i)}catch(t){throw e.onError("catch",t),m.wrapError(t)}},configure:function(t){return!e.hasInstalled&&e.hasEnabled?(e.warn("agent must be installed"),!1):e.config.setCurrent(t)},hash:"fb090f9249a14e8440f317f57bd82ec8d6ea32a4",isInstalled:function(){return e.hasInstalled},install:this.install,removeMetadata:this.metadata.removeMetadata,track:function(t){if(!e.hasInstalled&&e.hasEnabled)e.warn("agent must be installed");else{var n=m.isError(t)?t.message:e.serialize(t);if(!(t=t||{}).stack)try{throw Error(n)}catch(e){t=e}e.onError("direct",t)}},version:"3.10.1",watch:function(t,n){return function(){try{var i=Array.prototype.slice.call(arguments,0);return t.apply(n||this,i)}catch(t){throw e.onError("catch",t),m.wrapError(t)}}},watchAll:function(e){var t,n=Array.prototype.slice.call(arguments,1);for(t in e)"function"!=typeof e[t]||m.contains(n,t)||(e[t]=this.watch(e[t],e));return e}};return new s(m,e.log,e.onError,e.onFault,e.serialize,t,a.prototype.defaults.console),t},onError:(w=!1,function(t,n,i){if(this.hasInstalled&&this.hasEnabled&&m.isBrowserSupported())try{if(i=i||{bindStack:null,bindTime:null,force:!1},n&&m.isError(n)||(n={name:"Error",message:this.serialize(n,i.force)}),-1===n.message.indexOf("TrackJS Caught"))if(w&&-1!==n.message.indexOf("Script error"))w=!1;else{var a=m.defaultsDeep({},{agentPlatform:m.isBrowser?"browser":"worker",bindStack:i.bindStack,bindTime:i.bindTime,column:n.column||n.columnNumber,console:this.windowConsoleWatcher.report(),customer:this.customer.report(),entry:t,environment:this.environment.report(),file:n.file||n.fileName,line:n.line||n.lineNumber,message:n.message,metadata:this.metadata.report(),nav:this.navigationWatcher.report(),network:this.networkWatcher.report(),url:(e.location||"").toString(),stack:n.stack,timestamp:this.util.isoNow(),visitor:this.visitorWatcher.report(),version:"3.10.1"});if(!i.force)try{if(!this.config.current.onError(a,n))return}catch(e){a.console.push({timestamp:this.util.isoNow(),severity:"error",message:e.message});var s=this;setTimeout((function(){s.onError("catch",e,{force:!0})}),0)}if(this.config.current.dedupe){var r=(a.message+a.stack).substr(0,1e4);if(r===f)return;f=r}!function(){function e(){var e=0;return m.forEach(a.console,(function(t){e+=(t.message||"").length})),8e4<=e}for(var t=0;e()&&t<a.console.length;)a.console[t].message=m.truncate(a.console[t].message,1e3),t++}(),this.log.clear(),setTimeout((function(){w=!1})),w=!0,this.transmitter.sendError(a,this.customer.token)}}catch(e){this.onFault(e)}}),onFault:function(e){var t=this.transmitter||new p;e=e||{},e={token:(this.customer||{}).token,file:e.file||e.fileName,msg:e.message||"unknown",stack:(e.stack||"unknown").substr(0,1e3),url:this.window.location,v:"3.10.1",h:"fb090f9249a14e8440f317f57bd82ec8d6ea32a4",x:this.util.uuid()},t.sendTrackerFault(e)},serialize:function(e,t){if(this.hasInstalled&&this.config.current.serialize&&!t)try{return this.config.current.serialize(e)}catch(e){this.onError("catch",e,{force:!0})}return a.prototype.defaults.serialize(e)},warn:function(t){m.has(e,"console.warn")&&e.console.warn("TrackJS: "+t)}},(new y).pub()}("undefined"==typeof self?void 0:self,"undefined"==typeof document?void 0:document),window.TrackJS&&TrackJS.install({token:"16c187efb05541c6b81bee305e0727d1",application:"offerupbot"})}catch(e){console.error(e),(0,i.Z)({error:"Failed to install trackjs",details:e.toString()})}}},642:(e,t,n)=>{"use strict";function i(){document.body.insertAdjacentHTML("afterbegin",'\n  <div id="ta" style="position: fixed;z-index: 900000;background-color: white;border: solid; right: 0px;width: 370px;\n                  height: 600px; \n                  padding-right: unset;\n                  padding-top: unset;\n                  height: 100%;\n                  top: 0;">\n                <div class="hopla-button" style="display: none;">\n                  <iframe width="345px" height="1000px" data-onlogin="login_callback" title="hopla:login_button HOPLA Plugin" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" allow="encrypted-media" src="https://login.hopla.to/button/button.html" style="border: none; visibility: visible; width: 345px; height: 61px;" class=""></iframe>\n                </div>\n\n                \x3c!-- <div id="taheader" class="menu" style="\n                  display: none;\n                  justify-content: space-around;\n                  font-size: x-large;\n                  padding-bottom: 9px;\n                  padding-top: 9px;\n                  ">\n                    <a id="viewer" href="#" style="\n                    color: black;\n                    text-decoration: underline;\n                    ">Viewer</a>\n                    <a id="offerbot" href="#" style="\n                    color: black;\n                    text-decoration: none;\n                    ">OfferBot</a>\n                </div> --\x3e\n                \x3c!-- MDL Tab Container --\x3e\n                <div id="taheader" class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect" style="height: 100%;">\n                  <div id="info-header" style="display: none; color: white;background: rgb(63,81,181);line-height: 26px;padding: 5px 0px;width: 100%;text-align: center; justify-content: space-around;">\n                    <span id="info-subscription"></span>\n                    <span id="info-website"></span>\n                    <span><a id="info-logout" href="#" onclick="hopla_logout()" style="text-decoration: none;color: white;-webkit-highlight: none;">Logout</a></span>\n                  </div>\n                  \x3c!-- Tab Bars --\x3e\n                  <div id="menu" class="mdl-tabs__tab-bar" style="display: none;">\n                      <a href="#page2" class="mdl-tabs__tab is-active" style="width: 100%;">Automate</a>\n                      <a href="#page3" class="mdl-tabs__tab" style="width: 100%;">Content</a>\n                  </div>\n\n                  \x3c!-- <div id="page1" class="mdl-tabs__panel is-active" style="height: 100%;">\n                    <iframe id="taframe" src="https://sell.phones.trade/?model=12pro&amp;storage=128gb&amp;network=unlocked&amp;condition=usedlikenew&a=1" style="\n                      height: 100%;\n                    "></iframe>\n                    <button id="reportbug2" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored" style="position: absolute;\n                      bottom: 0px;\n                      left: 50%;\n                      transform: translate(-50%);\n                      z-index: 1;\n                      width: 100%;\n                      display: none;\n                      height: 44px;">\n                        Report a\n                        <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="bug" class="svg-inline--fa fa-bug fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" style="width: 22px;padding-left: 3px;margin-bottom: 3px;"><path fill="currentColor" d="M511.988 288.9c-.478 17.43-15.217 31.1-32.653 31.1H424v16c0 21.864-4.882 42.584-13.6 61.145l60.228 60.228c12.496 12.497 12.496 32.758 0 45.255-12.498 12.497-32.759 12.496-45.256 0l-54.736-54.736C345.886 467.965 314.351 480 280 480V236c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v244c-34.351 0-65.886-12.035-90.636-32.108l-54.736 54.736c-12.498 12.497-32.759 12.496-45.256 0-12.496-12.497-12.496-32.758 0-45.255l60.228-60.228C92.882 378.584 88 357.864 88 336v-16H32.666C15.23 320 .491 306.33.013 288.9-.484 270.816 14.028 256 32 256h56v-58.745l-46.628-46.628c-12.496-12.497-12.496-32.758 0-45.255 12.498-12.497 32.758-12.497 45.256 0L141.255 160h229.489l54.627-54.627c12.498-12.497 32.758-12.497 45.256 0 12.496 12.497 12.496 32.758 0 45.255L424 197.255V256h56c17.972 0 32.484 14.816 31.988 32.9zM257 0c-61.856 0-112 50.144-112 112h224C369 50.144 318.856 0 257 0z"></path></svg>\n                    </button>\n                  </div> --\x3e\n\n                  <div id="page2" class="mdl-tabs__panel is-active" style="position: relative; height: calc(100% - 83px); display: none;">\n                    <ul class="demo-list-control mdl-list">\n                      <li class="mdl-list__item" style="height: 100px;">\n                          <span class="mdl-list__item-primary-content">\n                            <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                              <textarea class="mdl-textfield__input" type="text" rows= "3" id="keywords" ></textarea>\n                              <label class="mdl-textfield__label" for="keywords">Keywords</label>\n                            </div>\n                          </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows= "3" id="zipcodes" ></textarea>\n                            <label class="mdl-textfield__label" for="zipcodes">Zipcodes</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows= "3" id="skipwords" ></textarea>\n                            <label class="mdl-textfield__label" for="skipwords">Skip Words</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Listing Price Min\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="100" id="listing_min_price" placeholder="0" style="text-align: unset;">\n                            <label class="mdl-textfield__label" for="listing_min_price"></label>\n                          </span>\n                        </span>\n                        <span class="mdl-list__item-primary-content" style="margin-left: 20px;">\n                          Max\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="1000" id="listing_max_price" placeholder="0">\n                            <label class="mdl-textfield__label" for="listing_max_price"></label>\n                          </span>\n                        </span>\n                      </li>\n                      \x3c!-- <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Owner Listings Min\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="1" id="owner_min_lists" placeholder="0" style="text-align: unset;">\n                            <label class="mdl-textfield__label" for="owner_min_lists"></label>\n                          </span>\n                        </span>\n                        <span class="mdl-list__item-primary-content" style="margin-left: 20px;">\n                          Max\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="1" id="owner_max_lists" placeholder="0">\n                            <label class="mdl-textfield__label" for="owner_max_lists"></label>\n                          </span>\n                        </span>\n                      </li> --\x3e\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Bot Mode\n                        </span>\n                        <div>\n                          <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="mode_single">\n                            <input type="radio" id="mode_single" class="mdl-radio__button" name="bot_mode" value="single" checked disabled>\n                            <span class="mdl-radio__label">Single</span>\n                          </label>\n                          <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="mode_multi">\n                            <input type="radio" id="mode_multi" class="mdl-radio__button" name="bot_mode" value="multi" disabled>\n                            <span class="mdl-radio__label">Multi</span>\n                          </label>\n                        </div>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Listing Max Age\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" id="listing_max_age" value=90 placeholder="0">\n                            <label class="mdl-textfield__label" for="listing_max_age"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Listing Price Delta\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="text" id="listing_price_delta" placeholder="0">\n                            <label class="mdl-textfield__label" for="listing_price_delta"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Custom Price Delta\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="text" id="custom_price_delta" placeholder="0">\n                            <label class="mdl-textfield__label" for="custom_price_delta"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Price Round Up/Down\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" id="roundupdown" placeholder="0">\n                            <label class="mdl-textfield__label" for="roundupdown"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Continue After Storage\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-continue_after_storage">\n                            <input type="checkbox" id="switch-continue_after_storage" class="mdl-switch__input" />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Continue After Network\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-continue_after_network">\n                            <input type="checkbox" id="switch-continue_after_network" class="mdl-switch__input" />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Skip Shipping-Enabled\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-skipshippingenabled">\n                            <input type="checkbox" id="switch-skipshippingenabled" class="mdl-switch__input" checked />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px; display: none;">\n                        <span class="mdl-list__item-primary-content">\n                          Send Partner Messages\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-sendpartnermessages">\n                            <input type="checkbox" id="switch-sendpartnermessages" class="mdl-switch__input" />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="display: none; padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Streak\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="5" id="streak" placeholder="0" style="text-align: unset;">\n                            <label class="mdl-textfield__label" for="streak"></label>\n                          </span>\n                        </span>\n                        <span class="mdl-list__item-primary-content">\n                          Then Timeout\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="15" id="streaktimeout" placeholder="0">\n                            <label class="mdl-textfield__label" for="streaktimeout"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Max Concurrent Conversations\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="50" id="maxconcurrentconversations" placeholder="0">\n                            <label class="mdl-textfield__label" for="maxconcurrentconversations"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Delete After Sending\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-deleteaftersend">\n                            <input type="checkbox" id="switch-deleteaftersend" class="mdl-switch__input" checked />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 81px;">\n                        <div class="buttons_container">\n                          <button id="purge_listings" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent bgred">\n                            Purge Listings\n                          </button>\n                          <button id="purge_owners" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent bgred">\n                            Purge Owners\n                          </button>\n                        </div>\n                      </li>\n                    </ul>\n                    <div id="status" style="color: white;background: black;line-height: 26px;padding: 5px 0px;position: absolute;bottom: 137px;width: 100%;text-align: center;min-height: 61px;align-items: center;display: flex;justify-content: center;">\n                        <span id="statustext" style="\n                    "></span></div>\n                    \n\n\n                    <div id="stats" style="color: white;background: rgb(63,81,181);line-height: 26px;padding: 5px 0px;position: absolute;bottom: 49px;width: 100%;text-align: center;">\n                    <span>Today\'s Stats </span>\n                    <div style="\n                      display: flex;\n                      justify-content: space-evenly;\n                    ">\n                      <span><span id="stat_scraped">0</span> scraped </span>\n                      <span><span id="stat_new_listings">0</span> new </span>\n                      <span><span id="stat_single_listings">0</span> single</span>\n                      <span><span id="stat_multi_listings">0</span> multi</span>\n                    </div>\n                    <div style="\n                      display: flex;\n                      justify-content: space-evenly;\n                    ">\n                      <span><span id="stat_offers">0</span> offers</span>\n                      <span><span id="stat_runs">0</span> runs </span>\n                      <span><span id="stat_streaks">0</span> streak</span>\n                      <span><span id="stat_ko">0</span> KO</span>\n                    </div>\n                  </div>\n\n\n\n                    <div class="footer" style="\n                      justify-content: space-around;\n                      display: flex;\n                      position: absolute;\n                      bottom: 5px;\n                      width: 100%; align-items: center;\n                      border-top: solid 1px;\n                      border-top-color: #e0e0e0;\n                      height: 44px;\n                      padding-right: 10px;\n                      ">\n                      <span>Run From</span>\n                      <input id="runfrom" type="time" style="width: unset;font-size: 16px;font-family: Lato,&quot;Helvetica Neue&quot;,Arial,sans-serif;font-weight: 400;" class="mdl-textfield__input" value="09:00">\n                      <span>Until</span>\n                      <input id="rununtil" type="time" style="width: unset;font-size: 16px;font-family: Lato,&quot;Helvetica Neue&quot;,Arial,sans-serif;font-weight: 400;" class="mdl-textfield__input" value="18:00">\n                      <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-rununtil">\n                        <input type="checkbox" id="switch-rununtil" class="mdl-switch__input">\n                        <span class="mdl-switch__label"></span>\n                      </label>\n                    </div>\n                  </div>\n\n                  <div id="page3" class="mdl-tabs__panel" style="\n                    height: calc(100% - 83px);\n                    overflow: hidden auto;\n                    position: relative;\n                    display: none;">\n                    <div id="page2loading" class="mdl-spinner mdl-js-spinner is-active" style="position: absolute;left: 50%;top: 30%; display:none;"></div>\n                    <ul class="demo-list-control mdl-list">\n                      <li class="mdl-list__item" style="height: 100px;">  \n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="openermessage" ></textarea>\n                            <label class="mdl-textfield__label" for="openermessage">Opener Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_1" ></textarea>\n                            <label class="mdl-textfield__label" for="question_1">Question 1</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_2" ></textarea>\n                            <label class="mdl-textfield__label" for="question_2">Question 2</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="gbmessage" ></textarea>\n                            <label class="mdl-textfield__label" for="gbmessage">GB Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="networkmessage" ></textarea>\n                            <label class="mdl-textfield__label" for="networkmessage">Network Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_3" ></textarea>\n                            <label class="mdl-textfield__label" for="question_3">Question 3</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_4" ></textarea>\n                            <label class="mdl-textfield__label" for="question_4">Question 4</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="lowball_message" ></textarea>\n                            <label class="mdl-textfield__label" for="lowball_message">Lowball</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="offermessage" ></textarea>\n                            <label class="mdl-textfield__label" for="offermessage">Offer Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="meetupmessage" ></textarea>\n                            <label class="mdl-textfield__label" for="meetupmessage">Meetup Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 60px; display: none;">\n                        <span class="mdl-list__item-primary-content">\n                          <span class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <input class="mdl-textfield__input" type="text" id="partnermessage">\n                            <label class="mdl-textfield__label" for="partnermessage">Partner Message</label>\n                          </span>\n                        </span>\n                      </li>\n                    </ul>\n                    <div class="variables" style="padding-bottom: 10px; position: absolute;\n                    bottom: 55px;\n                    padding: 0px 16px;">\n                        <span style="display: block;">Available Variables:</span>\n                        <span class="variable">[name]</span>\n                        <span class="variable">[model]</span>\n                        <span class="variable">[network]</span>\n                        <span class="variable">[memory]</span>\n                        <span class="variable">[price]</span>\n                        <span class="variable">[listing_price]</span>\n                        <span class="variable">[deductions]</span>\n                        <span class="variable">[condition]</span>\n                        \x3c!-- <span class="variable">[quote_link]</span>\n                        <span class="variable">[pickup_link]</span> \n                        <span class="variable">[partner_link]</span> \n                        <span class="variable">[website]</span> --\x3e\n                    </div>\n                    <div class="template-actions" style="\n                      justify-content: space-between;\n                      display: flex;\n                      position: absolute;\n                      bottom: 0px;\n                      width: 100%;\n                    ">\n                      <button id="test_template" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"\n                        style="width: 50%;\n                        margin-right: 1px;\n                        height: 44px;">\n                        Test\n                      </button>\n                      <button id="restore_defaults" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"\n                        style="width: 50%;\n                        height: 44px;">\n                        Restore Defaults\n                      </button>\n                    </div>\n                  </div>\n                  \n                </div>\n\n                \n                <dialog id="dialog-bug" class="mdl-dialog">\n                  <h4 class="mdl-dialog__title">Bug Report</h4>\n                  <div class="mdl-dialog__content">\n                    <div id="buglistingdetails">\n                    </div>\n                    <div>\n                        <br>\n                        <p>Based on the info above. The bot determined that the phone variant is:</p>\n                        <div id="bugvariantdetails">\n                        </div>\n                      </div>\n                    <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                      <textarea class="mdl-textfield__input" type="text" rows= "3" id="bugcomment" ></textarea>\n                      <label class="mdl-textfield__label" for="bugcomment">Bug Details</label>\n                    </div>\n                  </div>\n                  <div class="mdl-dialog__actions">\n                    <button type="button" class="mdl-button sendbug">Submit</button>\n                    <button type="button" class="mdl-button close">Close</button>\n                  </div>\n                </dialog>\n              </div>')}n.r(t),n.d(t,{insertUI:()=>i})},9632:(e,t,n)=>{"use strict";n.r(t),n.d(t,{isShippingEnabled:()=>a});var i=n(4347);async function a(e){const t=await(0,i.fetchListingDetail)(e);return t&&t.fulfillmentDetails&&t.fulfillmentDetails.shippingEnabled}},5038:(e,t,n)=>{"use strict";n.r(t),n.d(t,{loadInputs:()=>s});var i=n(7426),a=n(3624);function s(){let e=!1;for(const t in localStorage)if(t.startsWith("input_")){const n=t.replace("input_",""),a=localStorage.getItem(t),s=document.getElementById(n);s&&("checkbox"===s.type?"switch-rununtil"===n?((0,i.o)(!0),e=!0):s.checked="true"===a:s.value=a)}else if(t.startsWith("radio_")){const e=t.replace("radio_",""),n=localStorage.getItem(t);let i=document.getElementsByName(e);if(i&&(i=i[0],"radio"===i.type)){const e=document.getElementById(n);e&&(0,a.B)(e).then((()=>{e.parentNode.MaterialRadio.check()}))}}e||(0,i.o)(!0)}},4219:(e,t,n)=>{"use strict";n.r(t),n.d(t,{loadStats:()=>a});var i=n(9171);function a(){const e=new Date,t=`${e.getFullYear()}${e.getMonth()+1}${e.getDate()}`;let n=localStorage.getItem(`stats_${t}`);if(n){n=JSON.parse(n);const e=["offers","partners","runs","streaks","ko","new_listings","single_listings","multi_listings"],t={};["offers","partners","runs","streaks","ko","scraped","new_listings","single_listings","multi_listings"].forEach((e=>{e in n&&(document.getElementById(`stat_${e}`).textContent=n[e])})),e.forEach((e=>{e in n&&("ko"===e?t.KO=n[e]:t[e]=n[e])})),(0,i._)(t)}}},1992:(e,t,n)=>{"use strict";n.r(t),n.d(t,{logout:()=>a});var i=n(147);function a(){HOPLA_login.notyou((function(e){(0,i.login_callback)(e)}))}},147:(e,t,n)=>{"use strict";n.r(t),n.d(t,{onSessionReady:()=>r,login_callback:()=>o});var i=n(3539),a=n(8414),s=n(3624);function r(e){if(showLoading(!1),e.isAnonymous){const e=document.querySelector(".hopla-button");e&&(e.style.display="block")}else o(e)}function o(e){let t=document.querySelector(".hopla-button");t&&(t.style.display="none"),t=document.querySelector("#ta #menu"),t&&(t.style.display="flex"),t=document.querySelector("#ta #page2"),t&&(t.style.display=null),t=document.querySelector("#ta #page3"),t&&(t.style.display=null),componentHandler.upgradeDom();const n=e&&e.uid;n&&async function(e){const t=await fetch(`https://us-central1-trade-apples.cloudfunctions.net/partners?isTeammember=1&uid=${e}`).then((e=>e.json()));let n=t&&t.isTeamMember&&t.isTeamMember.partnerId;return n||(n=e),n}(n).then((t=>{window.taPartnerId=t,window.taEmail=e&&e.email,(0,a.getPartnerDetails)(t).then((async e=>{if(e.error)return console.error(e.error),void l(e,!1);window.taUID=n,window.var_domain=e&&e.partner_details&&e.partner_details.website&&e.partner_details.website.domain,window.var_domain||(window.var_domain=""),window.taEmail||(window.taEmail=e&&e.partner_details&&e.partner_details.email),window.TrackJS&&window.taEmail&&window.TrackJS&&window.TrackJS.configure({userId:window.taEmail}),l(e,n!==t)}))})),document.getElementById("taheader").style.display="block",document.getElementById("taheader").style.height="100%"}function l(e,t){(0,i.CONSOLE_MESSAGE)("custom","");let n=function(e){return e&&e.subscription_details&&e.subscription_details.business&&"active"===e.subscription_details.business.status?"Business":e&&e.subscription_details&&e.subscription_details.trader&&"active"===e.subscription_details.trader.status?"Trader":""}(e);!n&&t&&(n="Team Member");const a=document.querySelector("#info-header");a&&(a.style.display="flex");const r='<a id="info-logout" href="#" onclick="hopla_logout()" style="color: white;-webkit-highlight: none;">Logout</a>';if(!n)return window.isAllowed=!1,void(a&&(a.innerHTML=`<span> <a target="_blank" href="https://phones.trade/join-us/">Subscribe here</a> to use this bot or ${r}</span>`));window.isAllowed=!0,a&&(a.innerHTML=`<span id="info-subscription"></span>\n    <span id="info-website"></span>\n    <span>${r}</span>`);let o=document.querySelector("#info-subscription");if(o&&(o.textContent=n),o=document.querySelector("#info-website"),o&&(o.textContent=window.var_domain),"Business"===n){let e=document.getElementById("mode_multi");e&&(e.disabled=!1,(0,s.B)(e).then((e=>{e.parentNode.MaterialRadio.checkDisabled()}))),e=document.getElementById("mode_single"),e&&(e.disabled=!1,(0,s.B)(e).then((e=>{e.parentNode.MaterialRadio.checkDisabled()})))}}},9107:(e,t,n)=>{"use strict";n.d(t,{e:()=>s});var i=n(9178);function a(e,t){return e&&t?t.includes("%")?(t=t.replace(/[^\d\.-]/g,""),e+e*((t=Number(t))/100)):(t=t.replace(/[^\d\.-]/g,""),e+(t=Number(t))):e}function s(e,t,n,s){let r=e,o=t&&t.model;o||(o="");let l=t&&t.network;l?l.toLowerCase().startsWith("locked")&&(l="Locked"):l="";let c=t&&t.storage;c||(c="");let d=t&&t.price;d||(d="");let u="";if(t&&t.condition)try{u=t.condition.split("-")[1],u=u.trim(),u=(0,i.M)(u)}catch(e){u=t.condition.split("-")[0],u=u.trim(),u=(0,i.M)(u)}let p="no deductions";t&&t.deductions&&t.deductions.length&&(p=t.deductions.join(", "));const m=document.querySelector("#custom_price_delta").value||0,h=document.querySelector("#listing_price_delta").value||0;r=r.replace(/\[model\]/g,o),r=r.replace(/\[network\]/g,l),r=r.replace(/\[memory\]/g,c),r=r.replace(/\[name\]/g,n.split(" ")[0]);let g,f=r.match(/\[price\s?-\s?(\d+)\]/);if(d&&f&&f.length>1){const e=parseFloat(f[1]);let t=d-parseFloat(e);t<0&&(t=0),r=r.replace(/\[price\s?-\s?\d+\]/,`$${t}`)}else if(d&&r.match(/\[price\]/)){let e=d;m&&(e=a(d,m));let t=document.getElementById("roundupdown").value;t&&(t=parseFloat(t)),e=function(e,t){if(!t)return e;const n=t>0?Math.ceil(e/Math.abs(t)):Math.floor(e/Math.abs(t));return Math.abs(n*t)}(e,t),e<0&&(e=0),r=r.replace(/\[price\]/,`$${e}`)}else r=r.replace(/\[price\s?-\s?\d+\]/,"");if(f=r.match(/\[listing_price\s?-\s?(\d+)\]/),void 0!==s&&f&&f.length>1){const e=parseFloat(f[1]);let t=s-parseFloat(e);t<0&&(t=0),r=r.replace(/\[listing_price\s?-\s?\d+\]/,`$${t}`)}else if(void 0!==s&&r.match(/\[listing_price\]/)){let e=s;h&&(e=a(e,h)),e<0&&(e=0),r=r.replace(/\[listing_price\]/,`$${e}`)}else r=r.replace(/\[listing_price\s?-\s?\d+\]/,"your price");return window.partner_link?g=window.partner_link:t.partner_link&&(window.partner_link=t.partner_link,g=t.partner_link),r=r.replace(/\[condition\]/g,u),r=r.replace(/\[deductions\]/g,p),r}},7850:(e,t,n)=>{"use strict";function i(e){if(e.target.id&&"number"===e.target.type){let t=e.target.value;"0"===t||t.startsWith("-")||(e.target.value=`-${t}`)}}n.r(t),n.d(t,{prefix:()=>i})},9869:(e,t,n)=>{"use strict";n.r(t),n.d(t,{processKeyword:()=>k});var i=n(9088),a=n(8498),s=n(1203),r=n(4347),o=n(3539),l=n(6725),c=n(6901),d=n(1060);n(9105);var u=n(7367);async function p(e,t,n,i){(0,o.CONSOLE_MESSAGE)("custom",`Checking qualifying listings of ${n} (${t}).`);const a=await(0,l.skips)().getOtherIphoneListings(e,t,n),s=a&&a.length;if(s){const t="single"===document.querySelector("[name=bot_mode]:checked").value,a=t?"Single":"Multi";if(console.log(`Mode ${a}. ${n} has ${s} qualifying listings. All listings will be added to ${a} Skip List`),s<=2?(0,u.stats)().addSingleListings():(0,u.stats)().addMultiListings(),t){if(s<=2)return!0}else if(s>=3)return!0;return(0,o.CONSOLE_MESSAGE)("has_listings",{owner_lists:s,listing_id:e,owner_name:n,listing_name:i}),!1}}function m(e,t){return Math.floor(Math.random()*(t-e+1)+e)}var h=n(2320),g=n(5826);function f(e,t){let n=!1;return e.includes("[model]")&&!t.model&&(console.log("Failed. No model",e,t),n=!0),e.includes("[network]")&&!t.network&&(console.log("Failed. Network",e,t),n=!0),e.includes("[memory]")&&!t.storage&&(console.log("Failed. No memory",e,t),n=!0),n}var w=n(9107),y=n(2617),_=n(2287),b=n(4246),v=n(8329);async function S(e){let t=!1;if(!window.isRun)return void console.log("bot stopped.");const n=e.id,i=e.title,r=e.owner.id,c=e.owner.profile.name,d=await(0,g.getVariant)(n);if(console.log("variant",d),d.skip)return void await(0,l.skips)().saveToSkipListing(n);const p=await(0,h.getQuote)(d,n);console.log("variantQuote",p);let S,x="",k="",I=(0,v.z)().openermessage;if(I&&!f(I,d)){I=(0,w.e)(I,p,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,S||(S=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*m(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,b.sleep)(l),x&&(x+="\n"),x+=I,k&&(k+=", "),k+="openermessage"}if(I=(0,v.z)().question_1,I&&!f(I,d)){I=(0,w.e)(I,p,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,S||(S=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*m(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,b.sleep)(l),x&&(x+="\n"),x+=I,k&&(k+=", "),k+="question_1"}if(I=(0,v.z)().question_2,I&&!f(I,d)){I=(0,w.e)(I,p,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,S||(S=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*m(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,b.sleep)(l),x&&(x+="\n"),x+=I,k&&(k+=", "),k+="question_2"}let E,L=!1,M=!1,C=!1;if(!d.storage){L=!0,I=(0,v.z)().gbMessage,I=(0,w.e)(I,p,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,S||(S=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*m(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,b.sleep)(l),x&&(x+="\n"),x+=I,k&&(k+=", "),k+="gbMessage"}if(L&&!document.querySelector("#switch-continue_after_storage").checked&&(C=!0),!C&&!d.network){M=!0,I=(0,v.z)().networkMessage,I=(0,w.e)(I,p,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,S||(S=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*m(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,b.sleep)(l),x&&(x+="\n"),x+=I,k&&(k+=", "),k+="networkMessage"}if(M&&!document.querySelector("#switch-continue_after_network").checked&&(C=!0),p.price>d.listing_price?(E="Offer message sent.",I=(0,v.z)().offerMessage):(E="Lowball message sent.",I=(0,v.z)().lowball_message),I=(0,w.e)(I,p,c,d.listing_price),!C&&I&&!f(I,d)){x&&(x+="\n");const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,S||(S=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*m(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,b.sleep)(l),x+=I,k&&(k+=", "),k+="accept/offerMessage"}if(I=(0,v.z)().meetupMessage,I=(0,w.e)(I,p,c,d.listing_price),!C&&I&&!f(I,d)){const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,S||(S=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*m(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,b.sleep)(l),x&&(x+="\n"),x+=I,k&&(k+=", "),k+="meetupMessage"}return S&&document.querySelector("#switch-deleteaftersend").checked&&(console.log("Deleting conversation",S),await(0,a.apiOfferUp)().deleteMessage(S),console.log("Conversation has been deleted:",S)),window.messagesSent+=1,(0,u.stats)().addOffer(),(0,u.stats)().addStreak(),await async function(e){if(s.disableLogs)return;const{uid:t,ownerName:n,listingid:i,message:a,templateName:r}=e,o={Date:(new Date).toGMTString(),UserID:t,Name:n,ListingID:i,"Message Sent":a,template:r,tabId:window.tabId,extension_version:window.extension_version},l=(0,y.g)();return l&&(o.email=l),async function e(t){return fetch("https://sheets.hopla.tools/?HT=9ec6989caf07d1305c6c386880840f8a&mode=log",{method:"POST",body:JSON.stringify(o)}).then((async e=>(0,_.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (sendBotLog)",n,t),t&&t>6?"":(await(0,b.sleep)(1e4),t||(t=0),e(t+=1)))))}().catch((e=>(console.error("Fetch Failed (sendBotLog))",e),"")))}({uid:r,ownerName:c,listingid:n,message:x,templateName:k}),!!t&&x}async function x(){const e=document.getElementById("streak").value,t=document.getElementById("streaktimeout").value;if(e&&t&&window.iStreaks>=e){const e=(new Date).getTime()+60*t*1e3;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Streak",hh:moment(e).format("HH"),mm:moment(e).format("mm"),ss:moment(e).format("ss")}),await(0,b.sleep)(60*t*1e3),(0,u.stats)().resetCurrentStreak()}}async function k(e,t){if(!window.isAllowed)return console.error("You are not allowed to use this bot! x("),"not-allowed";await(0,o.getConsoleMessages)(),await new Promise((e=>{!function t(){if("complete"===document.readyState)return e();setTimeout(t,30)}()})),(0,o.CONSOLE_MESSAGE)("fetching_listings",{keyword:e,zipcode:t});let n=await(0,a.apiOfferUp)().fetchListings(e,t);(0,o.CONSOLE_MESSAGE)("fetch_listings",{num_listings:n.length,keyword:e,zipcode:t}),n&&Array.isArray(n)&&(0,u.stats)().addTotalListingsScraped(n),n=function(e){const t=document.querySelector("#ta #keywords").value,n=e.length,i=(e=e.filter((e=>{const n=e.tile&&e.tile.title;if(!n)return!1;const i=t.split(",").map((e=>e.trim())).join("|"),a=new RegExp(i,"i");return!!n.match(a)}))).length;return i!==n&&(0,o.CONSOLE_MESSAGE)("skip_no_keyword",{num_listings:n-i}),e}(n),n=function(e){const t=e.length,n=(e=e.filter((e=>{const t=e.tile&&e.tile.title;return!(0,d.w)(t)}))).length;return n!==t&&(0,o.CONSOLE_MESSAGE)("custom",`Skipped ${t-n} containing skip word.`),e}(n),n=(0,c.f)(n),n=await async function(e){const t=[],n=e.length;if(!document.querySelector("#switch-skipshippingenabled").checked)return;const i=(e=e.filter((e=>{const n=e.tile&&e.tile.fulfillmentDetails&&e.tile.fulfillmentDetails.shippingEnabled,i=e.tile&&e.tile.id;return n&&i&&t.push(i),!n}))).length;return i!==n&&(0,o.CONSOLE_MESSAGE)("shipping_enabled",{num_listings:n-i}),t.length&&await(0,l.skips)().saveToSkipListingBatch(t),e}(n),n=await async function(e){const t=[],n=e.length,i=(e=e.filter((e=>{const n=e.tile&&e.tile.state,i=e.tile&&e.tile.id;return"DELETED"!==n||(t.push(i),!1)}))).length;return i!==n&&(0,o.CONSOLE_MESSAGE)("deleted_listings",{num_listings:n-i}),t.length&&await(0,l.skips)().saveToSkipListingBatch(t),e}(n);const h=n.length;for(let e=0;e<h;e++){if(window.listingsChecked||(window.listingsChecked=0),window.listingsChecked+=1,window.listingsChecked>s.listingsPerKeyword)return window.listingsChecked=0,"listingsPerKeyword reached.";if(!window.isRun)return void console.log("Bot stopped.");const t=n[e]&&n[e].tile&&n[e].tile.id,a=n[e]&&n[e].tile&&n[e].tile.title;if(!t){console.error("listing has no id");continue}if(await(0,l.skips)().isSkipListing(t)){(0,o.CONSOLE_MESSAGE)("skip_listing",{listing_id:t,listing_name:a});continue}const c=await(0,r.fetchListingDetail)(t),h=c.description;if(h&&(0,d.w)(h)){(0,o.CONSOLE_MESSAGE)("skipword_found",{listing_name:a,listing_id:t}),await(0,l.skips)().saveToSkipListing(t);continue}(0,u.stats)().addNewListings();const g=c&&c.owner&&c.owner.id,f=c&&c.owner&&c.owner.profile&&c.owner.profile.name;if(!g){console.error(`Failed to get ownerid of listing ${t}!`);continue}if(await(0,l.skips)().isSkipMessagedUser(g)){await(0,i.addAllUserListingsToSkipList)(g,f),(0,o.CONSOLE_MESSAGE)("already_messaged",{owner_id:g,owner_name:f,listing_id:t,listing_name:a});continue}if(!await p(t,g,f,a)){await(0,i.addAllUserListingsToSkipList)(g,f);continue}const w=await S(c);if(w){const e=c.price;(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:w,listing_price:e,listing_id:t,listing_name:a}),await(0,i.addAllUserListingsToSkipList)(g,f),await(0,l.skips)().saveToMessagedUsers(g);const n=1e3*m(s.userDelay[0],s.userDelay[1]),r=(new Date).getTime()+n;(0,o.CONSOLE_MESSAGE)("timeout",{message:`Finished sending all messages to ${f} (${g}).`,hh:moment(r).format("HH"),mm:moment(r).format("mm"),ss:moment(r).format("ss")}),await(0,b.sleep)(n)}await x()}return console.log("no more new results available"),"no more results"}},4053:(e,t,n)=>{"use strict";n.r(t),n.d(t,{processWriteQueue:()=>s});var i=n(2287),a=n(6849);async function s(){window.writeQueue||(window.writeQueue=[]);const e=[...window.writeQueue];window.writeQueue=[];for(const t of e)try{let e=await fetch("https://us-central1-trade-apples.cloudfunctions.net/markplacebotstats",{method:"POST",headers:{"Content-Length":"application/json"},body:JSON.stringify(t)}).then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text())).catch((e=>{console.log(e)}));"ok"!==e&&(0,a.Z)({error:"Failed to write to dashboard",data:t,sheetsApiResponse:e})}catch(e){console.error(e),(0,a.Z)({error:"Failed to write to dashboard3",data:t})}setTimeout((()=>{s()}),2e3)}},1063:(e,t,n)=>{"use strict";n.r(t),n.d(t,{restoreDefaults:()=>o});var i=n(2287),a=n(6849),s=n(4246);async function r(){const e=await fetch("https://sheets.hopla.tools/?HT=1a6324ea456c27346230df0a70458cc9&format=json&sheet_name=Content").then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text()));if(e&&!e.includes("opener"))return r();try{return JSON.parse(e)}catch(t){return await(0,a.Z)({error:"Failed to getDefaultContent. sheets.hopla.tools api response.",res:e}),{}}}function o(){function e(e){if("createEvent"in document){const t=document.createEvent("HTMLEvents");t.initEvent("change",!1,!0),e.dispatchEvent(t)}else e.fireEvent("onchange");e.parentElement&&e.parentElement.MaterialTextfield&&e.parentElement.MaterialTextfield.change(e.value)}document.getElementById("page2loading").style.display="block",async function(){const e=await fetch("https://sheets.hopla.tools/?HT=1a6324ea456c27346230df0a70458cc9&format=json&sheet_name=Settings").then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text()));if(e&&!e.includes("keywords"))return r();try{return JSON.parse(e)}catch(t){return await(0,a.Z)({error:"Failed to getDefaultSettings. sheets.hopla.tools api response.",res:e}),{}}}().then((t=>{if(document.getElementById("page2loading").style.display="none",t.result&&Array.isArray(t.result)&&t.result.length){const n={};t.result.forEach((e=>{n[e.input_name]=e.value}));const i=n.keywords||"",a=n.zipcodes||"",s=n.skip_words||"",r=n.listing_min_price||"",o=n.listing_max_price||"",c=n.listing_max_age||"",d=n.listing_price_delta||"",u=n.price_rounding||"",p=n.custom_price_delta||"",m=n.continue_after_storage||"",h=n.continue_after_network||"";let g=document.querySelector("#keywords");g.value=i,e(g),g=document.querySelector("#zipcodes"),g.value=a,e(g),g=document.querySelector("#skipwords"),g.value=s,e(g),g=document.querySelector("#listing_min_price"),g.value=r,e(g),g=document.querySelector("#listing_max_price"),g.value=o,e(g),g=document.querySelector("#listing_max_age"),g.value=c,e(g),g=document.querySelector("#listing_price_delta"),g.value=d,e(g),g=document.querySelector("#custom_price_delta"),g.value=p,e(g),g=document.querySelector("#roundupdown"),g.value=u,e(g),g=document.querySelector("#switch-continue_after_storage"),l(g).then((e=>{"TRUE"===m?e.parentNode.MaterialSwitch.on():e.parentNode.MaterialSwitch.off()})),g=document.querySelector("#switch-continue_after_network"),l(g).then((e=>{"TRUE"===h?e.parentNode.MaterialSwitch.on():e.parentNode.MaterialSwitch.off()}))}})).catch((e=>(console.error("Fetch Failed",e),(0,s.sleep)(1e4).then((()=>o()))))),r().then((t=>{if(document.getElementById("page2loading").style.display="none",t.result&&Array.isArray(t.result)&&t.result.length){const n={};t.result.forEach((e=>{n[e.input_name]=e.value}));const i=n.opener||"",a=n.question_1||"",s=n.question_2||"",r=n.storage_message||"",o=n.network_message||"",l=n.question_3||"",c=n.question_4||"",d=n.lowball||"",u=n.offer||"",p=n.meetup||"";let m=document.querySelector("#openermessage");m.value=i,e(m),m=document.querySelector("#question_1"),m.value=a,e(m),m=document.querySelector("#question_2"),m.value=s,e(m),m=document.querySelector("#gbmessage"),m.value=r,e(m),m=document.querySelector("#networkmessage"),m.value=o,e(m),m=document.querySelector("#question_3"),m.value=l,e(m),m=document.querySelector("#question_4"),m.value=c,e(m),m=document.querySelector("#lowball_message"),m.value=d,e(m),m=document.querySelector("#offermessage"),m.value=u,e(m),m=document.querySelector("#meetupmessage"),m.value=p,e(m)}})).catch((e=>(console.error("Fetch Failed",e),(0,s.sleep)(1e4).then((()=>o())))))}function l(e){return new Promise((t=>{!function n(){if(e.parentNode.MaterialRadio||e.parentNode.MaterialSwitch)return t(e);setTimeout(n,30)}()}))}},6849:(e,t,n)=>{"use strict";function i(e){return fetch("https://webhook.hopla.workers.dev?project=OfferUpBot",{method:"POST",body:JSON.stringify(e),mode:"no-cors"})}n.d(t,{Z:()=>i})},7426:(e,t,n)=>{"use strict";function i(e){e||window.viewermode?window.isViewMode=!0:(document.querySelector('#ta #menu a[href="#page2"]').click(),window.isViewMode=!1),window.viewermode&&(document.querySelector("#menu").style.display="none")}n.d(t,{o:()=>i}),n(8927),n(5826)},7091:(e,t,n)=>{"use strict";function i(e){window.isKO||e.match&&(window.navigator.onLine||e.match(/offline/))&&(document.querySelector("#statustext").textContent=e)}n.r(t),n.d(t,{showLastConsoleLog:()=>i})},1023:(e,t,n)=>{"use strict";function i(e){let t=document.querySelector("#loadingoverlay");t?t.style.display=e?"flex":"none":function(e){const t=document.querySelector("#ta");t&&(t.insertAdjacentHTML("afterbegin",`<div id="loadingoverlay" style="display: ${e?"flex":"none"};" class='loading-one'>\n          <div class='loading-two'>\n              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"\n                  class='svg'>\n                  <circle r="80" cx="500" cy="90" class='circle-one' />\n                  <circle r="80" cx="500" cy="910" class='circle-one' />\n                  <circle r="80" cx="90" cy="500" class='circle-one' />\n                  <circle r="80" cx="910" cy="500" class='circle-one' />\n                  <circle r="80" cx="212" cy="212" class='circle-one' />\n                  <circle r="80" cx="788" cy="212" class='circle-one' />\n                  <circle r="80" cx="212" cy="788" class='circle-one' />\n                  <circle r="80" cx="788" cy="788" class='circle-one' />\n              </svg>\n          </div>\n          <span style="position: fixed; padding-top: 165px;">Loading. Please wait...</span>\n      </div>\n    `),document.head.insertAdjacentHTML("beforeend","<style>\n      /* Loading Overlay - START */\n      .loading-one {\n        box-sizing: border-box;\n        display: flex;\n        position: absolute;\n        flex-flow: column nowrap;\n        align-items: center;\n        justify-content: space-around;\n        background: rgba(255, 255, 255, 0.8);\n        top: 0px;\n        left: 0px;\n        width: 100%;\n        height: 100%;\n        z-index: 2147483647;\n      }\n\n      .loading-two {\n        order: 1;\n        box-sizing: border-box;\n        overflow: visible;\n        flex: 0 0 auto;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        animation-name: around;\n        animation-duration: 2000ms;\n        animation-timing-function: linear;\n        animation-iteration-count: infinite;\n        width: 120px;\n        height: 120px;\n      }\n\n      .circle-one {\n        fill: var(--black);\n      }\n\n      .svg {\n        width: 100%;\n        height: 100%;\n        fill: var(--black);\n      }\n\n      @keyframes around {\n        0% {\n          transform: rotate(0deg)\n        }\n\n        100% {\n          transform: rotate(360deg)\n        }\n      }\n\n      /* Loading Overlay - END */\n    </style>"))}(e)}n.r(t),n.d(t,{showLoading:()=>i})},6725:(e,t,n)=>{"use strict";n.r(t),n.d(t,{skips:()=>m});var i=n(8498),a=n(4347),s=n(6901);function r(e){const t=new Date,n=new Date(e);return Math.floor((t-n)/864e5)}var o=n(3539),l=(n(9105),n(2287)),c=n(9632),d=n(4246),u=n(1060),p=n(4484);function m(){async function e(e,t,n){let i=`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?batch=1&listname=${e}`;n&&(i+=`&localcheck=${window.taPartnerId}`);return await async function e(n){return fetch(i,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(t)}).then((async e=>(0,l.handleFetchErrors)(e))).then((e=>e.text())).catch((async t=>(console.error("Fetch Failed (saveIdToLogBatch)",t,n),n&&n>6?"":(await(0,d.sleep)(1e4),n||(n=0),e(n+=1)))))}().then((n=>{try{const i=JSON.parse(n);if(!i.success||"added"!==i.success)return(0,p._apiSendBug)({error:"Failed to copy ids from storage to db",listname:e,aIds:t,response:n})}catch(i){return(0,p._apiSendBug)({error:"Failed copy ids from storage to db",listname:e,aIds:t,response:n})}}))}async function t(e,t,n){let i=`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?listname=${e}&id=${t}&email=${window.taEmail}`;n&&(i+=`&localcheck=${window.taPartnerId}`);return await async function e(t){return fetch(i,{method:"POST"}).then((async e=>(0,l.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (saveIdToLog)",n,t),t&&t>6?"":(await(0,d.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((n=>{try{const i=JSON.parse(n);if(!i.success||"added"!==i.success)return(0,p._apiSendBug)({error:"Failed to save to log",listname:e,id:t,response:n})}catch(i){return(0,p._apiSendBug)({error:"Failed to save to log",listname:e,id:t,response:n})}}))}async function n(t,n){let i=localStorage.getItem(t);i&&(i=JSON.parse(i),i&&Array.isArray(i)&&i.length&&(await e(n,i),localStorage.setItem(t,"[]")))}async function h(e,t,n,i){let a=`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?isexist=${t}&listname=${e}`;n&&(a+="&noexpiry=1"),i&&(a+=`&localcheck=${window.taPartnerId}`);return await async function e(t){return fetch(a).then((async e=>(0,l.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (isIdInLog)",n,t),t&&t>6?"":(await(0,d.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((n=>{try{const i=JSON.parse(n);return"success"in i?i.success:((0,p._apiSendBug)({error:"Failed to check logs",listname:e,id:t,response:n}),!1)}catch(i){return(0,p._apiSendBug)({error:"Failed to check logs",listname:e,id:t,response:n}),!1}}))}return{saveToPartnerMessaged:e=>t("partnermessage",e),saveToMessagedUsers:e=>t("users",e,!0),saveToSkipListing:e=>{let n="listings";"single"===document.querySelector("[name=bot_mode]:checked").value||(n="listings_multi"),t(n,e,!0)},saveToSkipListingBatch:t=>{let n="listings";"single"===document.querySelector("[name=bot_mode]:checked").value||(n="listings_multi"),e(n,t,!0)},isSkipListing:async e=>{let t="listings";return"single"===document.querySelector("[name=bot_mode]:checked").value||(t="listings_multi"),await n("skip_listings",t),h(t,e,!0,!0)},getOtherIphoneListings:async function(e,t,n){if(!t){const n=await(0,a.fetchListingDetail)(e);if(!n||!n.owner)return void(0,p._apiSendBug)({error:"getOtherIphoneListings failed. No listing owner returned."});t=n.owner.id}const l=[];(0,o.CONSOLE_MESSAGE)("custom",`Fetching other listings of ${n} (${t})`);const d=await(0,i.apiOfferUp)().getUserListings(t),h=document.querySelector("#ta #keywords").value.split(",").map((e=>e.trim())).join("|");for(const t of d)if(t.id!==e&&t.listingId!==e&&t.title){const e=t.title,n=t.description,i=t.postDate,a=Number(t.price),d=new RegExp(h,"i");if(i){const e=document.getElementById("listing_max_age");if(e){const n=e.value,a=r(i);if(a>n){(0,o.CONSOLE_MESSAGE)("skip_old_listing",{age:a,listing_id:t.id,listing_name:t.title});continue}}}if(await m().isSkipListing(t.listingId))continue;if(!e.match(d))continue;let p=(0,u.w)(e);if(!p&&n&&(p=(0,u.w)(n)),p)continue;if(!(0,s.d)(a))continue;const g=await(0,c.isShippingEnabled)(t.listingId);if(document.querySelector("#switch-skipshippingenabled").checked&&g&&t.listingId){await m().saveToSkipListing(t.listingId);continue}l.push(t.id)}return[...new Set(l)]},isSkipMessagedUser:async e=>(await n("skip_messagedusers","users"),h("users",e,"",!0)),isSkipPartnerMessage:async e=>(await n("skip_partnermessaged","partnermessage"),h("partnermessage",e,!0))}}},4246:(e,t,n)=>{"use strict";function i(e){return new Promise((t=>setTimeout(t,e)))}n.r(t),n.d(t,{sleep:()=>i})},9973:(e,t,n)=>{"use strict";function i(){if(Array.from(document.querySelectorAll("button")).find((e=>"Log in"===e.textContent))&&(alert("You are not logged in! You have to login to offerup first."),1))return!1;let e=document.querySelector("#runfrom").value,t=document.querySelector("#rununtil").value;if(t&&e){e=e.split(":"),t=t.split(":");const n=new Date,i=new Date;i.setHours(e[0],e[1]);const a=new Date;return a.setHours(t[0],t[1]),i>a&&a.setDate(a.getDate()+1),n>=i&&n<=a}return alert("No schedule set! Bot will not run."),!1}n.r(t),n.d(t,{start:()=>b});var a=n(1203),s=n(3539);function r(){let e=localStorage.getItem("lastZipIdx")||0;e=parseInt(e,10);let t=localStorage.getItem("lastKwIdx");t=t?parseInt(t,10)+1:0;let n=document.querySelector("#ta #keywords").value;if(!n)return console.error("No keywords found."),void alert("No keywords found.");n=n.split(",").map((e=>e.trim()));let i=document.querySelector("#ta #zipcodes").value;return i?(i=i.split(",").map((e=>e.trim())),t>=n.length&&(t=0,e+=1,e>=i.length&&(e=0)),localStorage.setItem("lastKwIdx",t),localStorage.setItem("lastZipIdx",e),String(n[t]).trim().length?{keyword:n[t],zipcode:i[e]}:r()):(console.error("No zipcodes input found."),void alert("No zipcodes input found."))}function o(){let e=localStorage.getItem("tsSpamDetected");if(e){e=parseInt(e,10);const t=(new Date).getTime();if(t<e)return e-t}return!1}var l=n(4219),c=n(8498),d=n(4246),u=n(7367);async function p(){if(!window.isRun)return;const e=document.getElementById("maxconcurrentconversations").value;if(e){const t=await(0,c.apiOfferUp)().countConversations();if(t&&(0,u.stats)().setThreadsCount(t),t>=e)return window.maxConvoReached||(window.maxConvoReached=!0,(0,s.CONSOLE_MESSAGE)("halted_threads")),await(0,d.sleep)(a.intervalConversationsCheck),p();window.maxConvoReached=!1}}var m=n(9869),h=n(7426);function g(){document.querySelector("#switch-rununtil").parentElement.MaterialSwitch?((0,h.o)(!0),document.querySelector("#switch-rununtil").parentElement.MaterialSwitch.off(),localStorage.setItem("input_switch-rununtil",!1),localStorage.removeItem("lastKwIdx")):setTimeout((()=>{g()}),2e3)}var f=n(7091),w=n(7121),y=n(3443);function _(){window.isWaitingForSchedule?(0,s.CONSOLE_MESSAGE)("halted_schedule"):(window.isWaitingForSchedule=!0,document.getElementById("switch-rununtil").checked?((0,s.CONSOLE_MESSAGE)("halted_schedule"),i()?(window.isWaitingForSchedule=!1,window.isRun=1,(0,u.stats)().resetCurrentStreak(),(0,u.stats)().addRun(),b()):setTimeout((()=>{window.isWaitingForSchedule=!1,_()}),5e3)):window.isWaitingForSchedule=!1)}async function b(){if(window.viewermode)return void(0,f.showLastConsoleLog)("Tab is in viewer mode.");(0,w.X)(!1);const e=setInterval((()=>{i()||(window.isRun=0,(0,s.CONSOLE_MESSAGE)("halted_schedule"),clearInterval(e),(0,w.X)(!0),_())}),1e4);if(!i())return clearInterval(e),(0,w.X)(!0),void _();if(a.showAlerts&&alert("start"),!(0,y.t)())return g(),void(0,w.X)(!0);if((0,l.loadStats)(),o()){const e=o(),t=(new Date).getTime()+e;(0,s.CONSOLE_MESSAGE)("halted_soft",{hh:moment(t).format("HH"),mm:moment(t).format("mm"),ss:moment(t).format("ss")}),await(0,d.sleep)(e)}const{keyword:t,zipcode:n}=r();for(let e=1;e<40;){if(!window.isRun){console.log("Bot stopped.");break}await p();const e=await(0,m.processKeyword)(t,n);if("no more results"===e)return(0,s.CONSOLE_MESSAGE)("custom","No listings left.."),await(0,d.sleep)(5e3),void b();if("listingsPerKeyword reached."===e)return(0,s.CONSOLE_MESSAGE)("custom","Listings per keyword has been reached. Starting a new search."),void b();if("not-allowed"===e)return void(0,s.CONSOLE_MESSAGE)("custom","You are not allowed to use this bot.");if(window.messagesSent>1&&window.messagesSent%20==0){const e=(new Date).getTime()+60*a.delayPerXMessages*1e3;(0,s.CONSOLE_MESSAGE)("timeout",{message:"20 messages has been sent",hh:moment(e).format("HH"),mm:moment(e).format("mm"),ss:moment(e).format("ss")}),await(0,d.sleep)(60*a.delayPerXMessages*1e3)}}}},7367:(e,t,n)=>{"use strict";n.r(t),n.d(t,{stats:()=>s,getStats:()=>r});var i=n(9171),a=n(4484);function s(){const e=new Date,t=`${e.getFullYear()}${e.getMonth()+1}${e.getDate()}`;let n=localStorage.getItem(`stats_${t}`);function a(){localStorage.setItem(`stats_${t}`,JSON.stringify(n))}return n=n?JSON.parse(n):{},{addOffer:()=>{const e="offers";n[e]||(n[e]=0),n[e]+=1,a(),document.getElementById("stat_offers").textContent=n[e],(0,i._)({offers:n[e]})},addPartner:()=>{const e="partners";n[e]||(n[e]=0),n[e]+=1,a(),document.getElementById(`stat_${e}`).textContent=n[e],(0,i._)({partners:n[e]})},addRun:()=>{n.runs||(n.runs=0),n.runs+=1,a(),document.getElementById("stat_runs").textContent=n.runs,(0,i._)({runs:n.runs})},addStreak:()=>{window.iStreaks+=1,document.getElementById("stat_streaks").textContent=window.iStreaks,(0,i._)({streaks:window.iStreaks})},addKo:()=>{n.ko||(n.ko=0),n.ko+=1,a(),document.getElementById("stat_ko").textContent=n.ko,(0,i._)({KO:n.ko})},resetCurrentStreak:()=>{window.iStreaks=0,document.getElementById("stat_streaks").textContent=window.iStreaks,(0,i._)({streaks:0})},addTotalListingsScraped:e=>{const t="listings_scraped_ids",s=e.map((e=>e.tile&&e.tile.id));n[t]||(n[t]=[]);const r=[...new Set(n[t].concat(s))];n[t]=r;const o="scraped";n[o]=r.length,a(),document.getElementById(`stat_${o}`).textContent=r.length,(0,i._)({listings_scraped:r.length})},setThreadsCount:e=>{const t="num_threads";n[t]=e,a(),(0,i._)({num_threads:n[t]})},addNewListings:()=>{const e="new_listings";n[e]||(n[e]=0),n[e]+=1,a(),document.getElementById(`stat_${e}`).textContent=n[e],(0,i._)({new_listings:n[e]})},addSingleListings:()=>{const e="single_listings";n[e]||(n[e]=0),n[e]+=1,a(),document.getElementById(`stat_${e}`).textContent=n[e],(0,i._)({single_listings:n[e]})},addMultiListings:()=>{const e="multi_listings";n[e]||(n[e]=0),n[e]+=1,a(),document.getElementById(`stat_${e}`).textContent=n[e],(0,i._)({multi_listings:n[e]})}}}function r(){try{const e={},t=new Date,n=`${t.getFullYear()}${t.getMonth()+1}${t.getDate()}`;let i=localStorage.getItem(`stats_${n}`);if(i){const t=["offers","partners","runs","streaks","ko"];i=JSON.parse(i),t.forEach((t=>{e[t]=i[t]||0}))}return e}catch(e){console.error(e),(0,a._apiSendBug)({error:"Failed to get stats",details:e.toString()})}}},8329:(e,t,n)=>{"use strict";n.d(t,{z:()=>a});const i=n(6503);function a(e){return{openermessage:(()=>{const t=localStorage.getItem("input_openermessage")||"";return e?t:i.unspin(t)})(),question_1:(()=>{const t=localStorage.getItem("input_question_1")||"";return e?t:i.unspin(t)})(),question_2:(()=>{const t=localStorage.getItem("input_question_2")||"";return e?t:i.unspin(t)})(),gbMessage:(()=>{const t=localStorage.getItem("input_gbmessage")||"";return e?t:i.unspin(t)})(),networkMessage:(()=>{const t=localStorage.getItem("input_networkmessage")||"";return e?t:i.unspin(t)})(),question_3:(()=>{const t=localStorage.getItem("input_question_3")||"";return e?t:i.unspin(t)})(),question_4:(()=>{const t=localStorage.getItem("input_question_4")||"";return e?t:i.unspin(t)})(),lowball_message:(()=>{const t=localStorage.getItem("input_lowball_message")||"";return e?t:i.unspin(t)})(),offerMessage:(()=>{const t=localStorage.getItem("input_offermessage")||"";return e?t:i.unspin(t)})(),meetupMessage:(()=>{const t=localStorage.getItem("input_meetupmessage")||"";return e?t:i.unspin(t)})()}}},803:(e,t,n)=>{"use strict";n.r(t),n.d(t,{testTemplates:()=>r});var i=n(9107),a=n(8329),s=n(3443);function r(){const e=[];(0,s.t)()&&(Object.keys((0,a.z)()).forEach((t=>{let n=(0,a.z)()[t];if(!n)return;const s={model:"IPHONE 11 PRO",storage:"64GB",network:"Unlocked",price:450,condition:"Grade A - Like New [NO cracks, scratches, scuffs or dents]",deductions:[]};try{n=(0,i.e)(n,s,"Silver",600)}catch(e){console.trace(),console.error(e)}n=`${t}: ${n}\n\n`,e.push(n)})),alert(e.join("")))}},1060:(e,t,n)=>{"use strict";function i(e){const t=localStorage.getItem("input_skipwords");if(t){let n=!1;if(t.split(",").map((e=>e.trim())).forEach((t=>{t&&e&&e.match(new RegExp(t,"i"))&&(n=t)})),n)return n}}n.d(t,{w:()=>i})},5281:(e,t,n)=>{"use strict";n.d(t,{Q:()=>r});var i=n(8927),a=n(5149),s=n(5508);async function r(e,t){let n;if(e?n=e:window.location.href.includes("inbox/message/")&&(n=await(0,i.t)()),!n)return;window.bugReport={};const r=t||await(0,s.T)(n);window.bugReport.listingId=n;const o=(0,a.N)(r.attributes,"model"),l=(0,a.N)(r.attributes,"carrierNetwork");if(document.querySelector("#buglistingdetails").innerHTML="",document.querySelector("#bugvariantdetails").innerHTML="",c("URL",window.location.href),r.title){let e=r.title;e=u(e,"title"),c("Title",e),window.bugReport.listing_title=e}if(r.description){let e=r.description;e=u(e,"description"),c("Description",e),window.bugReport.listing_description=e}if(o){let e=o;e=u(e,"modelFromAttribute"),c("Model",e),window.bugReport.listing_detail_model=e}if(l){let e=l;e=u(e,"networkFromAttribute"),c("Network",e),window.bugReport.listing_detail_network=e}function c(e,t){document.querySelector("#buglistingdetails").innerHTML+=` <div class="report-detail">\n                            <span class="label">${e}</span>\n                            <span id="itemtitle">${t}</span>\n                          </div>`}function d(e,t){document.querySelector("#bugvariantdetails").innerHTML+=` <div class="report-detail">\n                            <span class="label">${e}</span>\n                            <span id="itemtitle">${t}</span>\n                          </div>`}function u(e,t){if(window.textMatchIndex[n]&&window.textMatchIndex[n][t]){if(window.textMatchIndex[n][t].model){const i=window.textMatchIndex[n][t].model.rgx;e=e.replace(i,(e=>`<strong class="blue">${e}</strong>`))}if(window.textMatchIndex[n][t].storage){const i=window.textMatchIndex[n][t].storage.rgx;e=e.replace(i,(e=>`<strong class="green">${e}</strong>`))}if(window.textMatchIndex[n][t].network){const i=window.textMatchIndex[n][t].network.rgx;e=e.replace(i,(e=>`<strong class="purple">${e}</strong>`))}if(window.textMatchIndex[n][t].deductions){const i=window.textMatchIndex[n][t].deductions;for(const t of i)e=e.replace(t,(e=>`<strong class="red">${e}</strong>`))}}return e}window.lastVariant&&(window.lastVariant.model&&(window.bugReport.model=window.lastVariant.model,d("Model",window.lastVariant.model)),window.lastVariant.storage&&(window.bugReport.storage=window.lastVariant.storage,d("Storage",window.lastVariant.storage)),window.lastVariant.network&&(window.bugReport.network=window.lastVariant.network,d("Network",window.lastVariant.network)),window.lastVariant.condition&&(window.bugReport.condition=window.lastVariant.condition,d("Condition",window.lastVariant.condition)))}},7121:(e,t,n)=>{"use strict";function i(e){const t=["#keywords","#zipcodes","#skipwords","#openermessage","#gbmessage","#networkmessage","#offermessage","#closingmessage","#acceptmessage","#meetupmessage","#partnermessage"];for(const n of t){let t=document.querySelector(n);t&&(t.disabled=!e)}}n.d(t,{X:()=>i})},3443:(e,t,n)=>{"use strict";n.d(t,{t:()=>r});var i=n(3539),a=n(8329);const s=n(6503);function r(){const e=[];return Object.keys((0,a.z)()).forEach((t=>{const n=(0,a.z)(!0)[t];s.validate(n)||e.push(t)})),!e.length||((0,i.CONSOLE_MESSAGE)("custom","Invalid spintax detected."),alert("You have invalid spintax format in "+e.join(", ")),!1)}},3624:(e,t,n)=>{"use strict";function i(e){return new Promise((t=>{!function n(){if(e.parentNode.MaterialRadio||e.parentNode.MaterialSwitch)return t(e);setTimeout(n,30)}()}))}n.d(t,{B:()=>i})},9171:(e,t,n)=>{"use strict";n.d(t,{_:()=>s});var i=n(2617);function a(){const e=new Date;return`${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`}async function s({offers:e,partners:t,runs:n,streaks:s,KO:r,listings_scraped:o,num_threads:l,new_listings:c,single_listings:d,multi_listings:u}){if(!window.taEmail)return;const p=document.getElementById("roundupdown").value,m=document.querySelector("#switch-skipshippingenabled").checked,h=document.getElementById("streaktimeout").value,g=document.getElementById("streak").value,f=document.querySelector("#switch-deleteaftersend").checked,w=document.querySelector("#skipwords").value,y=document.querySelector("#ta #zipcodes").value,_=document.querySelector("#ta #keywords").value,b=document.getElementById("maxconcurrentconversations").value,v=document.querySelector("#runfrom").value,S=document.querySelector("#rununtil").value,x=function(){const e=new Date;let t=e.getMonth()+1;t<10&&(t=`0${t}`);let n=e.getDate();return n<10&&(n=`0${n}`),`${e.getFullYear()}-${t}-${n}`}(),k={key:(0,i.g)()||window.taEmail,partner_email:window.taEmail,date:x,version:window.extension_version};void 0!==e&&(k.offers=e),void 0!==t&&(k.partners=t),void 0!==n&&(k.runs=n),void 0!==s&&(k.streaks=s),void 0!==r&&(k.KO=r),void 0!==v&&(k["run from"]=v),void 0!==S&&(k.until=S),void 0!==p&&(k["offer add/deduct"]=p),void 0!==m&&(k["skip shipping"]=m),void 0!==g&&(k["max streak"]=g),void 0!==h&&(k.timeout=h),void 0!==o&&(k.listings_scraped=o),void 0!==b&&(k["max concurrent"]=b),void 0!==f&&(k["delete after sending"]=f),void 0!==w&&(k.skipwords=w),void 0!==y&&(k.zipcodes=y),void 0!==_&&(k.keywords=_),void 0!==l&&(k["threads inbox"]=l),void 0!==c&&(k["New Listings"]=c),void 0!==d&&(k["Single Listings"]=d),void 0!==u&&(k["Multi Listings"]=u),function(){const e=(new Date).getTime();let t=localStorage.getItem("runtimeHits");if(t){t=JSON.parse(t);const i=t[t.length-1];n=i,Date.now()-n>=6e5&&(t.push(e),e-i<12e5&&function(){const e=a();let t=localStorage.getItem("runTimePerDay");t?(t=JSON.parse(t),t[e]||(t={},t[e]=0),t[e]=parseInt(t[e])+1):t={[e]:1},localStorage.setItem("runTimePerDay",JSON.stringify(t))}())}else t=[],t.push(e);var n;localStorage.setItem("runtimeHits",JSON.stringify(t))}(),k.runtime_points=function(){let e=localStorage.getItem("runTimePerDay");if(e){const t=a();return e=JSON.parse(e),e[t]?e[t]:0}return 0}(),window.writeQueue||(window.writeQueue=[]),window.writeQueue.push(k)}},6503:(e,t,n)=>{e.exports=n(9819)},9819:(e,t)=>{!function(e){e.isSpintax=function(e){return null!==e.match(/\{[^}]*\|*[^}]*\}/)},e.findSpintax=function(e){return e.match(/\{([^{}]+?)\}/)},e.unspin=function(t,n){for(var i,a,s,r=t,o=0;e.isSpintax(t);){if(o>=1e3)throw new Error("Unable unspin text after 1000 iterations ("+r+")");s=(a=(i=e.findSpintax(t))[1].split("|"))[Math.floor((n||Math.random)()*a.length)],t=t.replace(i[0],s),o++}return t},e.count=function(t){for(var n,i,a,s,r,o=0,l=/%%%\d+%%%/g,c=/%%%(\d+)%%%/,d=t,u=0;e.isSpintax(t);){if(u>=1e3)throw new Error("Unable unspin text after 1000 iterations ("+d+")");for(i=(n=e.findSpintax(t))[1].split("|"),a=0,r=0;r<i.length;r++)i[r].match(l)?a+=parseInt(i[r].match(c)[1])||1:a+=1;t=t.replace(n[0],"%%%N%%%".replace("N",a.toString())),u++}if(t.match(l))for(s=t.match(l),o=1,r=0;r<s.length;r++)o*=parseInt(s[r].match(c)[1])||1;return o},e.validate=function(t){return null===(t=e.unspin(t)).match(/(\{[^}]*\|)|(\|[^{]*\})/)}}(t)},9178:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});const i=e=>e?e=(e=e.replace(/\[.+?\]/,"")).trim():""},127:(e,t)=>{t.viewModeCheck=function(){window.location.href.match("/inbox|inbox/message")&&(window.viewermode=!0)}}},t={};function n(i){var a=t[i];if(void 0!==a)return a.exports;var s=t[i]={exports:{}};return e[i](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{if(window.isAlreadyInjected)throw new Error("Marketplace Bot is already injected to this page.");window.isAlreadyInjected=!0;const{addAllUserListingsToSkipList:e}=n(9088),{apiOfferUp:t}=n(8498),{attachEvents:i}=n(5596),{showAlerts:a}=n(1203),{fetchListingDetail:s}=n(4347),{getConsoleMessages:r,CONSOLE_MESSAGE:o}=n(3539),{getPartnerDetails:l}=n(8414),{getQuote:c}=n(2320),{getVariant:d}=n(5826),{default:u}=n(3119),{handleFetchErrors:p}=n(2287),{injectHoplaLogin:m}=n(6722),{injectLogger:h}=n(7731),{injectMdl:g}=n(4559),{injectMoment:f}=n(3695),{injectStyle:w}=n(5729),{injectTrackjs:y}=n(7933),{insertUI:_}=n(642),{isShippingEnabled:b}=n(9632),{loadInputs:v}=n(5038),{loadStats:S}=n(4219),{logout:x}=n(1992),{onSessionReady:k,login_callback:I}=n(147),{prefix:E}=n(7850),{processKeyword:L}=n(9869),{processWriteQueue:M}=n(4053),{restoreDefaults:C}=n(1063),{showLoading:O}=n(1023),{skips:N}=n(6725),{sleep:T}=n(4246),{start:D}=n(9973),{stats:F}=n(7367),{testTemplates:j}=n(803),{_apiSendBug:A}=n(4484),{viewModeCheck:q}=n(127);window.extension_version="3.69",window.messagesSent=0,window.iStreaks=0,window.isRun=0,window.isViewMode=!0,window.tabId=Math.round(1e4*Math.random()),window.textMatchIndex={},window.isEnterprise=!1,window.bugReport={},window.isKO=!1,window.storeFirebaseLog=async function(e,t){return async function n(i){return fetch("https://us-central1-trade-apples.cloudfunctions.net/sendlog",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({logType:"offerup",ts:t||"",log:e})}).then((async e=>p(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (storeFirebaseLog)",e,i),i&&i>6?"":(await T(1e4),i||(i=0),n(i+=1)))))}().catch((e=>(console.error("Fetch Failed (storeFirebaseLog)",e),"")))},window.testTemplates=j,window.restoreDefaults=C,window.prefix=E,window.apiOfferUp=t,window.skips=N,window.fetchListingDetail=s,window.processKeyword=L,window.addAllUserListingsToSkipList=e,window.CONSOLE_MESSAGE=o,window.getConsoleMessages=r,window.getVariant=d,window.getQuote=c,window.showLoading=O,window.login_callback=I,window.getPartnerDetails=l,window.hopla_logout=x,window.isShippingEnabled=b;let R=!1;console.log(`Marketplace Bot Version ${window.extension_version}`);try{!function(){"use strict";let e=!1;a&&alert("Offerup Bot has been injected!"),window.addEventListener("online",(()=>{R=!1,console.log("You are back online!"),setTimeout((()=>{let e=document.querySelector("#statustext");e&&"You are back online!"===e.textContent&&(console.log("Will restart bot."),D())}),1e4)})),window.addEventListener("offline",(async()=>{for(R=!0,console.log("You are offline.");R;)await n(1e3)}));try{t()}catch(e){console.error("Bot crashed. offline",e),A({error:"Found error in the bot.",info:e.toString()})}async function t(){w(),f(),y(),r(),_(),O(!0),m(k),g(),v(),S(),i(),M(),window.isAllowed&&(e=!0)}function n(e){return new Promise((t=>setTimeout(t,e)))}window.main=t,window.start=D}()}catch(e){console.trace(),console.error("caught error",e),console.log("Caught error. Will restart bot."),A({error:"Found error in the bot.",info:e.toString()})}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly4vZ2V0Q2hhdExpc3RpbmdJZC5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvX2FwaVNlbmRCdWcuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2FkZEFsbFVzZXJMaXN0aW5nc1RvU2tpcExpc3QuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3dhaXRGb3JTZWNvbmRzLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9hcGlPZmZlclVwLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9pbnNlcnRWYXJpYWJsZS5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvcHVyZ2VfbGlzdGluZ3MuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3NhdmVJbnB1dC5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvYXR0YWNoRXZlbnRzLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2ZldGNoTGlzdGluZ0RldGFpbC5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZmlsdGVyT3V0TGlzdGluZ3NOb3RJblByaWNlUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2dldENvbnNvbGVNZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZ2V0RGF0YUZyb21BdHRyaWJ1dGUuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2dldEl0ZW1JbmZvLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9nZXRQYXJ0bmVyRGV0YWlscy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZ2V0S2V5VmFsdWVzLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2dldFF1b3RlLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9nZXRVc2VyRW1haWwuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2dldE1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2dldFZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2dldFdlYnNpdGVWYXJpYWJsZS5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvaGFuZGxlRmV0Y2hFcnJvcnMuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2luamVjdEhvcGxhTG9naW4uanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2luamVjdExvZ2dlci5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvaW5qZWN0TWRsLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9pbmplY3RNb21lbnQuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2luamVjdFN0eWxlLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9pbmplY3RUcmFja2pzLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9pbmplY3RUcmFja0pzTW9kdWxlLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9pbnNlcnRVSS5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvaXNTaGlwcGluZ0VuYWJsZWQuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2xvYWRJbnB1dHMuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2xvYWRTdGF0cy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvbG9nb3V0LmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9vblNlc3Npb25SZWFkeS5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZ2V0QWRqdXN0ZWRQcmljZURlbHRhLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9wYXJzZVZhcmlhYmxlcy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZ2V0Um91bmRlZFByaWNlLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9wcmVmaXguanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2lzT3duZXJOdW1MaXN0aW5nc0luUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3JhbmRvbUludEZyb21JbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvaGFzVW5wYXJzYWJsZVZhcmlhYmxlcy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvc2VuZE1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3NlbmRCb3RMb2cuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3N0cmVha1RpbWVvdXRDaGVjay5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvcHJvY2Vzc0tleXdvcmQuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3dhaXREb2N1bWVudFJlYWR5LmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9maWx0ZXJMaXN0aW5nc1dpdGhLZXl3b3JkLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9maWx0ZXJPdXRMaXN0aW5nVGl0bGVzV2l0aFNraXBXb3Jkcy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZmlsdGVyT3V0TGlzdGluZ3NTaGlwcGluZ0VuYWJsZWQuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2ZpbHRlck91dERlbGV0ZWRMaXN0aW5ncy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvcHJvY2Vzc1dyaXRlUXVldWUuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3Jlc3RvcmVEZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvc2VuZERlYnVnTG9nLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9zZXRWaWV3ZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvc2hvd0xhc3RDb25zb2xlTG9nLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9zaG93TG9hZGluZy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZ2V0QWdlLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9za2lwcy5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvc2xlZXAuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2NhblJ1bi5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvbG9nZ2VkaW5DaGVjay5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvZ2V0S2V5d29yZC5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvaXNTcGFtSGFsdC5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvbWF4Q29udm9DaGVjay5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvcnVuVW50aWxTd2l0Y2hPZmYuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL2NsZWFyTGFzdEtleXdvcmQuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3dhaXRGb3JTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC8uL21vZHVsZXMvc3RhcnQuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3N0YXRzLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy90ZW1wbGF0ZXMuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3Rlc3RUZW1wbGF0ZXMuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3RleHRDb250YWluc1NraXBXb3JkLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy91cGRhdGVCdWdJbmZvLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy91cGRhdGVJbnB1dHNTdGF0ZXMuanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9tb2R1bGVzL3ZhbGlkYXRlU3BpbnRheGVzLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy93YWl0Rm9yTWRsLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy9ydW50aW1lLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbW9kdWxlcy93cml0ZVRvRGFzaEJvYXJkLmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbm9kZV9tb2R1bGVzL21lbC1zcGludGF4L2luZGV4LmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vbm9kZV9tb2R1bGVzL21lbC1zcGludGF4L2xpYi9zcGludGF4LmpzIiwid2VicGFjazovL29mZmVydXAtYm90Ly4vcmVtb3ZlRGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi92aWV3ZXJtb2RlLmpzIiwid2VicGFjazovL29mZmVydXAtYm90L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29mZmVydXAtYm90L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9vZmZlcnVwLWJvdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL29mZmVydXAtYm90L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vb2ZmZXJ1cC1ib3QvLi9jb250ZW50c2NyaXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImFzeW5jIGZ1bmN0aW9uIGdldENoYXRMaXN0aW5nSWQoKSB7XHJcbiAgY29uc3QgY2hhdElkID0gZ2V0Q2hhdElkKCk7XHJcbiAgY29uc3QgbGlzdGluZ0lkID0gYXdhaXQgYXBpR2V0Q2hhdEJ5SWQoY2hhdElkKTtcclxuICByZXR1cm4gbGlzdGluZ0lkO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGFwaUdldENoYXRCeUlkKGNoYXRJZCkge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9vZmZlcnVwLmNvbS9hcGkvZ3JhcGhxbFwiLCB7XHJcbiAgICBcImhlYWRlcnNcIjoge1xyXG4gICAgICBcImFjY2VwdFwiOiBcIiovKlwiLFxyXG4gICAgICBcImFjY2VwdC1sYW5ndWFnZVwiOiBcImVuLVVTLGVuO3E9MC45XCIsXHJcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICBcIm91LWJyb3dzZXItdXNlci1hZ2VudFwiOiBcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85My4wLjQ1NzcuNjMgU2FmYXJpLzUzNy4zNlwiLFxyXG4gICAgICBcInNlYy1jaC11YVwiOiBcIlxcXCJHb29nbGUgQ2hyb21lXFxcIjt2PVxcXCI5M1xcXCIsIFxcXCIgTm90O0EgQnJhbmRcXFwiO3Y9XFxcIjk5XFxcIiwgXFxcIkNocm9taXVtXFxcIjt2PVxcXCI5M1xcXCJcIixcclxuICAgICAgXCJzZWMtY2gtdWEtbW9iaWxlXCI6IFwiPzBcIixcclxuICAgICAgXCJzZWMtY2gtdWEtcGxhdGZvcm1cIjogXCJcXFwiV2luZG93c1xcXCJcIixcclxuICAgICAgXCJzZWMtZmV0Y2gtZGVzdFwiOiBcImVtcHR5XCIsXHJcbiAgICAgIFwic2VjLWZldGNoLW1vZGVcIjogXCJjb3JzXCIsXHJcbiAgICAgIFwic2VjLWZldGNoLXNpdGVcIjogXCJzYW1lLW9yaWdpblwiLFxyXG4gICAgICBcInVzZXJkYXRhXCI6IFwiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnNiMk5oZEdsdmJpSTZJbnRjSW1OcGRIbGNJanBjSWtadmNuUWdUR0YxWkdWeVpHRnNaVndpTEZ3aWMzUmhkR1ZjSWpwY0lrWk1YQ0lzWENKNmFYQkRiMlJsWENJNlhDSXpNek15TWx3aUxGd2liRzl1WjJsMGRXUmxYQ0k2TFRnd0xqSTNOamdzWENKc1lYUnBkSFZrWlZ3aU9qSTJMakUwT0RaOUluMC5UamhsY2EyaUJweGM2LVNDUUZJbVhXa3MyR25IalhuY3pyTFJuRERiWE9vXCIsXHJcbiAgICAgIFwieC1vdS1kLXRva2VuXCI6IFwid2ViLTA1MmQwMTg1ZDk5MWI3M2Y3ZWI3YmQ1ZmRhNzVjMGNmYmJmMmY5NWJiMmYzOTJmNTI2MzBhNjRiXCIsXHJcbiAgICAgIFwieC1vdS1mLXRva2VuXCI6IFwiNzRlNWUxZDk4ZWE3ZWM5MjVkNzVmMDE1YTE2YjNmM2NcIixcclxuICAgICAgXCJ4LXJlcXVlc3QtaWRcIjogXCI1MDRiOWExMC04ZDQ3LTRjOGUtYWZhMS02YmZkODliOTQ0NTNcIlxyXG4gICAgfSxcclxuICAgIFwicmVmZXJyZXJcIjogYGh0dHBzOi8vb2ZmZXJ1cC5jb20vaW5ib3gvbWVzc2FnZS8ke2NoYXRJZH0/YWxlcnRJZD0yODkwMTIyNzUwYCxcclxuICAgIFwicmVmZXJyZXJQb2xpY3lcIjogXCJzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luXCIsXHJcbiAgICBcImJvZHlcIjogYHtcXFwib3BlcmF0aW9uTmFtZVxcXCI6XFxcIkdldENoYXRCeUlkXFxcIixcXFwidmFyaWFibGVzXFxcIjp7XFxcImlkXFxcIjpcXFwiJHtjaGF0SWR9XFxcIn0sXFxcInF1ZXJ5XFxcIjpcXFwicXVlcnkgR2V0Q2hhdEJ5SWQoJGlkOiBTdHJpbmchLCAkYmVmb3JlOiBTdHJpbmcpIHtcXFxcbiAgY2hhdDogZGlzY3Vzc2lvbihkYXRhOiB7ZGlzY3Vzc2lvbklkOiAkaWQsIGJlZm9yZTogJGJlZm9yZX0pIHtcXFxcbiAgICBpdGVtSWRcXFxcbiAgICBzZWxsZXJJZFxcXFxuICAgIGJ1eWVySWRcXFxcbiAgICBkZWFjdGl2YXRlZFVzZXJJZFxcXFxuICAgIGRhdGVDcmVhdGVkXFxcXG4gICAgbGFzdFBvc3REYXRlXFxcXG4gICAgcmVhZFN0YXR1cyB7XFxcXG4gICAgICB1c2VySWRcXFxcbiAgICAgIGxhc3RSZWFkRGF0ZVxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICB2aXN1YWxUYWdzIHtcXFxcbiAgICAgIHRhZ1xcXFxuICAgICAgdHlwZVxcXFxuICAgICAgZGlzcGxheVRleHRcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgbWVzc2FnZXMge1xcXFxuICAgICAgaWRcXFxcbiAgICAgIHJlY2lwaWVudElkXFxcXG4gICAgICBzZW5kZXJJZFxcXFxuICAgICAgdGV4dFxcXFxuICAgICAgc2VuZERhdGVTdHJpbmdcXFxcbiAgICAgIG1ldGFkYXRhVHlwZVxcXFxuICAgICAgbWV0YWRhdGEge1xcXFxuICAgICAgICBwaG90b3Mge1xcXFxuICAgICAgICAgIHNtYWxsIHtcXFxcbiAgICAgICAgICAgIHVybFxcXFxuICAgICAgICAgICAgd2lkdGhcXFxcbiAgICAgICAgICAgIGhlaWdodFxcXFxuICAgICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICAgIH1cXFxcbiAgICAgICAgICBtZWRpdW0ge1xcXFxuICAgICAgICAgICAgdXJsXFxcXG4gICAgICAgICAgICB3aWR0aFxcXFxuICAgICAgICAgICAgaGVpZ2h0XFxcXG4gICAgICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICAgICAgfVxcXFxuICAgICAgICAgIGxhcmdlIHtcXFxcbiAgICAgICAgICAgIHVybFxcXFxuICAgICAgICAgICAgd2lkdGhcXFxcbiAgICAgICAgICAgIGhlaWdodFxcXFxuICAgICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICAgIH1cXFxcbiAgICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbWVzc2FnZVVybFxcXFxuICAgICAgICBzeXN0ZW1NZXNzYWdlQ29udGV4dCB7XFxcXG4gICAgICAgICAgaWNvblVybFxcXFxuICAgICAgICAgIGFjdGlvbnMge1xcXFxuICAgICAgICAgICAgYWN0aW9uUGF0aFxcXFxuICAgICAgICAgICAgZXh0ZXJuYWxVUkxcXFxcbiAgICAgICAgICAgIGFjdGlvblRleHRcXFxcbiAgICAgICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgICAgICB9XFxcXG4gICAgICAgICAgdGl0bGVUZXh0XFxcXG4gICAgICAgICAgYm9keVRleHRcXFxcbiAgICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcGxhY2Uge1xcXFxuICAgICAgICAgIG5hbWVcXFxcbiAgICAgICAgICBmb3JtYXR0ZWRBZGRyZXNzXFxcXG4gICAgICAgICAgcGxhY2VJZFxcXFxuICAgICAgICAgIGxvbmdpdHVkZVxcXFxuICAgICAgICAgIGxhdGl0dWRlXFxcXG4gICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIG1lc3NhZ2VCdXR0b25UZXh0XFxcXG4gICAgICAgIG1lc3NhZ2VUaXRsZVxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIGxpc3Rpbmcge1xcXFxuICAgICAgaWRcXFxcbiAgICAgIGxpc3RpbmdJZFxcXFxuICAgICAgdGl0bGVcXFxcbiAgICAgIHByaWNlXFxcXG4gICAgICBvcmlnaW5hbFByaWNlXFxcXG4gICAgICBpc0Zpcm1PblByaWNlXFxcXG4gICAgICBzdGF0ZVxcXFxuICAgICAgY2F0ZWdvcnkge1xcXFxuICAgICAgICBpZFxcXFxuICAgICAgICBuYW1lXFxcXG4gICAgICAgIGxldmVsT25lTmFtZVxcXFxuICAgICAgICBsZXZlbFR3b05hbWVcXFxcbiAgICAgICAgbGV2ZWxUaHJlZU5hbWVcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgcGhvdG9zIHtcXFxcbiAgICAgICAgdXVpZFxcXFxuICAgICAgICBkZXRhaWwge1xcXFxuICAgICAgICAgIHVybFxcXFxuICAgICAgICAgIHdpZHRoXFxcXG4gICAgICAgICAgaGVpZ2h0XFxcXG4gICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGRldGFpbFNxdWFyZSB7XFxcXG4gICAgICAgICAgdXJsXFxcXG4gICAgICAgICAgd2lkdGhcXFxcbiAgICAgICAgICBoZWlnaHRcXFxcbiAgICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgZnVsZmlsbG1lbnREZXRhaWxzIHtcXFxcbiAgICAgICAgYnV5SXROb3dFbmFibGVkXFxcXG4gICAgICAgIHNoaXBwaW5nRW5hYmxlZFxcXFxuICAgICAgICBsb2NhbFBpY2t1cEVuYWJsZWRcXFxcbiAgICAgICAgc2hpcHBpbmdQcmljZVxcXFxuICAgICAgICBlc3RpbWF0ZWREZWxpdmVyeURhdGVTdGFydFxcXFxuICAgICAgICBlc3RpbWF0ZWREZWxpdmVyeURhdGVFbmRcXFxcbiAgICAgICAgc2VsbGVyUGF5c1NoaXBwaW5nXFxcXG4gICAgICAgIHNoaXBwaW5nUGFyY2VsSWRcXFxcbiAgICAgICAgY2FuU2hpcFRvQnV5ZXJcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBvdGhlclVzZXJQcm9maWxlIHtcXFxcbiAgICAgIHVzZXJJZFxcXFxuICAgICAgYXZhdGFycyB7XFxcXG4gICAgICAgIHNxdWFyZUltYWdlXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIGlzVHJ1eW91VmVyaWZpZWRcXFxcbiAgICAgIG5hbWVcXFxcbiAgICAgIGRhdGVKb2luZWRcXFxcbiAgICAgIHB1YmxpY0xvY2F0aW9uTmFtZVxcXFxuICAgICAgcmF0aW5nU3VtbWFyeSB7XFxcXG4gICAgICAgIGNvdW50XFxcXG4gICAgICAgIGF2ZXJhZ2VcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgYzJjUGhvbmVOdW1iZXIge1xcXFxuICAgICAgICBjb3VudHJ5Q29kZVxcXFxuICAgICAgICBuYXRpb25hbE51bWJlclxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBpc0F1dG9zRGVhbGVyXFxcXG4gICAgICBpc1N1YlByaW1lRGVhbGVyXFxcXG4gICAgICBpc1RydXlvdVZlcmlmaWVkXFxcXG4gICAgICB3ZWJzaXRlTGlua1xcXFxuICAgICAgcHVibGljTG9jYXRpb24ge1xcXFxuICAgICAgICBmb3JtYXR0ZWRBZGRyZXNzXFxcXG4gICAgICAgIG5hbWVcXFxcbiAgICAgICAgbGF0aXR1ZGVcXFxcbiAgICAgICAgbG9uZ2l0dWRlXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgb3RoZXJVc2VyUmVsYXRpb25zaGlwIHtcXFxcbiAgICAgIGZvbGxvd2luZ1xcXFxuICAgICAgYmxvY2tlZFxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbn1cXFxcblxcXCJ9YCxcclxuICAgIFwibWV0aG9kXCI6IFwiUE9TVFwiLFxyXG4gICAgXCJtb2RlXCI6IFwiY29yc1wiLFxyXG4gICAgXCJjcmVkZW50aWFsc1wiOiBcImluY2x1ZGVcIlxyXG4gIH0pLnRoZW4oeCA9PiB4Lmpzb24oKSk7XHJcbiAgcmV0dXJuIHJlcyAmJiByZXMuZGF0YSAmJiByZXMuZGF0YS5jaGF0ICYmIHJlcy5kYXRhLmNoYXQuaXRlbUlkO1xyXG59XHJcbmZ1bmN0aW9uIGdldENoYXRJZCgpIHtcclxuICBjb25zdCBtYXRjaGVzID0gd2luZG93LmxvY2F0aW9uLmhyZWYubWF0Y2goL2luYm94XFwvbWVzc2FnZVxcLyhcXGQrKS8pO1xyXG4gIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMSkgcmV0dXJuIG1hdGNoZXNbMV07XHJcbn1cclxud2luZG93LmdldENoYXRJZCA9IGdldENoYXRMaXN0aW5nSWRcclxuXHJcbmV4cG9ydHMuZ2V0Q2hhdExpc3RpbmdJZCA9IGdldENoYXRMaXN0aW5nSWQ7XHJcbiIsImltcG9ydCB7IGdldFVzZXJFbWFpbCB9IGZyb20gXCIuL2dldFVzZXJFbWFpbFwiO1xyXG5pbXBvcnQgeyBoYW5kbGVGZXRjaEVycm9ycyB9IGZyb20gXCIuL2hhbmRsZUZldGNoRXJyb3JzXCI7XHJcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4vc2xlZXBcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfYXBpU2VuZEJ1ZyhkYXRhKSB7XHJcbiAgY29uc3QgdHMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAvLyBzdG9yZUZpcmViYXNlTG9nKHdpbmRvdy5ldmVyeXRoaW5nLCB0cyk7XHJcbiAgZGF0YS5sb2dfaWQgPSB0cztcclxuICB0cnkge1xyXG4gICAgaWYgKCFkYXRhLmVtYWlsKSBkYXRhLmVtYWlsID0gZ2V0VXNlckVtYWlsKCk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgY29uc29sZS5lcnJvcignZmFpbGVkIHRvIGFkZCBlbWFpbCB0byBsb2cuJyk7XHJcbiAgfVxyXG5cclxuICBpZiAod2luZG93LnRhYklkKSBkYXRhLnRhYklkID0gd2luZG93LnRhYklkO1xyXG4gIGlmICh3aW5kb3cudGFVSUQpIGRhdGEudWlkID0gd2luZG93LnRhVUlEO1xyXG4gIGRhdGEuZXh0ZW5zaW9uX3ZlcnNpb24gPSB3aW5kb3cuZXh0ZW5zaW9uX3ZlcnNpb247XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGZldGNoQXBpKGlUcmllcykge1xyXG4gICAgcmV0dXJuIGZldGNoKGBodHRwczovL3dlYmhvb2suaG9wbGEud29ya2Vycy5kZXYvb2ZmZXJ1cGJvdD9wcm9qZWN0PU9mZmVyVXBCb3RgLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgbW9kZTogJ25vLWNvcnMnXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihhc3luYyByZXMgPT4gaGFuZGxlRmV0Y2hFcnJvcnMocmVzKSlcclxuICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgLmNhdGNoKGFzeW5jIGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRmV0Y2ggRmFpbGVkIChfYXBpU2VuZEJ1ZyknLCBlcnIsIGlUcmllcyk7XHJcbiAgICAgICAgaWYgKGlUcmllcyAmJiBpVHJpZXMgPiA2KSByZXR1cm4gJyc7XHJcbiAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDApO1xyXG4gICAgICAgIGlmICghaVRyaWVzKSBpVHJpZXMgPSAwO1xyXG4gICAgICAgIGlUcmllcyArPSAxO1xyXG4gICAgICAgIHJldHVybiBmZXRjaEFwaShpVHJpZXMpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIGZldGNoQXBpKClcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQgKF9hcGlTZW5kQnVnKScsIGVycik7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH0pOztcclxufSIsImltcG9ydCB7IGFwaU9mZmVyVXAgfSBmcm9tIFwiLi9hcGlPZmZlclVwXCI7XHJcbmltcG9ydCB7IENPTlNPTEVfTUVTU0FHRSB9IGZyb20gXCIuL2dldENvbnNvbGVNZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyBza2lwcyB9IGZyb20gXCIuL3NraXBzXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQWxsVXNlckxpc3RpbmdzVG9Ta2lwTGlzdChvd25lcmlkLCBvd25lcm5hbWUpIHtcclxuICBjb25zdCBsaXN0aW5ncyA9IGF3YWl0IGFwaU9mZmVyVXAoKS5nZXRVc2VyTGlzdGluZ3Mob3duZXJpZCk7XHJcbiAgaWYgKGxpc3RpbmdzKSB7XHJcbiAgICBjb25zdCBhTGlzdGluZ0lkcyA9IGxpc3RpbmdzLmZpbHRlcihpdGVtID0+IGl0ZW0ubGlzdGluZ0lkKS5tYXAoaXRlbSA9PiBpdGVtLmxpc3RpbmdJZCk7XHJcbiAgICBDT05TT0xFX01FU1NBR0UoJ2N1c3RvbScsIGBBZGRpbmcgJHthTGlzdGluZ0lkcy5sZW5ndGh9IGxpc3RpbmdzIG9mICR7b3duZXJuYW1lfSAoJHtvd25lcmlkfSkgdG8gc2tpcCBsaXN0LmApO1xyXG4gICAgcmV0dXJuIHNraXBzKCkuc2F2ZVRvU2tpcExpc3RpbmdCYXRjaChhTGlzdGluZ0lkcyk7XHJcbiAgfVxyXG59IiwiLy8gaW1wb3J0IHsgc2hvd0xhc3RDb25zb2xlTG9nIH0gZnJvbSBcIi4vc2hvd0xhc3RDb25zb2xlTG9nXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2FpdEZvclNlY29uZHMoeCwgaW5mbykge1xyXG4gIC8vIGNvbnNvbGUudHJhY2UoKTtcclxuICAvLyBjb25zb2xlLmxvZygnV2FpdDonLCBpbmZvKTtcclxuICB3aW5kb3cuY291bnREb3duSWQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdjb3VudGRvd24gc3RhcnRlZC4nLCBpbmZvKTtcclxuICBzdGFydENvdW50RG93bih4LCBpbmZvLCB3aW5kb3cuY291bnREb3duSWQpO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICB3aW5kb3cuY291bnREb3duSWQgPSAnJztcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnY291bnRkb3duIGZpbmlzaGVkLicsIGluZm8pO1xyXG4gICAgICByZXNvbHZlKCk7XHJcbiAgICB9LCB4ICogMTAwMCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0YXJ0Q291bnREb3duKHNlY29uZHMsIGluZm8sIF9jb3VudERvd25JZCkge1xyXG4gIGlmICghd2luZG93LmlzUnVuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnIXJ1bicpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAoc2Vjb25kcyA8PSAxKSByZXR1cm47XHJcbiAgaWYgKF9jb3VudERvd25JZCAhPT0gd2luZG93LmNvdW50RG93bklkKSByZXR1cm47XHJcbiAgY29uc3QgZnV0dXJlRGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgKHNlY29uZHMgKiAxMDAwKTtcclxuICAvLyBzaG93TGFzdENvbnNvbGVMb2coYCR7aW5mbyA/IGAke2luZm99IGAgOiAnJ31Cb3Qgd2lsbCBjb250aW51ZSBpbiAke21vbWVudChmdXR1cmVEYXRlKS5mcm9tTm93KHRydWUpfWApO1xyXG4gIGlmIChzZWNvbmRzIDw9IDEpIHJldHVybjtcclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIHN0YXJ0Q291bnREb3duKHNlY29uZHMgLSAxLCBpbmZvLCBfY291bnREb3duSWQpO1xyXG4gIH0sIDEwMDApO1xyXG59IiwiaW1wb3J0IHsgZGVidWdfZGlzYWJsZU1lc3NhZ2VzLCB3YWl0SWZTcGFtRGV0ZWN0ZWQgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgQ09OU09MRV9NRVNTQUdFIH0gZnJvbSBcIi4vZ2V0Q29uc29sZU1lc3NhZ2VzXCI7XHJcbmltcG9ydCB7IGdldE1vZGVsTWF0Y2ggfSBmcm9tIFwiLi9nZXRNb2RlbE1hdGNoXCI7XHJcbmltcG9ydCB7IGdldFVzZXJFbWFpbCB9IGZyb20gXCIuL2dldFVzZXJFbWFpbFwiO1xyXG5pbXBvcnQgeyBoYW5kbGVGZXRjaEVycm9ycyB9IGZyb20gXCIuL2hhbmRsZUZldGNoRXJyb3JzXCI7XHJcbmltcG9ydCBzZW5kRGVidWdMb2cgZnJvbSBcIi4vc2VuZERlYnVnTG9nXCI7XHJcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4vc2xlZXBcIjtcclxuaW1wb3J0IHsgZ2V0U3RhdHMsIHN0YXRzIH0gZnJvbSBcIi4vc3RhdHNcIjtcclxuaW1wb3J0IHsgd2FpdEZvclNlY29uZHMgfSBmcm9tIFwiLi93YWl0Rm9yU2Vjb25kc1wiO1xyXG5pbXBvcnQgeyBfYXBpU2VuZEJ1ZyB9IGZyb20gXCIuL19hcGlTZW5kQnVnXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBpT2ZmZXJVcCgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7Kn0gbGlzdGluZ2lkIHJhdyBsaXN0aW5nIGlkLiBFeGFtcGxlOiAxNDI2OTE4NDUxXHJcbiAgICAgKiBAcGFyYW0geyp9IG1zZyBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBzZW5kTWVzc2FnZTogYXN5bmMgZnVuY3Rpb24gKGxpc3RpbmdpZCwgbXNnLCB0aXRsZSwgb3duZXJpZCwgb3duZXJuYW1lKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUudHJhY2UoKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3NlbmRpbmcnLCBsaXN0aW5naWQsIG1zZyk7XHJcbiAgICAgIGlmICghbXNnKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ21zZyBjYW5ub3QgYmUgZW1wdHkhJywgbXNnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFsaXN0aW5naWQpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbGlzdGluZ2lkIGNhbm5vdCBiZSBlbXB0eSEnLCBsaXN0aW5naWQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhgVG86ICR7bGlzdGluZ2lkfVxcbk1zZzogJHttc2d9YCk7XHJcbiAgICAgIGlmIChkZWJ1Z19kaXNhYmxlTWVzc2FnZXMpIHJldHVybjtcclxuXHJcbiAgICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoQXBpKGlUcmllcykge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChcImh0dHBzOi8vb2ZmZXJ1cC5jb20vYXBpL2dyYXBocWxcIiwge1xyXG4gICAgICAgICAgXCJjcmVkZW50aWFsc1wiOiBcImluY2x1ZGVcIixcclxuICAgICAgICAgIFwiaGVhZGVyc1wiOiB7XHJcbiAgICAgICAgICAgIFwiVXNlci1BZ2VudFwiOiBcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2Ojg5LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvODkuMFwiLFxyXG4gICAgICAgICAgICBcIkFjY2VwdFwiOiBcIiovKlwiLFxyXG4gICAgICAgICAgICBcIkFjY2VwdC1MYW5ndWFnZVwiOiBcImVuLVVTLGVuO3E9MC41XCIsXHJcbiAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgICBcIngtb3UtZC10b2tlblwiOiBcIndlYi04YTI2M2MzOTQ0NWU5MzA4NDA3MzQwODAxMTgwM2MxN2I0MTNkMThmYTkxZmFmYjlmNjRmNzA2ZlwiLFxyXG4gICAgICAgICAgICBcIngtb3UtZi10b2tlblwiOiBcIjZhZjI5YjI1YjU1MTkyMjIwNWE5MDkzN2ZkMTY0NjAzXCIsXHJcbiAgICAgICAgICAgIFwidXNlcmRhdGFcIjogXCJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKc2IyTmhkR2x2YmlJNkludGNJbU5wZEhsY0lqcGNJa1p2Y25RZ1RHRjFaR1Z5WkdGc1pWd2lMRndpYzNSaGRHVmNJanBjSWtaTVhDSXNYQ0o2YVhCRGIyUmxYQ0k2WENJek16TXlNbHdpTEZ3aWJHOXVaMmwwZFdSbFhDSTZMVGd3TGpJM05qZ3NYQ0pzWVhScGRIVmtaVndpT2pJMkxqRTBPRFo5SW4wLlRqaGxjYTJpQnB4YzYtU0NRRkltWFdrczJHbkhqWG5jenJMUm5ERGJYT29cIixcclxuICAgICAgICAgICAgXCJvdS1icm93c2VyLXVzZXItYWdlbnRcIjogXCJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjo4OS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94Lzg5LjBcIixcclxuICAgICAgICAgICAgXCJQcm94eS1BdXRob3JpemF0aW9uXCI6IFwiQmFzaWMgZEhKaFpHVmhjSEJzWlhNNllYQndiR1Z6ZEhKaFpHVTJPUT09XCJcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBcInJlZmVycmVyXCI6IGBodHRwczovL29mZmVydXAuY29tL2l0ZW0vZGV0YWlsLyR7bGlzdGluZ2lkfWAsXHJcbiAgICAgICAgICAvLyBcImJvZHlcIjogYHtcXFwib3BlcmF0aW9uTmFtZVxcXCI6XFxcIlN0YXJ0Q2hhdFxcXCIsXFxcInZhcmlhYmxlc1xcXCI6e1xcXCJsaXN0aW5nSWRcXFwiOlxcXCIke2xpc3RpbmdpZH1cXFwiLFxcXCJ0ZXh0XFxcIjpcXFwiJHttc2d9XFxcIn0sXFxcInF1ZXJ5XFxcIjpcXFwibXV0YXRpb24gU3RhcnRDaGF0KCRsaXN0aW5nSWQ6IElEISwgJHRleHQ6IFN0cmluZyEsICRzdWdnZXN0ZWRNZXNzYWdlVXVpZDogU3RyaW5nKSB7XFxcXG4gIHBvc3RGaXJzdE1lc3NhZ2UoXFxcXG4gICAgZGF0YToge2l0ZW1JZDogJGxpc3RpbmdJZCwgdGV4dDogJHRleHQsIHN1Z2dlc3RlZE1lc3NhZ2VVdWlkOiAkc3VnZ2VzdGVkTWVzc2FnZVV1aWR9XFxcXG4gICkge1xcXFxuICAgIGlkOiBkaXNjdXNzaW9uSWRcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbn1cXFxcblxcXCJ9YCxcclxuICAgICAgICAgIFwiYm9keVwiOiBge1wib3BlcmF0aW9uTmFtZVwiOlwiU3RhcnRDaGF0XCIsXCJ2YXJpYWJsZXNcIjp7XCJsaXN0aW5nSWRcIjpcIiR7bGlzdGluZ2lkfVwiLFwidGV4dFwiOlwiJHttc2d9XCIsXCJzdWdnZXN0ZWRNZXNzYWdlVXVpZFwiOlwiOEU4RjY1M0EtRjY5My00NzZDLThFMzMtNkRBOTkwRDgxNzYzXCJ9LFwicXVlcnlcIjpcIm11dGF0aW9uIFN0YXJ0Q2hhdCgkbGlzdGluZ0lkOiBJRCEsICR0ZXh0OiBTdHJpbmchLCAkc3VnZ2VzdGVkTWVzc2FnZVV1aWQ6IFN0cmluZykge1xcXFxuICBwb3N0Rmlyc3RNZXNzYWdlKFxcXFxuICAgIGRhdGE6IHtpdGVtSWQ6ICRsaXN0aW5nSWQsIHRleHQ6ICR0ZXh0LCBzdWdnZXN0ZWRNZXNzYWdlVXVpZDogJHN1Z2dlc3RlZE1lc3NhZ2VVdWlkfVxcXFxuICApIHtcXFxcbiAgICBpZDogZGlzY3Vzc2lvbklkXFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG59XFxcXG5cIn1gLFxyXG4gICAgICAgICAgXCJtZXRob2RcIjogXCJQT1NUXCIsXHJcbiAgICAgICAgICBcIm1vZGVcIjogXCJjb3JzXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAgICAgICAudGhlbih4ID0+IHgudGV4dCgpKVxyXG4gICAgICAgICAgLmNhdGNoKGFzeW5jIGVyciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIEZhaWxlZCAoc2VuZE1lc3NhZ2UpJywgZXJyLCBpVHJpZXMpO1xyXG4gICAgICAgICAgICBpZiAoaVRyaWVzICYmIGlUcmllcyA+IDYpIHJldHVybiAnJztcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDApO1xyXG4gICAgICAgICAgICBpZiAoIWlUcmllcykgaVRyaWVzID0gMDtcclxuICAgICAgICAgICAgaVRyaWVzICs9IDE7XHJcbiAgICAgICAgICAgIHJldHVybiBmZXRjaEFwaShpVHJpZXMpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IHJlcyA9IGF3YWl0IGZldGNoQXBpKClcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIEZhaWxlZCcsIGVycik7XHJcbiAgICAgICAgICAvLyByZXR1cm4gc2xlZXAoMTAwMDApLnRoZW4oKCkgPT4gYXBpT2ZmZXJVcCgpLnNlbmRNZXNzYWdlKGxpc3RpbmdpZCwgbXNnKSk7XHJcbiAgICAgICAgICAvLyByZXR1cm4gYXBpT2ZmZXJVcCgpLnNlbmRNZXNzYWdlKGxpc3RpbmdpZCwgbXNnKTtcclxuICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9KTtcclxuICAgICAgaWYgKCFyZXMpIHJldHVybiByZXM7XHJcbiAgICAgIGlmIChyZXMgJiYgcmVzLm1hdGNoICYmIHJlcy5tYXRjaCgvY3VycmVudGx5IHNlcnZlIGFyZWFzIG91dHNpZGUgb2YgdGhlIFVTL2kpKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdQcm94eSBGYWlsZWQgLSBHb3QgRXJyb3I6IEN1cnJlbnRseSBzZXJ2ZSBhcmVhcyBvdXRzaWRlIG9mIHRoZSBVUycpO1xyXG4gICAgICAgICAgQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCAnUHJveHkgRmFpbGVkIC0gR290IEVycm9yOiBDdXJyZW50bHkgc2VydmUgYXJlYXMgb3V0c2lkZSBvZiB0aGUgVVMnKTtcclxuICAgICAgICAgIGF3YWl0IHNsZWVwKDYwICogMTAwMCk7XHJcbiAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHJlcyAmJiByZXMuaW5jbHVkZXMoJ0JlZm9yZSB5b3UgY2FuIHNlbmQgYSBtZXNzYWdlLCBwbGVhc2UgdmVyaWZ5IHlvdXIgbW9iaWxlIG51bWJlcicpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignVXNlciBpcyBub3QgdmVyaWZpZWQuIFJlcXVpcmVzIG1vYmlsZSB2ZXJpZmljYXRpb24nKTtcclxuICAgICAgfSBlbHNlIGlmIChyZXMgJiYgcmVzLmluY2x1ZGVzKCdDb252ZXJzYXRpb24gbGltaXQgcmVhY2hlZCcpKSB7XHJcbiAgICAgICAgc3RhdHMoKS5hZGRLbygpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0c1NwYW1EZXRlY3RlZCcsIG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgKHdhaXRJZlNwYW1EZXRlY3RlZCAqIDYwICogMTAwMCkpO1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnQ29udmVyc2F0aW9uIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQuJyk7XHJcbiAgICAgICAgY29uc3QgbG9nSW5mbyA9IHsgbXNnOiAnQ29udmVyc2F0aW9uIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQnIH07XHJcbiAgICAgICAgd2luZG93LmlzS08gPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IGVtYWlsID0gZ2V0VXNlckVtYWlsKCk7XHJcbiAgICAgICAgaWYgKGVtYWlsKSBsb2dJbmZvLmVtYWlsID0gZW1haWw7XHJcbiAgICAgICAgY29uc3QgX3N0YXRzID0gZ2V0U3RhdHMoKTtcclxuICAgICAgICBpZiAoX3N0YXRzKSBsb2dJbmZvLnN0YXRzID0gX3N0YXRzO1xyXG4gICAgICAgIGxvZ0luZm8uc3RyZWFrU2V0dGluZyA9IHtcclxuICAgICAgICAgIHN0cmVhazogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0cmVhaycpLnZhbHVlLFxyXG4gICAgICAgICAgdGltZW91dDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0cmVha3RpbWVvdXQnKS52YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gX2FwaVNlbmRCdWcobG9nSW5mbyk7XHJcbiAgICAgICAgY29uc3QgZnV0dXJlVHMgPSAobmV3IERhdGUoKS5nZXRUaW1lKCkpICsgKHdhaXRJZlNwYW1EZXRlY3RlZCAqIDYwICogMTAwMCk7XHJcbiAgICAgICAgQ09OU09MRV9NRVNTQUdFKCdoYWx0ZWRfc29mdCcsIHtcclxuICAgICAgICAgICdoaCc6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdISCcpLFxyXG4gICAgICAgICAgJ21tJzogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ21tJyksXHJcbiAgICAgICAgICAnc3MnOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnc3MnKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGF3YWl0IHdhaXRGb3JTZWNvbmRzKHdhaXRJZlNwYW1EZXRlY3RlZCAqIDYwLCAnQ29udmVyc2F0aW9uIGxpbWl0IHJlYWNoZWQnKTtcclxuICAgICAgICBhd2FpdCBzbGVlcCh3YWl0SWZTcGFtRGV0ZWN0ZWQgKiA2MCAqIDEwMDApO1xyXG4gICAgICAgIHdpbmRvdy5pc0tPID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuaXNSdW4pIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdib3Qgc3RvcHBlZC4nKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdHMoKS5hZGRSdW4oKTsgLy8gcnVuIHN0YXQgYWZ0ZXIgc3BhbSB0aW1lb3V0LlxyXG4gICAgICAgIC8vIFJFVFJZIEFHQUlOLlxyXG4gICAgICAgIHJldHVybiBhcGlPZmZlclVwKCkuc2VuZE1lc3NhZ2UobGlzdGluZ2lkLCBtc2csIHRpdGxlLCBvd25lcmlkLCBvd25lcm5hbWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlcyAmJiByZXMuaW5jbHVkZXMoJ1ZlcmlmaWNhdGlvbiBSZXF1aXJlZCcpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignVmVyaWZpY2F0aW9uIHJlcXVpcmVkISBWZXJpZnkgdmlhIGFwcCBhbmQgcmVzdGFydCB0aGUgYm90LicpO1xyXG4gICAgICAgIF9hcGlTZW5kQnVnKHsgbXNnOiAnVmVyaWZpY2F0aW9uIHJlcXVpcmVkISBWZXJpZnkgdmlhIGFwcCBhbmQgcmVzdGFydCB0aGUgYm90LicsIGFwaXJlc3BvbnNlOiByZXMgfSk7XHJcbiAgICAgICAgd2luZG93LmlzS08gPSB0cnVlO1xyXG4gICAgICAgIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgJ1ZlcmlmaWNhdGlvbiByZXF1aXJlZCEgVmVyaWZ5IHZpYSBhcHAgYW5kIHJlc3RhcnQgdGhlIGJvdC4nKTtcclxuICAgICAgICBhbGVydCgnVmVyaWZpY2F0aW9uIHJlcXVpcmVkISBWZXJpZnkgdmlhIGFwcCBhbmQgcmVzdGFydCB0aGUgYm90LicpO1xyXG4gICAgICAgIGF3YWl0IHNsZWVwKDk5OTkgKiA2MCAqIDEwMDApO1xyXG4gICAgICAgIC8vIGF3YWl0IHdhaXRGb3JTZWNvbmRzKDk5OTkgKiA2MCwgJ0ZhaWxlZCB0byBzZW5kIG1lc3NhZ2UuJyk7XHJcbiAgICAgICAgd2luZG93LmlzS08gPSBmYWxzZTtcclxuICAgICAgfSBlbHNlIGlmIChyZXMgJiYgcmVzLmluY2x1ZGVzKCdoYXZlIGJsb2NrZWQgdGhlIG90aGVyIHVzZXIgaW4gdGhlIHRocmVhZCcpKSB7XHJcbiAgICAgICAgQ09OU09MRV9NRVNTQUdFKCd0aHJlYWRfcmVtb3ZlZCcsIHtcclxuICAgICAgICAgIGxpc3RpbmdfaWQ6IGxpc3RpbmdpZCxcclxuICAgICAgICAgIGxpc3RpbmdfbmFtZTogdGl0bGUsXHJcbiAgICAgICAgICBvd25lcl9pZDogb3duZXJpZCxcclxuICAgICAgICAgIG93bmVyX25hbWU6IG93bmVybmFtZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlcyAmJiByZXMuaW5jbHVkZXMoJ2Vycm9ycycpKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNlbmQgbWVzc2FnZScsIHJlcyk7XHJcbiAgICAgICAgX2FwaVNlbmRCdWcoeyBtc2c6ICdGYWlsZWQgdG8gc2VuZCBtZXNzYWdlIHRvIHVzZXInLCBhcGlyZXNwb25zZTogcmVzIH0pO1xyXG4gICAgICAgIGlmIChyZXMuaW5jbHVkZXMoJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicpKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdPZmZlcnVwIElOVEVSTkFMX1NFUlZFUl9FUlJPUi4gQm90IHdpbGwgaGFsdC4nKTtcclxuICAgICAgICAgIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgJ09mZmVydXAgSU5URVJOQUxfU0VSVkVSX0VSUk9SLiBCb3Qgd2lsbCBoYWx0LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuaXNLTyA9IHRydWU7XHJcbiAgICAgICAgYXdhaXQgc2xlZXAod2FpdElmU3BhbURldGVjdGVkICogNjAgKiAxMDAwKTtcclxuICAgICAgICAvLyBhd2FpdCB3YWl0Rm9yU2Vjb25kcyh3YWl0SWZTcGFtRGV0ZWN0ZWQgKiA2MCwgJ0ZhaWxlZCB0byBzZW5kIG1lc3NhZ2UuJyk7XHJcbiAgICAgICAgd2luZG93LmlzS08gPSBmYWxzZTtcclxuICAgICAgICAvLyBhbGVydCgnRmFpbGVkIHRvIHNlbmQgbWVzc2FnZSEgQXJlIHlvdSBsb2dnZWRpbiBpbiBvZmZlcnVwPycpO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlcyAmJiByZXMuaW5jbHVkZXMoJ3Bvc3RGaXJzdE1lc3NhZ2UnKSkge1xyXG4gICAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKTtcclxuICAgICAgICByZXR1cm4gcmVzLmRhdGEucG9zdEZpcnN0TWVzc2FnZS5pZDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnc3VjY2VzcyEnLCByZXMpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlTWVzc2FnZTogYXN5bmMgZnVuY3Rpb24gKHBvc3RSZXNwb25zZUlkLCB0cmllcykge1xyXG4gICAgICBpZiAoIXRyaWVzKSB0cmllcyA9IDA7XHJcbiAgICAgIGFzeW5jIGZ1bmN0aW9uIGdldENoYXRJZCgpIHtcclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBmZXRjaEFwaShpVHJpZXMpIHtcclxuICAgICAgICAgIHJldHVybiBmZXRjaChcImh0dHBzOi8vb2ZmZXJ1cC5jb20vYXBpL2dyYXBocWxcIiwge1xyXG4gICAgICAgICAgICBcImhlYWRlcnNcIjoge1xyXG4gICAgICAgICAgICAgIFwiYWNjZXB0XCI6IFwiKi8qXCIsXHJcbiAgICAgICAgICAgICAgXCJhY2NlcHQtbGFuZ3VhZ2VcIjogXCJlbi1VUyxlbjtxPTAuOVwiLFxyXG4gICAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgICAgIFwib3UtYnJvd3Nlci11c2VyLWFnZW50XCI6IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkxLjAuNDQ3Mi4xMjQgU2FmYXJpLzUzNy4zNlwiLFxyXG4gICAgICAgICAgICAgIFwic2VjLWNoLXVhXCI6IFwiXFxcIiBOb3Q7QSBCcmFuZFxcXCI7dj1cXFwiOTlcXFwiLCBcXFwiR29vZ2xlIENocm9tZVxcXCI7dj1cXFwiOTFcXFwiLCBcXFwiQ2hyb21pdW1cXFwiO3Y9XFxcIjkxXFxcIlwiLFxyXG4gICAgICAgICAgICAgIFwic2VjLWNoLXVhLW1vYmlsZVwiOiBcIj8wXCIsXHJcbiAgICAgICAgICAgICAgXCJzZWMtZmV0Y2gtZGVzdFwiOiBcImVtcHR5XCIsXHJcbiAgICAgICAgICAgICAgXCJzZWMtZmV0Y2gtbW9kZVwiOiBcImNvcnNcIixcclxuICAgICAgICAgICAgICBcInNlYy1mZXRjaC1zaXRlXCI6IFwic2FtZS1vcmlnaW5cIixcclxuICAgICAgICAgICAgICBcInVzZXJkYXRhXCI6IFwiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnNiMk5oZEdsdmJpSTZJbnRjSW1OcGRIbGNJanBjSWtadmNuUWdUR0YxWkdWeVpHRnNaVndpTEZ3aWMzUmhkR1ZjSWpwY0lrWk1YQ0lzWENKNmFYQkRiMlJsWENJNlhDSXpNek15TWx3aUxGd2liRzl1WjJsMGRXUmxYQ0k2TFRnd0xqSTNOamdzWENKc1lYUnBkSFZrWlZ3aU9qSTJMakUwT0RaOUluMC5UamhsY2EyaUJweGM2LVNDUUZJbVhXa3MyR25IalhuY3pyTFJuRERiWE9vXCIsXHJcbiAgICAgICAgICAgICAgXCJ4LW91LWQtdG9rZW5cIjogXCJ3ZWItMDUyZDAxODVkOTkxYjczZjdlYjdiZDVmZGE3NWMwY2ZiYmYyZjk1YmIyZjM5MmY1MjYzMGE2NGJcIixcclxuICAgICAgICAgICAgICBcIngtb3UtZi10b2tlblwiOiBcIjc0ZTVlMWQ5OGVhN2VjOTI1ZDc1ZjAxNWExNmIzZjNjXCIsXHJcbiAgICAgICAgICAgICAgXCJ4LXJlcXVlc3QtaWRcIjogXCIyYjQxMGEzMy1iNWE2LTQ1NWMtOTA5My1hNjZlOTFkODNlMmRcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcInJlZmVycmVyXCI6IFwiaHR0cHM6Ly9vZmZlcnVwLmNvbS9pdGVtL2RldGFpbC8xMjM2NDYwNDgzXCIsXHJcbiAgICAgICAgICAgIFwicmVmZXJyZXJQb2xpY3lcIjogXCJzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luXCIsXHJcbiAgICAgICAgICAgIFwiYm9keVwiOiBcIntcXFwib3BlcmF0aW9uTmFtZVxcXCI6XFxcIkdldENoYXRzXFxcIixcXFwidmFyaWFibGVzXFxcIjp7fSxcXFwicXVlcnlcXFwiOlxcXCJxdWVyeSBHZXRDaGF0cyB7XFxcXG4gIGdldENoYXRzOiBhbGVydHNXaXRoQWRzKHR5cGU6IElOQk9YKSB7XFxcXG4gICAgY2hhdHM6IGFsZXJ0c1dpdGhBZHMge1xcXFxuICAgICAgLi4uIG9uIEFsZXJ0IHtcXFxcbiAgICAgICAgY29udGVudFRodW1ibmFpbHNcXFxcbiAgICAgICAgaWRcXFxcbiAgICAgICAgcmVhZFxcXFxuICAgICAgICBzZWVuXFxcXG4gICAgICAgIHR5cGVcXFxcbiAgICAgICAgdGl0bGVcXFxcbiAgICAgICAgbm90aWZpY2F0aW9uVGV4dFxcXFxuICAgICAgICBkYXRlQWRkZWRcXFxcbiAgICAgICAgb2JqZWN0SWRcXFxcbiAgICAgICAgdmlzdWFsVGFncyB7XFxcXG4gICAgICAgICAgdGFnXFxcXG4gICAgICAgICAgdHlwZVxcXFxuICAgICAgICAgIGRpc3BsYXlUZXh0XFxcXG4gICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHNlbmRlciB7XFxcXG4gICAgICAgICAgaWRcXFxcbiAgICAgICAgICBwcm9maWxlIHtcXFxcbiAgICAgICAgICAgIGZpcnN0TmFtZVxcXFxuICAgICAgICAgICAgaXNUcnV5b3VWZXJpZmllZFxcXFxuICAgICAgICAgICAgaXNBdXRvc0RlYWxlclxcXFxuICAgICAgICAgICAgYXZhdGFycyB7XFxcXG4gICAgICAgICAgICAgIHNxdWFyZUltYWdlXFxcXG4gICAgICAgICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIG5vdEFjdGl2ZVxcXFxuICAgICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICAgIH1cXFxcbiAgICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgLi4uIG9uIEJpbmdBZCB7XFxcXG4gICAgICAgIG91QWRJZFxcXFxuICAgICAgICBpdGVtTmFtZVxcXFxuICAgICAgICBpbWFnZVVybFxcXFxuICAgICAgICBzZWxsZXJOYW1lXFxcXG4gICAgICAgIHByaWNlXFxcXG4gICAgICAgIGxvd1ByaWNlXFxcXG4gICAgICAgIGltcHJlc3Npb25GZWVkYmFja1VybFxcXFxuICAgICAgICBjb250ZW50VXJsXFxcXG4gICAgICAgIGFkTmV0d29ya1xcXFxuICAgICAgICBhZEV4cGVyaW1lbnRJZFxcXFxuICAgICAgICBhZFJlcXVlc3RJZFxcXFxuICAgICAgICBleHBlcmltZW50RGF0YUhhc2hcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbn1cXFxcblxcXCJ9XCIsXHJcbiAgICAgICAgICAgIFwibWV0aG9kXCI6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBcIm1vZGVcIjogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgIFwiY3JlZGVudGlhbHNcIjogXCJpbmNsdWRlXCJcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGFzeW5jIHJlcyA9PiBoYW5kbGVGZXRjaEVycm9ycyhyZXMpKVxyXG4gICAgICAgICAgICAudGhlbih4ID0+IHgudGV4dCgpKVxyXG4gICAgICAgICAgICAuY2F0Y2goYXN5bmMgZXJyID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQgKGdldENoYXRJZCknLCBlcnIsIGlUcmllcyk7XHJcbiAgICAgICAgICAgICAgaWYgKGlUcmllcyAmJiBpVHJpZXMgPiA2KSByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDApO1xyXG4gICAgICAgICAgICAgIGlmICghaVRyaWVzKSBpVHJpZXMgPSAwO1xyXG4gICAgICAgICAgICAgIGlUcmllcyArPSAxO1xyXG4gICAgICAgICAgICAgIHJldHVybiBmZXRjaEFwaShpVHJpZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2hBcGkoKVxyXG4gICAgICAgICAgLnRoZW4oYXN5bmMgeCA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgaWYgKHggJiYgeC5tYXRjaCAmJiB4Lm1hdGNoKC9jdXJyZW50bHkgc2VydmUgYXJlYXMgb3V0c2lkZSBvZiB0aGUgVVMvaSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7ZXJyb3I6ICdQcm94eSBGYWlsZWQnLCBlcnJvcl9jb2RlOiAncHJveHktZmFpbGVkJ307XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgYXdhaXQgc2VuZERlYnVnTG9nKHsgZXJyb3I6ICdGYWlsZWQgdG8gcGFyc2UgZGVsZXRlTWVzc2FnZSBhcGkgcmVzcG9uc2UuJywgeCB9KTtcclxuICAgICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzICYmIHJlcy5lcnJvcl9jb2RlID09PSAncHJveHktZmFpbGVkJykge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Byb3h5IEZhaWxlZCAtIEdvdCBFcnJvcjogQ3VycmVudGx5IHNlcnZlIGFyZWFzIG91dHNpZGUgb2YgdGhlIFVTJyk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXMgJiYgcmVzLmRhdGEgJiYgcmVzLmRhdGEuZ2V0Q2hhdHMgJiYgcmVzLmRhdGEuZ2V0Q2hhdHMuY2hhdHMpIHtcclxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9DaGF0IG9mIHJlcy5kYXRhLmdldENoYXRzLmNoYXRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKG9DaGF0Lm9iamVjdElkKSA9PT0gTnVtYmVyKHBvc3RSZXNwb25zZUlkKSkgcmV0dXJuIG9DaGF0LmlkO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfYXBpU2VuZEJ1Zyh7IGVycm9yOiAnRmFpbGVkIHRvIGZpbmQgdGFyZ2V0IG9iamVjdElEJywgdGFyZ2V0OiBwb3N0UmVzcG9uc2VJZCB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgY2hhdElkID0gYXdhaXQgZ2V0Q2hhdElkKCk7XHJcbiAgICAgIGlmICghY2hhdElkKSB7XHJcbiAgICAgICAgdHJpZXMgKz0gMTtcclxuICAgICAgICBpZiAodHJpZXMgPCA2KSB7XHJcbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yU2Vjb25kcyg1LCAnV2FpdCA1IHNlY29uZHMgYmVmb3JlIHJldHJ5aW5nIHRvIGRlbGV0ZSBjb252ZXJzYXRpb24uJyk7XHJcbiAgICAgICAgICByZXR1cm4gYXBpT2ZmZXJVcCgpLmRlbGV0ZU1lc3NhZ2UocG9zdFJlc3BvbnNlSWQsIHRyaWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgY2hhdCBpZCB0byBkZWxldGUgYWZ0ZXIgNSByZXRyaWVzLicsIHBvc3RSZXNwb25zZUlkIH0pO1xyXG4gICAgICAgIF9hcGlTZW5kQnVnKHsgZXJyb3I6ICdGYWlsZWQgdG8gZ2V0IGNoYXQgaWQgdG8gZGVsZXRlIGFmdGVyIDUgcmV0cmllcy4nLCBwb3N0UmVzcG9uc2VJZCB9KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRyaWVzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coeyBlcnJvcjogYFN1Y2Nlc3NmdWxseSBkZWxldGVkIGNvbnZlcnNhdGlvbiBhZnRlciAke3RyaWVzfSByZXRyaWVzLmAsIHBvc3RSZXNwb25zZUlkIH0pO1xyXG4gICAgICAgIF9hcGlTZW5kQnVnKHsgc3VjY2VzczogYFN1Y2Nlc3NmdWxseSBkZWxldGVkIGNvbnZlcnNhdGlvbiBhZnRlciAke3RyaWVzfSByZXRyaWVzLmAsIHBvc3RSZXNwb25zZUlkIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhc3luYyBmdW5jdGlvbiBmZXRjaEFwaShpVHJpZXMpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goXCJodHRwczovL29mZmVydXAuY29tL2FwaS9ncmFwaHFsXCIsIHtcclxuICAgICAgICAgIFwiaGVhZGVyc1wiOiB7XHJcbiAgICAgICAgICAgIFwiYWNjZXB0XCI6IFwiKi8qXCIsXHJcbiAgICAgICAgICAgIFwiYWNjZXB0LWxhbmd1YWdlXCI6IFwiZW4tVVMsZW47cT0wLjlcIixcclxuICAgICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgIFwib3UtYnJvd3Nlci11c2VyLWFnZW50XCI6IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkxLjAuNDQ3Mi4xMjQgU2FmYXJpLzUzNy4zNlwiLFxyXG4gICAgICAgICAgICBcInNlYy1jaC11YVwiOiBcIlxcXCIgTm90O0EgQnJhbmRcXFwiO3Y9XFxcIjk5XFxcIiwgXFxcIkdvb2dsZSBDaHJvbWVcXFwiO3Y9XFxcIjkxXFxcIiwgXFxcIkNocm9taXVtXFxcIjt2PVxcXCI5MVxcXCJcIixcclxuICAgICAgICAgICAgXCJzZWMtY2gtdWEtbW9iaWxlXCI6IFwiPzBcIixcclxuICAgICAgICAgICAgXCJzZWMtZmV0Y2gtZGVzdFwiOiBcImVtcHR5XCIsXHJcbiAgICAgICAgICAgIFwic2VjLWZldGNoLW1vZGVcIjogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgIFwic2VjLWZldGNoLXNpdGVcIjogXCJzYW1lLW9yaWdpblwiLFxyXG4gICAgICAgICAgICBcInVzZXJkYXRhXCI6IFwiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnNiMk5oZEdsdmJpSTZJbnRjSW1OcGRIbGNJanBjSWtadmNuUWdUR0YxWkdWeVpHRnNaVndpTEZ3aWMzUmhkR1ZjSWpwY0lrWk1YQ0lzWENKNmFYQkRiMlJsWENJNlhDSXpNek15TWx3aUxGd2liRzl1WjJsMGRXUmxYQ0k2TFRnd0xqSTNOamdzWENKc1lYUnBkSFZrWlZ3aU9qSTJMakUwT0RaOUluMC5UamhsY2EyaUJweGM2LVNDUUZJbVhXa3MyR25IalhuY3pyTFJuRERiWE9vXCIsXHJcbiAgICAgICAgICAgIFwieC1vdS1kLXRva2VuXCI6IFwid2ViLTA1MmQwMTg1ZDk5MWI3M2Y3ZWI3YmQ1ZmRhNzVjMGNmYmJmMmY5NWJiMmYzOTJmNTI2MzBhNjRiXCIsXHJcbiAgICAgICAgICAgIFwieC1vdS1mLXRva2VuXCI6IFwiNzRlNWUxZDk4ZWE3ZWM5MjVkNzVmMDE1YTE2YjNmM2NcIixcclxuICAgICAgICAgICAgXCJ4LXJlcXVlc3QtaWRcIjogXCI5ZDIyYjM4NS1lYTU2LTQ5NTQtYjUzMy04OWI3YzZiZTE4MjlcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIFwicmVmZXJyZXJcIjogXCJodHRwczovL29mZmVydXAuY29tL2luYm94XCIsXHJcbiAgICAgICAgICBcInJlZmVycmVyUG9saWN5XCI6IFwic3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpblwiLFxyXG4gICAgICAgICAgXCJib2R5XCI6IGB7XFxcIm9wZXJhdGlvbk5hbWVcXFwiOlxcXCJBcmNoaXZlQ2hhdHNcXFwiLFxcXCJ2YXJpYWJsZXNcXFwiOntcXFwiaWRzXFxcIjpbXFxcIiR7Y2hhdElkfVxcXCJdfSxcXFwicXVlcnlcXFwiOlxcXCJtdXRhdGlvbiBBcmNoaXZlQ2hhdHMoJGlkczogW1N0cmluZyFdISkge1xcXFxuICBhcmNoaXZlQWxlcnRzKGFsZXJ0SWRzOiAkaWRzKVxcXFxufVxcXFxuXFxcIn1gLFxyXG4gICAgICAgICAgXCJtZXRob2RcIjogXCJQT1NUXCIsXHJcbiAgICAgICAgICBcIm1vZGVcIjogXCJjb3JzXCIsXHJcbiAgICAgICAgICBcImNyZWRlbnRpYWxzXCI6IFwiaW5jbHVkZVwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgIC50aGVuKGFzeW5jIHJlcyA9PiBoYW5kbGVGZXRjaEVycm9ycyhyZXMpKVxyXG4gICAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAgIC5jYXRjaChhc3luYyBlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQgKGRlbGV0ZU1lc3NhZ2UpJywgZXJyLCBpVHJpZXMpO1xyXG4gICAgICAgICAgICBpZiAoaVRyaWVzICYmIGlUcmllcyA+IDYpIHJldHVybiAnJztcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDApO1xyXG4gICAgICAgICAgICBpZiAoIWlUcmllcykgaVRyaWVzID0gMDtcclxuICAgICAgICAgICAgaVRyaWVzICs9IDE7XHJcbiAgICAgICAgICAgIHJldHVybiBmZXRjaEFwaShpVHJpZXMpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZldGNoQXBpKClcclxuICAgICAgICAudGhlbih4ID0+IHtcclxuICAgICAgICAgIGlmICh4ICYmIHguaW5jbHVkZXMoJ2FyY2hpdmVBbGVydHMnKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIEZhaWxlZCcsIGVycik7XHJcbiAgICAgICAgICAvLyByZXR1cm4gc2xlZXAoMTAwMDApLnRoZW4oKCkgPT4gYXBpT2ZmZXJVcCgpLmRlbGV0ZU1lc3NhZ2UocG9zdFJlc3BvbnNlSWQsIHRyaWVzKSk7XHJcbiAgICAgICAgICAvLyByZXR1cm4gYXBpT2ZmZXJVcCgpLmRlbGV0ZU1lc3NhZ2UocG9zdFJlc3BvbnNlSWQsIHRyaWVzKTtcclxuICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBjb3VudENvbnZlcnNhdGlvbnM6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBmZXRjaEFwaShpVHJpZXMpIHtcclxuICAgICAgICAgIHJldHVybiBmZXRjaChcImh0dHBzOi8vb2ZmZXJ1cC5jb20vYXBpL2dyYXBocWxcIiwge1xyXG4gICAgICAgICAgICBcImhlYWRlcnNcIjoge1xyXG4gICAgICAgICAgICAgIFwiYWNjZXB0XCI6IFwiKi8qXCIsXHJcbiAgICAgICAgICAgICAgXCJhY2NlcHQtbGFuZ3VhZ2VcIjogXCJlbi1VUyxlbjtxPTAuOVwiLFxyXG4gICAgICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgICAgIFwib3UtYnJvd3Nlci11c2VyLWFnZW50XCI6IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkxLjAuNDQ3Mi4xNjQgU2FmYXJpLzUzNy4zNlwiLFxyXG4gICAgICAgICAgICAgIFwic2VjLWNoLXVhXCI6IFwiXFxcIiBOb3Q7QSBCcmFuZFxcXCI7dj1cXFwiOTlcXFwiLCBcXFwiR29vZ2xlIENocm9tZVxcXCI7dj1cXFwiOTFcXFwiLCBcXFwiQ2hyb21pdW1cXFwiO3Y9XFxcIjkxXFxcIlwiLFxyXG4gICAgICAgICAgICAgIFwic2VjLWNoLXVhLW1vYmlsZVwiOiBcIj8wXCIsXHJcbiAgICAgICAgICAgICAgXCJzZWMtZmV0Y2gtZGVzdFwiOiBcImVtcHR5XCIsXHJcbiAgICAgICAgICAgICAgXCJzZWMtZmV0Y2gtbW9kZVwiOiBcImNvcnNcIixcclxuICAgICAgICAgICAgICBcInNlYy1mZXRjaC1zaXRlXCI6IFwic2FtZS1vcmlnaW5cIixcclxuICAgICAgICAgICAgICBcInVzZXJkYXRhXCI6IFwiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnNiMk5oZEdsdmJpSTZJbnRjSW1OcGRIbGNJanBjSWtadmNuUWdUR0YxWkdWeVpHRnNaVndpTEZ3aWMzUmhkR1ZjSWpwY0lrWk1YQ0lzWENKNmFYQkRiMlJsWENJNlhDSXpNek15TWx3aUxGd2liRzl1WjJsMGRXUmxYQ0k2TFRnd0xqSTNOamdzWENKc1lYUnBkSFZrWlZ3aU9qSTJMakUwT0RaOUluMC5UamhsY2EyaUJweGM2LVNDUUZJbVhXa3MyR25IalhuY3pyTFJuRERiWE9vXCIsXHJcbiAgICAgICAgICAgICAgXCJ4LW91LWQtdG9rZW5cIjogXCJ3ZWItMDUyZDAxODVkOTkxYjczZjdlYjdiZDVmZGE3NWMwY2ZiYmYyZjk1YmIyZjM5MmY1MjYzMGE2NGJcIixcclxuICAgICAgICAgICAgICBcIngtb3UtZi10b2tlblwiOiBcIjc0ZTVlMWQ5OGVhN2VjOTI1ZDc1ZjAxNWExNmIzZjNjXCIsXHJcbiAgICAgICAgICAgICAgXCJ4LXJlcXVlc3QtaWRcIjogXCI4MDcwN2NmOS0yNmUxLTRkYmItYjNiMy0zYmY0NWM3MTFjNWZcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcInJlZmVycmVyXCI6IFwiaHR0cHM6Ly9vZmZlcnVwLmNvbS9pbmJveFwiLFxyXG4gICAgICAgICAgICBcInJlZmVycmVyUG9saWN5XCI6IFwic3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpblwiLFxyXG4gICAgICAgICAgICBcImJvZHlcIjogXCJ7XFxcIm9wZXJhdGlvbk5hbWVcXFwiOlxcXCJHZXRDaGF0c1xcXCIsXFxcInZhcmlhYmxlc1xcXCI6e30sXFxcInF1ZXJ5XFxcIjpcXFwicXVlcnkgR2V0Q2hhdHMge1xcXFxuICBnZXRDaGF0czogYWxlcnRzV2l0aEFkcyh0eXBlOiBJTkJPWCkge1xcXFxuICAgIGNoYXRzOiBhbGVydHNXaXRoQWRzIHtcXFxcbiAgICAgIC4uLiBvbiBBbGVydCB7XFxcXG4gICAgICAgIGNvbnRlbnRUaHVtYm5haWxzXFxcXG4gICAgICAgIGlkXFxcXG4gICAgICAgIHJlYWRcXFxcbiAgICAgICAgc2VlblxcXFxuICAgICAgICB0eXBlXFxcXG4gICAgICAgIHRpdGxlXFxcXG4gICAgICAgIG5vdGlmaWNhdGlvblRleHRcXFxcbiAgICAgICAgZGF0ZUFkZGVkXFxcXG4gICAgICAgIG9iamVjdElkXFxcXG4gICAgICAgIHZpc3VhbFRhZ3Mge1xcXFxuICAgICAgICAgIHRhZ1xcXFxuICAgICAgICAgIHR5cGVcXFxcbiAgICAgICAgICBkaXNwbGF5VGV4dFxcXFxuICAgICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBzZW5kZXIge1xcXFxuICAgICAgICAgIGlkXFxcXG4gICAgICAgICAgcHJvZmlsZSB7XFxcXG4gICAgICAgICAgICBmaXJzdE5hbWVcXFxcbiAgICAgICAgICAgIGlzVHJ1eW91VmVyaWZpZWRcXFxcbiAgICAgICAgICAgIGlzQXV0b3NEZWFsZXJcXFxcbiAgICAgICAgICAgIGF2YXRhcnMge1xcXFxuICAgICAgICAgICAgICBzcXVhcmVJbWFnZVxcXFxuICAgICAgICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBub3RBY3RpdmVcXFxcbiAgICAgICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgICAgICB9XFxcXG4gICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIC4uLiBvbiBCaW5nQWQge1xcXFxuICAgICAgICBvdUFkSWRcXFxcbiAgICAgICAgaXRlbU5hbWVcXFxcbiAgICAgICAgaW1hZ2VVcmxcXFxcbiAgICAgICAgc2VsbGVyTmFtZVxcXFxuICAgICAgICBwcmljZVxcXFxuICAgICAgICBsb3dQcmljZVxcXFxuICAgICAgICBpbXByZXNzaW9uRmVlZGJhY2tVcmxcXFxcbiAgICAgICAgY29udGVudFVybFxcXFxuICAgICAgICBhZE5ldHdvcmtcXFxcbiAgICAgICAgYWRFeHBlcmltZW50SWRcXFxcbiAgICAgICAgYWRSZXF1ZXN0SWRcXFxcbiAgICAgICAgZXhwZXJpbWVudERhdGFIYXNoXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG59XFxcXG5cXFwifVwiLFxyXG4gICAgICAgICAgICBcIm1ldGhvZFwiOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgXCJtb2RlXCI6IFwiY29yc1wiLFxyXG4gICAgICAgICAgICBcImNyZWRlbnRpYWxzXCI6IFwiaW5jbHVkZVwiXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihhc3luYyByZXMgPT4gaGFuZGxlRmV0Y2hFcnJvcnMocmVzKSlcclxuICAgICAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAgICAgLmNhdGNoKGFzeW5jIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmV0Y2ggRmFpbGVkIChjb3VudENvbnZlcnNhdGlvbnMpJywgZXJyLCBpVHJpZXMpO1xyXG4gICAgICAgICAgICAgIGlmIChpVHJpZXMgJiYgaVRyaWVzID4gNikgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgIGF3YWl0IHNsZWVwKDEwMDAwKTtcclxuICAgICAgICAgICAgICBpZiAoIWlUcmllcykgaVRyaWVzID0gMDtcclxuICAgICAgICAgICAgICBpVHJpZXMgKz0gMTtcclxuICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hBcGkoaVRyaWVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hBcGkoKVxyXG4gICAgICAgICAgLnRoZW4oYXN5bmMgeCA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgaWYgKHggJiYgeC5tYXRjaCAmJiB4Lm1hdGNoKC9jdXJyZW50bHkgc2VydmUgYXJlYXMgb3V0c2lkZSBvZiB0aGUgVVMvaSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7ZXJyb3I6ICdQcm94eSBGYWlsZWQnLCBlcnJvcl9jb2RlOiAncHJveHktZmFpbGVkJ307XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgYXdhaXQgc2VuZERlYnVnTG9nKHsgZXJyb3I6ICdGYWlsZWQgdG8gcGFyc2UgY291bnRDb252ZXJzYXRpb25zIGFwaSByZXNwb25zZS4nLCB4IH0pO1xyXG4gICAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmVycm9yX2NvZGUgPT09ICdwcm94eS1mYWlsZWQnKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdQcm94eSBGYWlsZWQgLSBHb3QgRXJyb3I6IEN1cnJlbnRseSBzZXJ2ZSBhcmVhcyBvdXRzaWRlIG9mIHRoZSBVUycpO1xyXG4gICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5kYXRhLmdldENoYXRzICYmIHJlc3BvbnNlLmRhdGEuZ2V0Q2hhdHMuY2hhdHMpIHJldHVybiByZXNwb25zZS5kYXRhLmdldENoYXRzLmNoYXRzLmxlbmd0aDtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gY291bnQgY29udm9zJywgZSk7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmZXRjaExpc3RpbmdzOiBhc3luYyBmdW5jdGlvbiAoa2V5d29yZCwgemlwY29kZSkge1xyXG4gICAgICAvLyBjb25zdCB6aXBjb2RlID0gXCIzMzMyM1wiO1xyXG4gICAgICAvLyBjb25zdCBrZXl3b3JkID0gXCJpcGhvbmUgMTEgcHJvIG1heFwiO1xyXG4gICAgICBjb25zdCBwb3N0Qm9keSA9IHtcclxuICAgICAgICBvcGVyYXRpb25OYW1lOiBcIkdldFNlYXJjaEZlZWRcIixcclxuICAgICAgICBxdWVyeTogYHF1ZXJ5IEdldFNlYXJjaEZlZWQoJHNlYXJjaFBhcmFtczogW1NlYXJjaFBhcmFtXSkge1xyXG4gICAgICAgICAgc2VhcmNoKHBhcmFtczogJHNlYXJjaFBhcmFtcykge1xyXG4gICAgICAgICAgICBuZXh0UGFnZUN1cnNvclxyXG4gICAgICAgICAgICBxdWVyeVxyXG4gICAgICAgICAgICBmZWVkSXRlbXMge1xyXG4gICAgICAgICAgICAgIHR5cGVcclxuICAgICAgICAgICAgICB0aWxlIHtcclxuICAgICAgICAgICAgICAgIC4uLiBvbiBMaXN0aW5nIHtcclxuICAgICAgICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgICAgICAgdGl0bGVcclxuICAgICAgICAgICAgICAgICAgc3RhdGVcclxuICAgICAgICAgICAgICAgICAgY29uZGl0aW9uXHJcbiAgICAgICAgICAgICAgICAgIHBvc3REYXRlXHJcbiAgICAgICAgICAgICAgICAgIHBob3RvcyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXVpZFxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3Qge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB1cmxcclxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc21hbGwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZVNtYWxsIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGxvY2F0aW9uRGV0YWlscyB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VcclxuICAgICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgcHJpY2VcclxuICAgICAgICAgICAgICAgICAgZnVsZmlsbG1lbnREZXRhaWxzIHtcclxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ0VuYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ1ByaWNlXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsbGVyUGF5c1NoaXBwaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd1NoaXBwaW5nSWNvbkluRmVlZFxyXG4gICAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB2ZWhpY2xlQXR0cmlidXRlcyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmVoaWNsZU1pbGVzXHJcbiAgICAgICAgICAgICAgICAgICAgdmVoaWNsZU1ha2VcclxuICAgICAgICAgICAgICAgICAgICB2ZWhpY2xlWWVhclxyXG4gICAgICAgICAgICAgICAgICAgIHZlaGljbGVNb2RlbFxyXG4gICAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBzaG93Q2FsbEZvclByaWNlXHJcbiAgICAgICAgICAgICAgICAgIGlzTWVyY2hhbnRJdGVtXHJcbiAgICAgICAgICAgICAgICAgIHNrdVxyXG4gICAgICAgICAgICAgICAgICBtZXJjaGFudElkXHJcbiAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC4uLiBvbiBTZWxsZXJBZCB7XHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1JZFxyXG4gICAgICAgICAgICAgICAgICBvdUFkSWRcclxuICAgICAgICAgICAgICAgICAgYWRNZWRpYXRpb25JZFxyXG4gICAgICAgICAgICAgICAgICBhZEV4cGVyaW1lbnRJZFxyXG4gICAgICAgICAgICAgICAgICBhZE5ldHdvcmtcclxuICAgICAgICAgICAgICAgICAgYWRSZXF1ZXN0SWRcclxuICAgICAgICAgICAgICAgICAgc2VhcmNoSWRcclxuICAgICAgICAgICAgICAgICAgdGlsZVR5cGVcclxuICAgICAgICAgICAgICAgICAgdHlwZVxyXG4gICAgICAgICAgICAgICAgICBjYW1wYWlnbklkXHJcbiAgICAgICAgICAgICAgICAgIGltcHJlc3Npb25GZWVkYmFja1VybHNcclxuICAgICAgICAgICAgICAgICAgbGlzdGluZyB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHBvc3REYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgaXNNZXJjaGFudEl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwaG90b3Mge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdXVpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgbGlzdCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgZGV0YWlsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICBzbWFsbCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbkRldGFpbHMge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZVxyXG4gICAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwcmljZVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bGZpbGxtZW50RGV0YWlscyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ0VuYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nUHJpY2VcclxuICAgICAgICAgICAgICAgICAgICAgIHNlbGxlclBheXNTaGlwcGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2hvd1NoaXBwaW5nSWNvbkluRmVlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2ZWhpY2xlQXR0cmlidXRlcyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2ZWhpY2xlTWlsZXNcclxuICAgICAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0NhbGxGb3JQcmljZVxyXG4gICAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAuLi4gb24gQmluZ0FkIHtcclxuICAgICAgICAgICAgICAgICAgb3VBZElkXHJcbiAgICAgICAgICAgICAgICAgIGFkTWVkaWF0aW9uSWRcclxuICAgICAgICAgICAgICAgICAgYWRFeHBlcmltZW50SWRcclxuICAgICAgICAgICAgICAgICAgYWROZXR3b3JrXHJcbiAgICAgICAgICAgICAgICAgIGFkUmVxdWVzdElkXHJcbiAgICAgICAgICAgICAgICAgIHNlYXJjaElkXHJcbiAgICAgICAgICAgICAgICAgIHRpbGVUeXBlXHJcbiAgICAgICAgICAgICAgICAgIHR5cGVcclxuICAgICAgICAgICAgICAgICAgZXhwZXJpbWVudERhdGFIYXNoXHJcbiAgICAgICAgICAgICAgICAgIGltYWdlVXJsXHJcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnRVcmxcclxuICAgICAgICAgICAgICAgICAgcHJpY2VcclxuICAgICAgICAgICAgICAgICAgcHJpY2VDdXJyZW5jeVxyXG4gICAgICAgICAgICAgICAgICBpdGVtTmFtZVxyXG4gICAgICAgICAgICAgICAgICBzZWxsZXJOYW1lXHJcbiAgICAgICAgICAgICAgICAgIGNsaWVudEltcHJlc3Npb25GZWVkYmFja1VybHNcclxuICAgICAgICAgICAgICAgICAgY2xpY2tSZXR1cm5VcmxcclxuICAgICAgICAgICAgICAgICAgbG93UHJpY2VcclxuICAgICAgICAgICAgICAgICAgaW1wcmVzc2lvbkZlZWRiYWNrVXJsXHJcbiAgICAgICAgICAgICAgICAgIGNsaWNrRmVlZGJhY2tVcmxcclxuICAgICAgICAgICAgICAgICAgaW1hZ2VXaWR0aFxyXG4gICAgICAgICAgICAgICAgICBpbWFnZUhlaWdodFxyXG4gICAgICAgICAgICAgICAgICByYXRpbmdcclxuICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZSZXZpZXdzXHJcbiAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC4uLiBvbiBHb29nbGVEaXNwbGF5QWQge1xyXG4gICAgICAgICAgICAgICAgICBvdUFkSWRcclxuICAgICAgICAgICAgICAgICAgYWRNZWRpYXRpb25JZFxyXG4gICAgICAgICAgICAgICAgICBhZEV4cGVyaW1lbnRJZFxyXG4gICAgICAgICAgICAgICAgICBhZFJlcXVlc3RJZFxyXG4gICAgICAgICAgICAgICAgICBhZE5ldHdvcmtcclxuICAgICAgICAgICAgICAgICAgdGlsZVR5cGVcclxuICAgICAgICAgICAgICAgICAgdHlwZVxyXG4gICAgICAgICAgICAgICAgICBleHBlcmltZW50RGF0YUhhc2hcclxuICAgICAgICAgICAgICAgICAgZXJyb3JEcmF3YWJsZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdEltYWdlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25QYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGNsaWVudElkXHJcbiAgICAgICAgICAgICAgICAgIHNlYXJjaElkXHJcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXlBZFR5cGVcclxuICAgICAgICAgICAgICAgICAgY29udGVudFVybFxyXG4gICAgICAgICAgICAgICAgICBhZFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgIGFkSGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxTaXplc1xyXG4gICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAuLi4gb24gTG9jYWxEaXNwbGF5QWQge1xyXG4gICAgICAgICAgICAgICAgICBvdUFkSWRcclxuICAgICAgICAgICAgICAgICAgYWRNZWRpYXRpb25JZFxyXG4gICAgICAgICAgICAgICAgICBhZEV4cGVyaW1lbnRJZFxyXG4gICAgICAgICAgICAgICAgICBhZFJlcXVlc3RJZFxyXG4gICAgICAgICAgICAgICAgICBhZE5ldHdvcmtcclxuICAgICAgICAgICAgICAgICAgdGlsZVR5cGVcclxuICAgICAgICAgICAgICAgICAgdHlwZVxyXG4gICAgICAgICAgICAgICAgICBleHBlcmltZW50RGF0YUhhc2hcclxuICAgICAgICAgICAgICAgICAgc2VhcmNoSWRcclxuICAgICAgICAgICAgICAgICAgaW1hZ2VVcmxcclxuICAgICAgICAgICAgICAgICAgY29udGVudFVybFxyXG4gICAgICAgICAgICAgICAgICBpbXByZXNzaW9uRmVlZGJhY2tVcmxcclxuICAgICAgICAgICAgICAgICAgY2xpY2tGZWVkYmFja1VybFxyXG4gICAgICAgICAgICAgICAgICBoZWFkbGluZVxyXG4gICAgICAgICAgICAgICAgICBidXNpbmVzc05hbWVcclxuICAgICAgICAgICAgICAgICAgbG9jYXRpb25UZXh0XHJcbiAgICAgICAgICAgICAgICAgIGNhbGxUb0FjdGlvblxyXG4gICAgICAgICAgICAgICAgICBjYWxsVG9BY3Rpb25UeXBlXHJcbiAgICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYmFubmVyIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25CYW5uZXJUeXBlXHJcbiAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmZWVkT3B0aW9ucyB7XHJcbiAgICAgICAgICAgICAgLi4uIG9uIEZlZWRPcHRpb25MaXN0U2VsZWN0aW9uIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB0eXBlXHJcbiAgICAgICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgICAgICAgICBsYWJlbFxyXG4gICAgICAgICAgICAgICAgbGFiZWxTaG9ydFxyXG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbVxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyB7XHJcbiAgICAgICAgICAgICAgICAgIGxhYmVsXHJcbiAgICAgICAgICAgICAgICAgIGxhYmVsU2hvcnRcclxuICAgICAgICAgICAgICAgICAgc3ViTGFiZWxcclxuICAgICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgICAgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC4uLiBvbiBGZWVkT3B0aW9uTnVtZXJpY1JhbmdlIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB0eXBlXHJcbiAgICAgICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgICAgICAgICBsYWJlbFxyXG4gICAgICAgICAgICAgICAgbGFiZWxTaG9ydFxyXG4gICAgICAgICAgICAgICAgdW5pdHNcclxuICAgICAgICAgICAgICAgIGxvd2VyQm91bmRcclxuICAgICAgICAgICAgICAgIHVwcGVyQm91bmRcclxuICAgICAgICAgICAgICAgIGxlZnRRdWVyeVBhcmFtXHJcbiAgICAgICAgICAgICAgICByaWdodFF1ZXJ5UGFyYW1cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMge1xyXG4gICAgICAgICAgICAgICAgICBsYWJlbFxyXG4gICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWVcclxuICAgICAgICAgICAgICAgICAgdGV4dEhpbnRcclxuICAgICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmVlZFByZXNlbnRhdGlvbiB7XHJcbiAgICAgICAgICAgICAgY29sdW1uQ291bnRcclxuICAgICAgICAgICAgICBzaG93RGV0YWlsc09uVGlsZXNcclxuICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VhcmNoQWxlcnQge1xyXG4gICAgICAgICAgICAgIGFsZXJ0SWRcclxuICAgICAgICAgICAgICBfX3R5cGVuYW1lXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VhcmNoU3VnZ2VzdGlvbiB7XHJcbiAgICAgICAgICAgICAgb3JpZ2luYWxRdWVyeVxyXG4gICAgICAgICAgICAgIHN1Z2dlc3RlZFF1ZXJ5XHJcbiAgICAgICAgICAgICAgaXRlbVNvdXJjZVxyXG4gICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWFyY2hEYXRhIHtcclxuICAgICAgICAgICAgICBzZWFyY2hQZXJmb3JtZWRFdmVudFVuaXF1ZUlkXHJcbiAgICAgICAgICAgICAgc2VhcmNoU2Vzc2lvbklkXHJcbiAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcmNlZENhdGVnb3J5IHtcclxuICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXF1ZXN0VGltZU1ldGFkYXRhIHtcclxuICAgICAgICAgICAgICB0b3RhbFJlc29sdmVyVGltZVNlY29uZHNcclxuICAgICAgICAgICAgICBzZXJ2aWNlUmVxdWVzdFRpbWVTZWNvbmRzXHJcbiAgICAgICAgICAgICAgcmVzb2x2ZXJDb21wdXRhdGlvblRpbWVTZWNvbmRzXHJcbiAgICAgICAgICAgICAgX190eXBlbmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9fdHlwZW5hbWVcclxuICAgICAgICAgIH1cclxuICAgICAgICB9YCxcclxuICAgICAgICB2YXJpYWJsZXM6IHtcclxuICAgICAgICAgIHNlYXJjaFBhcmFtczogW1xyXG4gICAgICAgICAgICB7IGtleTogJ3EnLCB2YWx1ZToga2V5d29yZCB9LFxyXG4gICAgICAgICAgICB7IGtleTogJ3ppcGNvZGUnLCB2YWx1ZTogemlwY29kZSB9LFxyXG4gICAgICAgICAgICB7IGtleTogJ3BsYXRmb3JtJywgdmFsdWU6ICd3ZWInIH0sXHJcbiAgICAgICAgICAgIHsga2V5OiAnbGltaXQnLCB2YWx1ZTogJzEwMCcgfSxcclxuICAgICAgICAgICAgeyBrZXk6ICdzZWFyY2hTZXNzaW9uSWQnLCB2YWx1ZTogJzgyZWI0Zjg5LWE3NDUtNGNlZS1hNWMxLWJkMGNjYjczYTM0ZScgfSxcclxuICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoQXBpKGlUcmllcykge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChcImh0dHBzOi8vb2ZmZXJ1cC5jb20vYXBpL2dyYXBocWxcIiwge1xyXG4gICAgICAgICAgXCJoZWFkZXJzXCI6IHtcclxuICAgICAgICAgICAgXCJhY2NlcHRcIjogXCIqLypcIixcclxuICAgICAgICAgICAgXCJhY2NlcHQtbGFuZ3VhZ2VcIjogXCJlbi1VUyxlbjtxPTAuOVwiLFxyXG4gICAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgXCJvdS1icm93c2VyLXVzZXItYWdlbnRcIjogXCJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvOTIuMC40NTE1LjE1OSBTYWZhcmkvNTM3LjM2XCIsXHJcbiAgICAgICAgICAgIFwib3UtZXhwZXJpbWVudC1kYXRhXCI6IFwie1xcXCJkYXRhbW9kZWxfaWRcXFwiOlxcXCJleHBlcmltZW50bW9kZWwyNFxcXCJ9XCIsXHJcbiAgICAgICAgICAgIFwic2VjLWNoLXVhXCI6IFwiXFxcIkNocm9taXVtXFxcIjt2PVxcXCI5MlxcXCIsIFxcXCIgTm90IEE7QnJhbmRcXFwiO3Y9XFxcIjk5XFxcIiwgXFxcIkdvb2dsZSBDaHJvbWVcXFwiO3Y9XFxcIjkyXFxcIlwiLFxyXG4gICAgICAgICAgICBcInNlYy1jaC11YS1tb2JpbGVcIjogXCI/MFwiLFxyXG4gICAgICAgICAgICBcInNlYy1mZXRjaC1kZXN0XCI6IFwiZW1wdHlcIixcclxuICAgICAgICAgICAgXCJzZWMtZmV0Y2gtbW9kZVwiOiBcImNvcnNcIixcclxuICAgICAgICAgICAgXCJzZWMtZmV0Y2gtc2l0ZVwiOiBcInNhbWUtb3JpZ2luXCIsXHJcbiAgICAgICAgICAgIFwidXNlcmRhdGFcIjogXCJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKc2IyTmhkR2x2YmlJNkludGNJbU5wZEhsY0lqcGNJa3BoWTJ0emIyNTJhV3hzWlZ3aUxGd2ljM1JoZEdWY0lqcGNJa1pNWENJc1hDSjZhWEJEYjJSbFhDSTZYQ0l6TWpJd01sd2lMRndpYkc5dVoybDBkV1JsWENJNkxUZ3hMalkwT1RJc1hDSnNZWFJwZEhWa1pWd2lPak13TGpNeU9UaDlJbjAuOWRLc3dkUkZWNDI3UDNwdkFPZklhSDh5YlFHeDlUTjNFQkVGSDNOT1NDWVwiLFxyXG4gICAgICAgICAgICBcIngtb3UtZC10b2tlblwiOiBcIndlYi0wNTJkMDE4NWQ5OTFiNzNmN2ViN2JkNWZkYTc1YzBjZmJiZjJmOTViYjJmMzkyZjUyNjMwYTY0YlwiLFxyXG4gICAgICAgICAgICBcIngtb3UtZi10b2tlblwiOiBcIjc0ZTVlMWQ5OGVhN2VjOTI1ZDc1ZjAxNWExNmIzZjNjXCIsXHJcbiAgICAgICAgICAgIFwieC1yZXF1ZXN0LWlkXCI6IFwiNTJiNzRkY2UtNjMwNi00ZTM2LWE5OGEtODM3MjQ4ZWE0MTZiXCJcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBcInJlZmVycmVyXCI6IFwiaHR0cHM6Ly9vZmZlcnVwLmNvbS9zZWFyY2g/cT1pcGhvbmUrMTJcIixcclxuICAgICAgICAgIFwicmVmZXJyZXJQb2xpY3lcIjogXCJzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luXCIsXHJcbiAgICAgICAgICBcImJvZHlcIjogSlNPTi5zdHJpbmdpZnkocG9zdEJvZHkpLFxyXG4gICAgICAgICAgXCJtZXRob2RcIjogXCJQT1NUXCIsXHJcbiAgICAgICAgICBcIm1vZGVcIjogXCJjb3JzXCIsXHJcbiAgICAgICAgICBcImNyZWRlbnRpYWxzXCI6IFwiaW5jbHVkZVwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgIC50aGVuKGFzeW5jIHJlcyA9PiBoYW5kbGVGZXRjaEVycm9ycyhyZXMpKVxyXG4gICAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAgIC5jYXRjaChhc3luYyBlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQgKGZldGNoTGlzdGluZ3MpJywgZXJyLCBpVHJpZXMpO1xyXG4gICAgICAgICAgICBpZiAoaVRyaWVzICYmIGlUcmllcyA+IDYpIHJldHVybiAnJztcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDApO1xyXG4gICAgICAgICAgICBpZiAoIWlUcmllcykgaVRyaWVzID0gMDtcclxuICAgICAgICAgICAgaVRyaWVzICs9IDE7XHJcbiAgICAgICAgICAgIHJldHVybiBmZXRjaEFwaShpVHJpZXMpO1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gc2xlZXAoMTAwMDApLnRoZW4oKCkgPT4gYXBpT2ZmZXJVcCgpLmdldFVzZXJMaXN0aW5ncyh1c2VyaWQpKTtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIGFwaU9mZmVyVXAoKS5nZXRVc2VyTGlzdGluZ3ModXNlcmlkKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoQXBpKClcclxuICAgICAgICAudGhlbihhc3luYyB4ID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh4ICYmIHgubWF0Y2ggJiYgeC5tYXRjaCgvY3VycmVudGx5IHNlcnZlIGFyZWFzIG91dHNpZGUgb2YgdGhlIFVTL2kpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHtlcnJvcjogJ1Byb3h5IEZhaWxlZCcsIGVycm9yX2NvZGU6ICdwcm94eS1mYWlsZWQnfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4KTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgYXdhaXQgc2VuZERlYnVnTG9nKHsgZXJyb3I6ICdGYWlsZWQgdG8gcGFyc2UgZmV0Y2hsaXN0aW5ncyBhcGkgcmVzcG9uc2UuJywgeCB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICBpZiAocmVzICYmIHJlcy5lcnJvcl9jb2RlID09PSAncHJveHktZmFpbGVkJykge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Byb3h5IEZhaWxlZCAtIEdvdCBFcnJvcjogQ3VycmVudGx5IHNlcnZlIGFyZWFzIG91dHNpZGUgb2YgdGhlIFVTJyk7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChyZXMgJiYgcmVzLmRhdGEgJiYgcmVzLmRhdGEuc2VhcmNoICYmIHJlcy5kYXRhLnNlYXJjaC5mZWVkSXRlbXMpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSByZXMuZGF0YS5zZWFyY2guZmVlZEl0ZW1zLmZpbHRlciggaXRlbSA9PiAoaXRlbS50eXBlID09PSAnaXRlbScgJiYgaXRlbS50aWxlICYmIGl0ZW0udGlsZS50aXRsZSkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfSxcclxuICAgIGdldFVzZXJMaXN0aW5nczogYXN5bmMgZnVuY3Rpb24gKHVzZXJpZCkge1xyXG4gICAgICBhc3luYyBmdW5jdGlvbiBmZXRjaEFwaShpVHJpZXMpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goXCJodHRwczovL29mZmVydXAuY29tL2FwaS9ncmFwaHFsXCIsIHtcclxuICAgICAgICAgIFwiaGVhZGVyc1wiOiB7XHJcbiAgICAgICAgICAgIFwiYWNjZXB0XCI6IFwiKi8qXCIsXHJcbiAgICAgICAgICAgIFwiYWNjZXB0LWxhbmd1YWdlXCI6IFwiZW4tVVMsZW47cT0wLjlcIixcclxuICAgICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgIFwib3UtYnJvd3Nlci11c2VyLWFnZW50XCI6IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkzLjAuNDU3Ny42MyBTYWZhcmkvNTM3LjM2XCIsXHJcbiAgICAgICAgICAgIFwic2VjLWNoLXVhXCI6IFwiXFxcIkdvb2dsZSBDaHJvbWVcXFwiO3Y9XFxcIjkzXFxcIiwgXFxcIiBOb3Q7QSBCcmFuZFxcXCI7dj1cXFwiOTlcXFwiLCBcXFwiQ2hyb21pdW1cXFwiO3Y9XFxcIjkzXFxcIlwiLFxyXG4gICAgICAgICAgICBcInNlYy1jaC11YS1tb2JpbGVcIjogXCI/MFwiLFxyXG4gICAgICAgICAgICBcInNlYy1jaC11YS1wbGF0Zm9ybVwiOiBcIlxcXCJXaW5kb3dzXFxcIlwiLFxyXG4gICAgICAgICAgICBcInNlYy1mZXRjaC1kZXN0XCI6IFwiZW1wdHlcIixcclxuICAgICAgICAgICAgXCJzZWMtZmV0Y2gtbW9kZVwiOiBcImNvcnNcIixcclxuICAgICAgICAgICAgXCJzZWMtZmV0Y2gtc2l0ZVwiOiBcInNhbWUtb3JpZ2luXCIsXHJcbiAgICAgICAgICAgIFwidXNlcmRhdGFcIjogXCJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKc2IyTmhkR2x2YmlJNkludGNJbU5wZEhsY0lqcGNJa1p2Y25RZ1RHRjFaR1Z5WkdGc1pWd2lMRndpYzNSaGRHVmNJanBjSWtaTVhDSXNYQ0o2YVhCRGIyUmxYQ0k2WENJek16TXlNbHdpTEZ3aWJHOXVaMmwwZFdSbFhDSTZMVGd3TGpJM05qZ3NYQ0pzWVhScGRIVmtaVndpT2pJMkxqRTBPRFo5SW4wLlRqaGxjYTJpQnB4YzYtU0NRRkltWFdrczJHbkhqWG5jenJMUm5ERGJYT29cIixcclxuICAgICAgICAgICAgXCJ4LW91LWQtdG9rZW5cIjogXCJ3ZWItMDUyZDAxODVkOTkxYjczZjdlYjdiZDVmZGE3NWMwY2ZiYmYyZjk1YmIyZjM5MmY1MjYzMGE2NGJcIixcclxuICAgICAgICAgICAgXCJ4LW91LWYtdG9rZW5cIjogXCI3NGU1ZTFkOThlYTdlYzkyNWQ3NWYwMTVhMTZiM2YzY1wiLFxyXG4gICAgICAgICAgICBcIngtcmVxdWVzdC1pZFwiOiBcIjY5OTgxNWQ1LTRiMGMtNDhmMi1iODIxLTBmN2NlYjc5MzAxOVwiXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgXCJyZWZlcnJlclwiOiBcImh0dHBzOi8vb2ZmZXJ1cC5jb20vaXRlbS9kZXRhaWwvMTI2NzUxOTk0ND9xPWlwaG9uZSt4c1wiLFxyXG4gICAgICAgICAgXCJyZWZlcnJlclBvbGljeVwiOiBcInN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW5cIixcclxuICAgICAgICAgIFwiYm9keVwiOiBge1xcXCJvcGVyYXRpb25OYW1lXFxcIjpcXFwiR2V0UHJvZmlsZVVzZXJJdGVtc1xcXCIsXFxcInZhcmlhYmxlc1xcXCI6e1xcXCJ1c2VySWRcXFwiOlxcXCIke3VzZXJpZH1cXFwiLFxcXCJsaW1pdFxcXCI6MjAsXFxcInBhZ2VDdXJzb3JcXFwiOm51bGx9LFxcXCJxdWVyeVxcXCI6XFxcInF1ZXJ5IEdldFByb2ZpbGVVc2VySXRlbXMoJHVzZXJJZDogU3RyaW5nISwgJHBhZ2VDdXJzb3I6IFN0cmluZywgJGxpbWl0OiBJbnQpIHtcXFxcbiAgdXNlckxpc3RpbmdzKHVzZXJJZDogJHVzZXJJZCwgcGFnZUN1cnNvcjogJHBhZ2VDdXJzb3IsIGxpbWl0OiAkbGltaXQpIHtcXFxcbiAgICBwYWdlQ3Vyc29yXFxcXG4gICAgbGlzdGluZ3Mge1xcXFxuICAgICAgaWRcXFxcbiAgICAgIGxpc3RpbmdJZFxcXFxuICAgICAgdGl0bGVcXFxcbiAgICAgIGZ1bGZpbGxtZW50RGV0YWlscyB7XFxcXG4gIHNoaXBwaW5nRW5hYmxlZFxcXFxuICBzaGlwcGluZ1ByaWNlXFxcXG4gIHNlbGxlclBheXNTaGlwcGluZ1xcXFxuICBzaG93U2hpcHBpbmdJY29uSW5GZWVkXFxcXG4gIF9fdHlwZW5hbWVcXFxcbn0gcG9zdERhdGVcXFxcbiBkZXNjcmlwdGlvblxcXFxuIHByaWNlXFxcXG4gICAgICBzdGF0ZVxcXFxuICAgICAgbG9jYXRpb25EZXRhaWxzIHtcXFxcbiAgICAgICAgbG9jYXRpb25OYW1lXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIHBob3RvcyB7XFxcXG4gICAgICAgIHV1aWRcXFxcbiAgICAgICAgbGlzdCB7XFxcXG4gICAgICAgICAgdXJsXFxcXG4gICAgICAgICAgd2lkdGhcXFxcbiAgICAgICAgICBoZWlnaHRcXFxcbiAgICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgZGV0YWlsIHtcXFxcbiAgICAgICAgICB1cmxcXFxcbiAgICAgICAgICB3aWR0aFxcXFxuICAgICAgICAgIGhlaWdodFxcXFxuICAgICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICB2ZWhpY2xlQXR0cmlidXRlcyB7XFxcXG4gICAgICAgIHZlaGljbGVNaWxlc1xcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBvd25lciB7XFxcXG4gICAgICAgIHByb2ZpbGUge1xcXFxuICAgICAgICAgIGlzU3ViUHJpbWVEZWFsZXJcXFxcbiAgICAgICAgICBpc0F1dG9zRGVhbGVyXFxcXG4gICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG59XFxcXG5cXFwifWAsXHJcbiAgICAgICAgICBcIm1ldGhvZFwiOiBcIlBPU1RcIixcclxuICAgICAgICAgIFwibW9kZVwiOiBcImNvcnNcIixcclxuICAgICAgICAgIFwiY3JlZGVudGlhbHNcIjogXCJpbmNsdWRlXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAgICAgICAvLyAudGhlbih4ID0+IHguanNvbigpKVxyXG4gICAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAgIC5jYXRjaChhc3luYyBlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQgKGdldFVzZXJMaXN0aW5ncyknLCBlcnIsIGlUcmllcyk7XHJcbiAgICAgICAgICAgIGlmIChpVHJpZXMgJiYgaVRyaWVzID4gNikgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcCgxMDAwMCk7XHJcbiAgICAgICAgICAgIGlmICghaVRyaWVzKSBpVHJpZXMgPSAwO1xyXG4gICAgICAgICAgICBpVHJpZXMgKz0gMTtcclxuICAgICAgICAgICAgcmV0dXJuIGZldGNoQXBpKGlUcmllcyk7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBzbGVlcCgxMDAwMCkudGhlbigoKSA9PiBhcGlPZmZlclVwKCkuZ2V0VXNlckxpc3RpbmdzKHVzZXJpZCkpO1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gYXBpT2ZmZXJVcCgpLmdldFVzZXJMaXN0aW5ncyh1c2VyaWQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2hBcGkoKVxyXG4gICAgICAgIC50aGVuKGFzeW5jIHggPT4ge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHggJiYgeC5tYXRjaCAmJiB4Lm1hdGNoKC9jdXJyZW50bHkgc2VydmUgYXJlYXMgb3V0c2lkZSBvZiB0aGUgVVMvaSkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4ge2Vycm9yOiAnUHJveHkgRmFpbGVkJywgZXJyb3JfY29kZTogJ3Byb3h5LWZhaWxlZCd9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHgpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBhd2FpdCBzZW5kRGVidWdMb2coeyBlcnJvcjogJ0ZhaWxlZCB0byBwYXJzZSBnZXRVc2VyTGlzdGluZ3MgYXBpIHJlc3BvbnNlLicsIHggfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgaWYgKHJlcyAmJiByZXMuZXJyb3JfY29kZSA9PT0gJ3Byb3h5LWZhaWxlZCcpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdQcm94eSBGYWlsZWQgLSBHb3QgRXJyb3I6IEN1cnJlbnRseSBzZXJ2ZSBhcmVhcyBvdXRzaWRlIG9mIHRoZSBVUycpO1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocmVzICYmIHJlcy5kYXRhICYmIHJlcy5kYXRhLnVzZXJMaXN0aW5ncyAmJiByZXMuZGF0YS51c2VyTGlzdGluZ3MubGlzdGluZ3MpIHtcclxuICAgICAgICByZXR1cm4gcmVzLmRhdGEudXNlckxpc3RpbmdzLmxpc3RpbmdzLmZpbHRlcih4ID0+IHguc3RhdGUgPT09ICdMSVNURUQnKTtcclxuICAgICAgfVxyXG4gICAgICBfYXBpU2VuZEJ1Zyh7IGVycm9yOiAnRmFpbGVkIHRvIGdldCB1c2VyIGxpc3RpbmdzJywgdXNlcmlkLCBhcGlSZXNwb25zZTogcmVzIH0pO1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgfTtcclxufSIsImV4cG9ydCBmdW5jdGlvbiBpbnNlcnRWYXJpYWJsZShlKSB7XHJcbiAgY29uc3QgdGV4dCA9IGUudGFyZ2V0LnRleHRDb250ZW50O1xyXG4gIGlmICh3aW5kb3cubGFzdElucHV0SWQpIHtcclxuICAgIC8vIGlmICh0ZXh0ID09PSAnW3BhcnRuZXJfbGlua10nICYmIHdpbmRvdy5sYXN0SW5wdXRJZFswXSAhPT0gJ3BhcnRuZXJtZXNzYWdlJykgcmV0dXJuO1xyXG4gICAgY29uc3QgZVRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdpbmRvdy5sYXN0SW5wdXRJZFswXSk7XHJcbiAgICBsZXQgdmFsdWUgPSBlVGFyZ2V0LnZhbHVlO1xyXG4gICAgdmFsdWUgPSBbdmFsdWUuc2xpY2UoMCwgd2luZG93Lmxhc3RJbnB1dElkWzFdKSwgdGV4dCwgdmFsdWUuc2xpY2Uod2luZG93Lmxhc3RJbnB1dElkWzFdKV0uam9pbignJyk7XHJcbiAgICAvLyB2YWx1ZSArPSBgICR7dGV4dH1gO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3ZhbHVlJywgdmFsdWUpO1xyXG4gICAgZVRhcmdldC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgLy8gZVRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lzLWRpcnR5Jyk7XHJcbiAgICBlVGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnaXMtZm9jdXNlZCcpO1xyXG4gICAgZVRhcmdldC5mb2N1cygpO1xyXG4gICAgY29uc3QgbmV3Q3Vyc29yUG9zaXRpb24gPSB3aW5kb3cubGFzdElucHV0SWRbMV0gKyB0ZXh0Lmxlbmd0aDtcclxuICAgIGVUYXJnZXQuc2V0U2VsZWN0aW9uUmFuZ2UobmV3Q3Vyc29yUG9zaXRpb24sIG5ld0N1cnNvclBvc2l0aW9uKTtcclxuICB9XHJcbiAgLy8gY29uc29sZS5sb2coZS50YXJnZXQudGV4dENvbnRlbnQpO1xyXG59IiwiaW1wb3J0IHsgQ09OU09MRV9NRVNTQUdFIH0gZnJvbSBcIi4vZ2V0Q29uc29sZU1lc3NhZ2VzXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVyZ2VfbGlzdGluZ3NfcHJvbXB0KCkge1xyXG4gIGNvbnN0IGFuc3dlciA9IHByb21wdChgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHB1cmdlIHlvdXIgbGlzdGluZ3Mgc2tpcCBsaXN0PyBUeXBlIExJU1RJTkdTIHRvIGNvbmZpcm06YCk7XHJcbiAgaWYgKGFuc3dlciA9PT0gJ0xJU1RJTkdTJykge1xyXG4gICAgQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCAnUHVyZ2luZyBsaXN0aW5ncy4uLicpO1xyXG4gICAgcHVyZ2VfbGlzdGluZ3MoKTtcclxuICB9XHJcbn1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1cmdlX293bmVyc19wcm9tcHQoKSB7XHJcbiAgY29uc3QgYW5zd2VyID0gcHJvbXB0KGBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcHVyZ2UgeW91ciBvd25lcnMgc2tpcCBsaXN0PyBUeXBlIE9XTkVSUyB0byBjb25maXJtOmApO1xyXG4gIGlmIChhbnN3ZXIgPT09ICdPV05FUlMnKSB7XHJcbiAgICBDT05TT0xFX01FU1NBR0UoJ2N1c3RvbScsICdQdXJnaW5nIG93bmVycy4uLicpO1xyXG4gICAgcHVyZ2Vfb3duZXJzKCk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBwdXJnZV9saXN0aW5ncygpIHtcclxuICBjb25zdCBpc1NpbmdsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPWJvdF9tb2RlXTpjaGVja2VkJykudmFsdWUgPT09ICdzaW5nbGUnO1xyXG4gIGxldCBsaXN0TmFtZSA9ICdsaXN0aW5ncyc7IC8vIEhBRCBUTyBSRVVTRSBUTyBTS0lQIEVYSVNUSU5HIExJU1RJTkdTLlxyXG4gIGlmKCFpc1NpbmdsZSkge1xyXG4gICAgbGlzdE5hbWUgPSAnbGlzdGluZ3NfbXVsdGknO1xyXG4gIH1cclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly91cy1jZW50cmFsMS10cmFkZS1hcHBsZXMuY2xvdWRmdW5jdGlvbnMubmV0L29mZmVydXBib3Q/cHVyZ2U9MSZsaXN0bmFtZT0ke2xpc3ROYW1lfSZwYXJ0bmVyaWQ9JHt3aW5kb3cudGFQYXJ0bmVySWR9YCkudGhlbih4ID0+IHguanNvbigpKTtcclxuICAvLyBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo1MDAxL3RyYWRlLWFwcGxlcy91cy1jZW50cmFsMS9vZmZlcnVwYm90P3B1cmdlPTEmbGlzdG5hbWU9bGlzdGluZ3MmcGFydG5lcmlkPSR7d2luZG93LnRhUGFydG5lcklkfWApLnRoZW4oeCA9PiB4Lmpzb24oKSk7XHJcbiAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICBDT05TT0xFX01FU1NBR0UoJ2N1c3RvbScsICdMaXN0aW5ncyBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgcHVyZ2VkLicpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcHVyZ2UgbGlzdGluZ3MuJywgcmVzdWx0KTtcclxuICAgIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgJ0ZhaWxlZCB0byBwdXJnZSBsaXN0aW5ncy4nKTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHB1cmdlX293bmVycygpIHtcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly91cy1jZW50cmFsMS10cmFkZS1hcHBsZXMuY2xvdWRmdW5jdGlvbnMubmV0L29mZmVydXBib3Q/cHVyZ2U9MSZsaXN0bmFtZT11c2VycyZwYXJ0bmVyaWQ9JHt3aW5kb3cudGFQYXJ0bmVySWR9YCkudGhlbih4ID0+IHguanNvbigpKTtcclxuICAvLyBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo1MDAxL3RyYWRlLWFwcGxlcy91cy1jZW50cmFsMS9vZmZlcnVwYm90P3B1cmdlPTEmbGlzdG5hbWU9dXNlcnMmcGFydG5lcmlkPSR7d2luZG93LnRhUGFydG5lcklkfWApLnRoZW4oeCA9PiB4Lmpzb24oKSk7XHJcbiAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICBDT05TT0xFX01FU1NBR0UoJ2N1c3RvbScsICdPd25lcnMgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHB1cmdlZC4nKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHB1cmdlIG93bmVycy4nLCByZXN1bHQpO1xyXG4gICAgQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCAnRmFpbGVkIHRvIHB1cmdlIG93bmVycy4nKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBzZXRWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuL3NldFZpZXdlclN0YXRlXCI7XHJcbmltcG9ydCB7IHN0YXJ0IH0gZnJvbSBcIi4vc3RhcnRcIjtcclxuaW1wb3J0IHsgc3RhdHMgfSBmcm9tIFwiLi9zdGF0c1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVJbnB1dChlKSB7XHJcbiAgLy8gY29uc29sZS5sb2coJ3NhdmVJbnB1dCcsIGUpO1xyXG4gIGNvbnN0IGlkID0gZS50YXJnZXQuaWQ7XHJcbiAgaWYgKGlkKSB7XHJcbiAgICBpZiAoZS50YXJnZXQudHlwZSA9PT0gJ3JhZGlvJykge1xyXG4gICAgICBjb25zdCBuYW1lID0gZS50YXJnZXQubmFtZTtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYHJhZGlvXyR7bmFtZX1gLCBpZCk7XHJcbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LnR5cGUgPT09ICdjaGVja2JveCcpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYGlucHV0XyR7aWR9YCwgZS50YXJnZXQuY2hlY2tlZCk7XHJcbiAgICAgIGlmIChpZCA9PT0gJ3N3aXRjaC1ydW51bnRpbCcgJiYgZS50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgIHdpbmRvdy5pc1J1biA9IDE7XHJcbiAgICAgICAgc2V0Vmlld2VyU3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzYXZlSW5wdXQgcmVzZXQgc3RyZWFrJyk7XHJcbiAgICAgICAgLy8gc3RhdHMoKS5yZXNldEN1cnJlbnRTdHJlYWsoKTtcclxuICAgICAgICBzdGF0cygpLmFkZFJ1bigpO1xyXG4gICAgICAgIHNlbGZSZXN0YXJ0KCk7XHJcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gc2VsZlJlc3RhcnQoKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCBzdGFydCgpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3NhdmVJbnB1dCBDYXVnaHQgZXJyb3IhJywgZSk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoc2VsZlJlc3RhcnQsIDIwMDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2luZG93LmlzUnVuID0gMDtcclxuICAgICAgICBzZXRWaWV3ZXJTdGF0ZSh0cnVlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ1NhdmVkIGlucHV0OicsIGUudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYGlucHV0XyR7aWR9YCwgZS50YXJnZXQudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxufSIsImltcG9ydCB7IGluc2VydFZhcmlhYmxlIH0gZnJvbSBcIi4vaW5zZXJ0VmFyaWFibGVcIjtcclxuaW1wb3J0IHsgcHJlZml4IH0gZnJvbSBcIi4vcHJlZml4XCI7XHJcbmltcG9ydCB7IHB1cmdlX2xpc3RpbmdzX3Byb21wdCwgcHVyZ2Vfb3duZXJzX3Byb21wdCB9IGZyb20gXCIuL3B1cmdlX2xpc3RpbmdzXCI7XHJcbmltcG9ydCB7IHJlcG9ydGJ1ZyB9IGZyb20gXCIuL3JlcG9ydGJ1Z1wiO1xyXG5pbXBvcnQgeyBzYXZlSW5wdXQgfSBmcm9tIFwiLi9zYXZlSW5wdXRcIjtcclxuaW1wb3J0IHsgdXBkYXRlSW5wdXRzU3RhdGVzIH0gZnJvbSBcIi4vdXBkYXRlSW5wdXRzU3RhdGVzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YSAjdmlld2VyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB2aWV3X3BhZ2UxKTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI29mZmVyYm90JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB2aWV3X3BhZ2UyKTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2hvd2JvdHVpJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93Qm90VWkpO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YSAjcmVwb3J0YnVnMicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVwb3J0YnVnKTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm91bmR1cGRvd24nKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB3aW5kb3cucHJlZml4KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm91bmR1cGRvd24nKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhY2NlcHRhbmNlZGVkdWN0aW9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgcHJlZml4KTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWNjZXB0YW5jZWRlZHVjdGlvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0cmVhaycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0cmVha3RpbWVvdXQnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXhjb25jdXJyZW50Y29udmVyc2F0aW9ucycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2tleXdvcmRzJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja2V5d29yZHMnKS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZSA9PiB7IHdpbmRvdy5sYXN0SW5wdXRJZCA9IFtlLnRhcmdldC5pZCwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnRdOyB9KTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjemlwY29kZXMnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN6aXBjb2RlcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN6aXBjb2RlcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NraXB3b3JkcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NraXB3b3JkcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvcGVuZXJtZXNzYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb3BlbmVybWVzc2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYm1lc3NhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYm1lc3NhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZSA9PiB7IHdpbmRvdy5sYXN0SW5wdXRJZCA9IFtlLnRhcmdldC5pZCwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnRdOyB9KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV0d29ya21lc3NhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXR3b3JrbWVzc2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvZmZlcm1lc3NhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvZmZlcm1lc3NhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZSA9PiB7IHdpbmRvdy5sYXN0SW5wdXRJZCA9IFtlLnRhcmdldC5pZCwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnRdOyB9KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG93YmFsbF9tZXNzYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG93YmFsbF9tZXNzYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4geyB3aW5kb3cubGFzdElucHV0SWQgPSBbZS50YXJnZXQuaWQsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XTsgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3F1ZXN0aW9uXzEnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdWVzdGlvbl8xJykuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4geyB3aW5kb3cubGFzdElucHV0SWQgPSBbZS50YXJnZXQuaWQsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XTsgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3F1ZXN0aW9uXzInKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdWVzdGlvbl8yJykuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4geyB3aW5kb3cubGFzdElucHV0SWQgPSBbZS50YXJnZXQuaWQsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XTsgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3F1ZXN0aW9uXzMnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdWVzdGlvbl8zJykuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4geyB3aW5kb3cubGFzdElucHV0SWQgPSBbZS50YXJnZXQuaWQsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XTsgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3F1ZXN0aW9uXzQnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdWVzdGlvbl80JykuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4geyB3aW5kb3cubGFzdElucHV0SWQgPSBbZS50YXJnZXQuaWQsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XTsgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3RpbmdfbWluX3ByaWNlJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlzdGluZ19taW5fcHJpY2UnKS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZSA9PiB7IHdpbmRvdy5sYXN0SW5wdXRJZCA9IFtlLnRhcmdldC5pZCwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnRdOyB9KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlzdGluZ19tYXhfcHJpY2UnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaXN0aW5nX21heF9wcmljZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbG9zaW5nbWVzc2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI293bmVyX21pbl9saXN0cycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI293bmVyX21pbl9saXN0cycpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvd25lcl9tYXhfbGlzdHMnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvd25lcl9tYXhfbGlzdHMnKS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZSA9PiB7IHdpbmRvdy5sYXN0SW5wdXRJZCA9IFtlLnRhcmdldC5pZCwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnRdOyB9KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlzdGluZ19wcmljZV9kZWx0YScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3RpbmdfcHJpY2VfZGVsdGEnKS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZSA9PiB7IHdpbmRvdy5sYXN0SW5wdXRJZCA9IFtlLnRhcmdldC5pZCwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnRdOyB9KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3VzdG9tX3ByaWNlX2RlbHRhJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3VzdG9tX3ByaWNlX2RlbHRhJykuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4geyB3aW5kb3cubGFzdElucHV0SWQgPSBbZS50YXJnZXQuaWQsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XTsgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3RpbmdfbWF4X2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3RpbmdfbWF4X2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzd2l0Y2gtY29udGludWVfYWZ0ZXJfc3RvcmFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N3aXRjaC1jb250aW51ZV9hZnRlcl9uZXR3b3JrJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xvc2luZ21lc3NhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbG9zaW5nbWVzc2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhY2NlcHRtZXNzYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWNjZXB0bWVzc2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZWV0dXBtZXNzYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVldHVwbWVzc2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IHsgd2luZG93Lmxhc3RJbnB1dElkID0gW2UudGFyZ2V0LmlkLCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydF07IH0pO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYXJ0bmVybWVzc2FnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhcnRuZXJtZXNzYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4geyB3aW5kb3cubGFzdElucHV0SWQgPSBbZS50YXJnZXQuaWQsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XTsgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3J1bmZyb20nKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNydW51bnRpbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N3aXRjaC1za2lwc2hpcHBpbmdlbmFibGVkJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3dpdGNoLXNlbmRwYXJ0bmVybWVzc2FnZXMnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzd2l0Y2gtZGVsZXRlYWZ0ZXJzZW5kJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3dpdGNoLXJ1bnVudGlsJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2F2ZUlucHV0KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3dpdGNoLXJ1bnVudGlsJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgdXBkYXRlSW5wdXRzU3RhdGVzKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3dpdGNoLXJ1bnVudGlsJykuY2hlY2tlZCk7XHJcbiAgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3RhIC52YXJpYWJsZXMgLnZhcmlhYmxlJykuZm9yRWFjaChlID0+IGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpbnNlcnRWYXJpYWJsZSkpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YSAjdGVzdF90ZW1wbGF0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgd2luZG93LnRlc3RUZW1wbGF0ZXMpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YSAjcmVzdG9yZV9kZWZhdWx0cycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgd2luZG93LnJlc3RvcmVEZWZhdWx0cyk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3B1cmdlX2xpc3RpbmdzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwdXJnZV9saXN0aW5nc19wcm9tcHQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwdXJnZV9vd25lcnMnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHB1cmdlX293bmVyc19wcm9tcHQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtb2RlX3NpbmdsZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVJbnB1dCk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21vZGVfbXVsdGknKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlSW5wdXQpO1xyXG5cclxuICBcclxuICBcclxuICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAvLyBsb2FkVmFyaWFudFByZXNldCgpO1xyXG4gIC8vIHNldEludGVydmFsKCgpID0+IHtcclxuICAvLyAgIGxvYWRWYXJpYW50UHJlc2V0KCk7XHJcbiAgLy8gfSwgMjAwMCk7XHJcbn0iLCJleHBvcnQgY29uc3Qgd2FpdElmU3BhbURldGVjdGVkID0gNjAgKiAyNDsgLy8gMjQgaG91cnMuXHJcbmV4cG9ydCBjb25zdCBsaXN0aW5nc1BlcktleXdvcmQgPSA2MDtcclxuZXhwb3J0IGNvbnN0IGludGVydmFsQ29udmVyc2F0aW9uc0NoZWNrID0gMTA7IC8vIHNlY29uZHMuXHJcbmV4cG9ydCBjb25zdCBtYXhJdGVtc1RvT2ZmZXJQYXJ0bmVyID0gMztcclxuZXhwb3J0IGNvbnN0IHNob3dBbGVydHMgPSBmYWxzZTtcclxuZXhwb3J0IGNvbnN0IGRlYnVnX2Rpc2FibGVNZXNzYWdlcyA9IGZhbHNlO1xyXG5leHBvcnQgY29uc3QgZGlzYWJsZUxvZ3MgPSBmYWxzZTtcclxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VEZWxheSA9IFszLCAxMF07XHJcbmV4cG9ydCBjb25zdCBkZWxheVBlclhNZXNzYWdlcyA9IDEwOyAvLyBtaW51dGVzXHJcbmV4cG9ydCBjb25zdCB1c2VyRGVsYXkgPSBbMTAwLCAzMDBdOyIsImltcG9ydCB7IGhhbmRsZUZldGNoRXJyb3JzIH0gZnJvbSBcIi4vaGFuZGxlRmV0Y2hFcnJvcnNcIjtcclxuaW1wb3J0IHNlbmREZWJ1Z0xvZyBmcm9tIFwiLi9zZW5kRGVidWdMb2dcIjtcclxuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiLi9zbGVlcFwiO1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0geyp9IGlkIFRoZSBlbmNyeXB0ZWQgaWRcclxuICogQHBhcmFtIHsqfSBpc1JldHJ5XHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoTGlzdGluZ0RldGFpbChpZCwgaXNSZXRyeSkge1xyXG4gIGlmIChpZCkgaWQgPSBTdHJpbmcoaWQpO1xyXG4gIGxldCBib2R5ID0gYHtcIm9wZXJhdGlvbk5hbWVcIjpcIkdldExpc3RpbmdEZXRhaWxCeUxpc3RpbmdJZFwiLFwidmFyaWFibGVzXCI6e1wiaXNMb2dnZWRJblwiOnRydWUsXCJsaXN0aW5nSWRcIjpcIiR7aWR9XCJ9LFwicXVlcnlcIjpcInF1ZXJ5IEdldExpc3RpbmdEZXRhaWxCeUxpc3RpbmdJZCgkbGlzdGluZ0lkOiBJRCEsICRpc0xvZ2dlZEluOiBCb29sZWFuID0gZmFsc2UsICRkZXZpY2VMb2NhdGlvbjogRGV2aWNlTG9jYXRpb24pIHtcXFxcbiAgbGlzdGluZyhsaXN0aW5nSWQ6ICRsaXN0aW5nSWQsIGRldmljZUxvY2F0aW9uOiAkZGV2aWNlTG9jYXRpb24pIHtcXFxcbiAgICAuLi5saXN0aW5nRGV0YWlsXFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG59XFxcXG5cXFxcbmZyYWdtZW50IGxpc3RpbmdEZXRhaWwgb24gTGlzdGluZyB7XFxcXG4gIGlkXFxcXG4gIGJhZGdlc1xcXFxuICBjb25kaXRpb25cXFxcbiAgZGVzY3JpcHRpb25cXFxcbiAgZGlzY3Vzc2lvbkNvdW50XFxcXG4gIGRpc3RhbmNlIHtcXFxcbiAgICB1bml0XFxcXG4gICAgdmFsdWVcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgZXh0cmFjdGVkQXR0cmlidXRlcyB7XFxcXG4gICAgYXR0cmlidXRlTmFtZVxcXFxuICAgIGF0dHJpYnV0ZVZhbHVlXFxcXG4gICAgYXR0cmlidXRlVmFsdWVTb3VyY2VcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgZnVsZmlsbG1lbnREZXRhaWxzIHtcXFxcbiAgICBidXlJdE5vd0VuYWJsZWRcXFxcbiAgICBjYW5TaGlwVG9CdXllclxcXFxuICAgIGVzdGltYXRlZERlbGl2ZXJ5RGF0ZUVuZFxcXFxuICAgIGVzdGltYXRlZERlbGl2ZXJ5RGF0ZVN0YXJ0XFxcXG4gICAgbG9jYWxQaWNrdXBFbmFibGVkXFxcXG4gICAgc2VsbGVyUGF5c1NoaXBwaW5nXFxcXG4gICAgc2hpcHBpbmdFbmFibGVkXFxcXG4gICAgc2hpcHBpbmdQYXJjZWxJZFxcXFxuICAgIHNoaXBwaW5nUHJpY2VcXFxcbiAgICBzaG93QXNTaGlwcGVkXFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIGlzRmlybU9uUHJpY2VcXFxcbiAgaXNMb2NhbFxcXFxuICBpc01lcmNoYW50SXRlbVxcXFxuICBsYXN0RWRpdGVkXFxcXG4gIGxpc3RpbmdDYXRlZ29yeSB7XFxcXG4gICAgY2F0ZWdvcnlBdHRyaWJ1dGVNYXAge1xcXFxuICAgICAgYXR0cmlidXRlTmFtZVxcXFxuICAgICAgYXR0cmlidXRlUHJpb3JpdHlcXFxcbiAgICAgIGF0dHJpYnV0ZVVJTGFiZWxcXFxcbiAgICAgIGF0dHJpYnV0ZVZhbHVlXFxcXG4gICAgICBhdHRyaWJ1dGVWYWx1ZVNvdXJjZVxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBjYXRlZ29yeVYyIHtcXFxcbiAgICAgIGlkXFxcXG4gICAgICBsMUlkXFxcXG4gICAgICBsMU5hbWVcXFxcbiAgICAgIGwySWRcXFxcbiAgICAgIGwyTmFtZVxcXFxuICAgICAgbDNJZFxcXFxuICAgICAgbDNOYW1lXFxcXG4gICAgICBuYW1lXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBsaXN0aW5nRGV0YWlsQWRzIHtcXFxcbiAgICBhZFRpbGVzIHtcXFxcbiAgICAgIC4uLmFkc0dvb2dsZURpc3BsYXlBZFxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBwbGFjZW1lbnRzIHtcXFxcbiAgICAgIGFkVGlsZUNvbmZpZ3Mge1xcXFxuICAgICAgICBhZFNpemUge1xcXFxuICAgICAgICAgIGFkZGl0aW9uYWxTaXplc1xcXFxuICAgICAgICAgIGhlaWdodFxcXFxuICAgICAgICAgIHdpZHRoXFxcXG4gICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGRpc3BsYXlUeXBlXFxcXG4gICAgICAgIHJlbmRlckxvY2F0aW9uXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIGFkVHlwZVxcXFxuICAgICAgcXVhbnRpdHlcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIGxpc3RpbmdJZFxcXFxuICBsb2NhdGlvbkRldGFpbHMge1xcXFxuICAgIGRpc3RhbmNlXFxcXG4gICAgbGF0aXR1ZGVcXFxcbiAgICBsb2NhdGlvbk5hbWVcXFxcbiAgICBsb25naXR1ZGVcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgbWVyY2hhbnRJZFxcXFxuICBtZXJjaGFudFByb2ZpbGUge1xcXFxuICAgIGF2YXRhciB7XFxcXG4gICAgICBzbWFsbCB7XFxcXG4gICAgICAgIHVybFxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIGRlc2NyaXB0aW9uXFxcXG4gICAgZW1haWxBZGRyZXNzXFxcXG4gICAgbGVnYWN5VXNlck93bmVyXFxcXG4gICAgcGhvbmVOdW1iZXJcXFxcbiAgICBwdWJsaWNMb2NhdGlvbk5hbWVcXFxcbiAgICBzdG9yZU5hbWVcXFxcbiAgICByYXRpbmdTdW1tYXJ5IHtcXFxcbiAgICAgIGF2ZXJhZ2VcXFxcbiAgICAgIGNvdW50XFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBvcmlnaW5hbFByaWNlXFxcXG4gIG9yaWdpbmFsVGl0bGVcXFxcbiAgb3duZXIge1xcXFxuICAgIGlkXFxcXG4gICAgcHJvZmlsZSB7XFxcXG4gICAgICBhdmF0YXJzIHtcXFxcbiAgICAgICAgc3F1YXJlSW1hZ2VcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgYzJjUGhvbmVOdW1iZXIge1xcXFxuICAgICAgICBjb3VudHJ5Q29kZVxcXFxuICAgICAgICBuYXRpb25hbE51bWJlclxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBjbGlja1RvQ2FsbEVuYWJsZWRcXFxcbiAgICAgIGRhdGVKb2luZWRcXFxcbiAgICAgIGlzQXV0b3NEZWFsZXJcXFxcbiAgICAgIGlzU3ViUHJpbWVEZWFsZXJcXFxcbiAgICAgIGlzVHJ1eW91VmVyaWZpZWRcXFxcbiAgICAgIG5hbWVcXFxcbiAgICAgIG5vdEFjdGl2ZVxcXFxuICAgICAgb3BlbmluZ0hvdXJzIHtcXFxcbiAgICAgICAgZGF5XFxcXG4gICAgICAgIGhvdXJzXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIHBob25lTnVtYmVyXFxcXG4gICAgICBwdWJsaWNMb2NhdGlvbiB7XFxcXG4gICAgICAgIGZvcm1hdHRlZEFkZHJlc3NcXFxcbiAgICAgICAgbGF0aXR1ZGVcXFxcbiAgICAgICAgbG9uZ2l0dWRlXFxcXG4gICAgICAgIG5hbWVcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgcHVibGljTG9jYXRpb25OYW1lXFxcXG4gICAgICBpdGVtc1B1cmNoYXNlZFxcXFxuICAgICAgaXRlbXNTb2xkXFxcXG4gICAgICByZXNwb25zZVRpbWVcXFxcbiAgICAgIHJhdGluZ1N1bW1hcnkge1xcXFxuICAgICAgICBhdmVyYWdlXFxcXG4gICAgICAgIGNvdW50XFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIHJldmlld3Mge1xcXFxuICAgICAgICBhdHRyaWJ1dGlvbkljb25cXFxcbiAgICAgICAgYXZlcmFnZVxcXFxuICAgICAgICByZWFkTW9yZVVybFxcXFxuICAgICAgICB0aXRsZVxcXFxuICAgICAgICB1c2VyUmV2aWV3cyB7XFxcXG4gICAgICAgICAgcHJvZmlsZVBob3RvVXJsXFxcXG4gICAgICAgICAgdGV4dFxcXFxuICAgICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICB3ZWJzaXRlTGlua1xcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgb3duZXJJZFxcXFxuICBwaG90b3Mge1xcXFxuICAgIHV1aWRcXFxcbiAgICBkZXRhaWwge1xcXFxuICAgICAgaGVpZ2h0XFxcXG4gICAgICB1cmxcXFxcbiAgICAgIHdpZHRoXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIGRldGFpbEZ1bGwge1xcXFxuICAgICAgdXJsXFxcXG4gICAgICB3aWR0aFxcXFxuICAgICAgaGVpZ2h0XFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIGRldGFpbFNxdWFyZSB7XFxcXG4gICAgICBoZWlnaHRcXFxcbiAgICAgIHVybFxcXFxuICAgICAgd2lkdGhcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgbGlzdCB7XFxcXG4gICAgICBoZWlnaHRcXFxcbiAgICAgIHVybFxcXFxuICAgICAgd2lkdGhcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgbWVkaXVtIHtcXFxcbiAgICAgIGhlaWdodFxcXFxuICAgICAgdXJsXFxcXG4gICAgICB3aWR0aFxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBzcXVhcmVNZWRpdW0ge1xcXFxuICAgICAgaGVpZ2h0XFxcXG4gICAgICB1cmxcXFxcbiAgICAgIHdpZHRoXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBwb3N0RGF0ZVxcXFxuICBwcmljZVxcXFxuICBxdWFudGl0eVxcXFxuICBzYXZlZCBAaW5jbHVkZShpZjogJGlzTG9nZ2VkSW4pXFxcXG4gIHNoaXBwaW5nT3B0aW9ucyB7XFxcXG4gICAgbWF4SGFuZGxpbmdEYXlzXFxcXG4gICAgbWF4U2hpcHBpbmdEYXlzXFxcXG4gICAgbWluSGFuZGxpbmdEYXlzXFxcXG4gICAgbWluU2hpcHBpbmdEYXlzXFxcXG4gICAgbmFtZVxcXFxuICAgIHByaWNlXFxcXG4gICAgcHJpb3JpdHlcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgc2hpcHBpbmdSYXRlIHtcXFxcbiAgICBtYXhEZWxpdmVyeURheXNcXFxcbiAgICBtYXhFc3RpbWF0ZWREZWxpdmVyeURhdGVcXFxcbiAgICBtaW5EZWxpdmVyeURheXNcXFxcbiAgICBtaW5Fc3RpbWF0ZWREZWxpdmVyeURhdGVcXFxcbiAgICBwcmljZVxcXFxuICAgIHByaW9yaXR5XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIHNrdVxcXFxuICBzdGF0ZVxcXFxuICB0aXRsZVxcXFxuICB2ZWhpY2xlQXR0cmlidXRlcyB7XFxcXG4gICAgdmVoaWNsZUJvZHlcXFxcbiAgICB2ZWhpY2xlQ2l0eU1wZ1xcXFxuICAgIHZlaGljbGVDb2xvclxcXFxuICAgIHZlaGljbGVEcml2ZVRyYWluXFxcXG4gICAgdmVoaWNsZURyaXZlVHJhaW5DbGVhblxcXFxuICAgIHZlaGljbGVFbmdpbmVDeWxpbmRlcnNcXFxcbiAgICB2ZWhpY2xlRXBhQ2l0eVxcXFxuICAgIHZlaGljbGVFcGFIaWdod2F5XFxcXG4gICAgdmVoaWNsZUV4dGVybmFsSGlzdG9yeVJlcG9ydCB7XFxcXG4gICAgICBlcG9jaERhdGVcXFxcbiAgICAgIGltYWdlVXJsXFxcXG4gICAgICBpc3N1ZXNcXFxcbiAgICAgIHByaWNlIHtcXFxcbiAgICAgICAgbWljcm9Vbml0c1xcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBwcm92aWRlck5hbWVcXFxcbiAgICAgIHJlcG9ydFVybFxcXFxuICAgICAgc291cmNlXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIHZlaGljbGVGdWVsVHlwZVxcXFxuICAgIHZlaGljbGVGdW5kYW1lbnRhbHNcXFxcbiAgICB2ZWhpY2xlSGlnaHdheU1wZ1xcXFxuICAgIHZlaGljbGVJZFxcXFxuICAgIHZlaGljbGVNYWtlXFxcXG4gICAgdmVoaWNsZU1pbGVzXFxcXG4gICAgdmVoaWNsZU1vZGVsXFxcXG4gICAgdmVoaWNsZVN0eWxlRGlzcGxheVxcXFxuICAgIHZlaGljbGVUaXRsZVN0YXR1c1xcXFxuICAgIHZlaGljbGVUcmFuc21pc3Npb25cXFxcbiAgICB2ZWhpY2xlVHJhbnNtaXNzaW9uQ2xlYW5cXFxcbiAgICB2ZWhpY2xlVHJpbVxcXFxuICAgIHZlaGljbGVWaW5cXFxcbiAgICB2ZWhpY2xlWWVhclxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBfX3R5cGVuYW1lXFxcXG59XFxcXG5cXFxcbmZyYWdtZW50IGFkc0dvb2dsZURpc3BsYXlBZCBvbiBHb29nbGVEaXNwbGF5QWQge1xcXFxuICAuLi5iYXNlR29vZ2xlRGlzcGxheUFkXFxcXG4gIHJlbmRlckxvY2F0aW9uXFxcXG4gIHRpbGVUeXBlXFxcXG4gIF9fdHlwZW5hbWVcXFxcbn1cXFxcblxcXFxuZnJhZ21lbnQgYmFzZUdvb2dsZURpc3BsYXlBZCBvbiBHb29nbGVEaXNwbGF5QWQge1xcXFxuICBvdUFkSWRcXFxcbiAgYWRFeHBlcmltZW50SWRcXFxcbiAgYWRIZWlnaHRcXFxcbiAgYWRNZWRpYXRpb25JZFxcXFxuICBhZE5ldHdvcmtcXFxcbiAgYWRSZXF1ZXN0SWRcXFxcbiAgYWRXaWR0aFxcXFxuICBjbGllbnRJZFxcXFxuICBjb250ZW50VXJsXFxcXG4gIGRpc3BsYXlBZFR5cGVcXFxcbiAgZXJyb3JEcmF3YWJsZSB7XFxcXG4gICAgYWN0aW9uUGF0aFxcXFxuICAgIGxpc3RJbWFnZSB7XFxcXG4gICAgICBoZWlnaHRcXFxcbiAgICAgIHVybFxcXFxuICAgICAgd2lkdGhcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIGV4cGVyaW1lbnREYXRhSGFzaFxcXFxuICBwZXJzb25hbGl6YXRpb25Qcm9wZXJ0aWVzIHtcXFxcbiAgICBrZXlcXFxcbiAgICB2YWx1ZXNcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgdHlwZVxcXFxuICBfX3R5cGVuYW1lXFxcXG59XFxcXG5cIn1gO1xyXG4gIGlmIChpZCAmJiBpZC5pbmNsdWRlcyAmJiAhaWQuaW5jbHVkZXMoJy0nKSkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0ZldGNoZWQgbGlzdGluZyBkZXRhaWxzIHVzaW5nIG5vbiBlY3J5cHRlZCBpZCcsIGlkKTtcclxuICAgIGJvZHkgPSBge1wib3BlcmF0aW9uTmFtZVwiOlwiR2V0TGlzdGluZ0RldGFpbEJ5SXRlbUlkXCIsXCJ2YXJpYWJsZXNcIjp7XCJpc0xvZ2dlZEluXCI6ZmFsc2UsXCJpdGVtSWRcIjoke2lkfSxcInZlaGljbGVIaXN0b3J5RXhwZXJpbWVudFwiOlwidmluYXVkaXRfMVwifSxcInF1ZXJ5XCI6XCJxdWVyeSBHZXRMaXN0aW5nRGV0YWlsQnlJdGVtSWQoJGl0ZW1JZDogSW50ISwgJHZlaGljbGVIaXN0b3J5RXhwZXJpbWVudDogU3RyaW5nLCAkaXNMb2dnZWRJbjogQm9vbGVhbiA9IGZhbHNlLCAkZGV2aWNlTG9jYXRpb246IERldmljZUxvY2F0aW9uKSB7XFxcXG4gIGxpc3RpbmcoXFxcXG4gICAgaXRlbUlkOiAkaXRlbUlkXFxcXG4gICAgdmVoaWNsZUhpc3RvcnlFeHBlcmltZW50OiAkdmVoaWNsZUhpc3RvcnlFeHBlcmltZW50XFxcXG4gICAgZGV2aWNlTG9jYXRpb246ICRkZXZpY2VMb2NhdGlvblxcXFxuICApIHtcXFxcbiAgICAuLi5saXN0aW5nRGV0YWlsXFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG59XFxcXG5cXFxcbmZyYWdtZW50IGxpc3RpbmdEZXRhaWwgb24gTGlzdGluZyB7XFxcXG4gIGlkXFxcXG4gIGJhZGdlc1xcXFxuICBjb25kaXRpb25cXFxcbiAgZGVzY3JpcHRpb25cXFxcbiAgZGlzY3Vzc2lvbkNvdW50XFxcXG4gIGRpc3RhbmNlIHtcXFxcbiAgICB1bml0XFxcXG4gICAgdmFsdWVcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgZXh0cmFjdGVkQXR0cmlidXRlcyB7XFxcXG4gICAgYXR0cmlidXRlTmFtZVxcXFxuICAgIGF0dHJpYnV0ZVZhbHVlXFxcXG4gICAgYXR0cmlidXRlVmFsdWVTb3VyY2VcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgZnVsZmlsbG1lbnREZXRhaWxzIHtcXFxcbiAgICBidXlJdE5vd0VuYWJsZWRcXFxcbiAgICBjYW5TaGlwVG9CdXllclxcXFxuICAgIGVzdGltYXRlZERlbGl2ZXJ5RGF0ZUVuZFxcXFxuICAgIGVzdGltYXRlZERlbGl2ZXJ5RGF0ZVN0YXJ0XFxcXG4gICAgbG9jYWxQaWNrdXBFbmFibGVkXFxcXG4gICAgc2VsbGVyUGF5c1NoaXBwaW5nXFxcXG4gICAgc2hpcHBpbmdFbmFibGVkXFxcXG4gICAgc2hpcHBpbmdQYXJjZWxJZFxcXFxuICAgIHNoaXBwaW5nUHJpY2VcXFxcbiAgICBzaG93QXNTaGlwcGVkXFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIGlzRmlybU9uUHJpY2VcXFxcbiAgaXNMb2NhbFxcXFxuICBpc01lcmNoYW50SXRlbVxcXFxuICBsYXN0RWRpdGVkXFxcXG4gIGxpc3RpbmdDYXRlZ29yeSB7XFxcXG4gICAgY2F0ZWdvcnlBdHRyaWJ1dGVNYXAge1xcXFxuICAgICAgYXR0cmlidXRlTmFtZVxcXFxuICAgICAgYXR0cmlidXRlUHJpb3JpdHlcXFxcbiAgICAgIGF0dHJpYnV0ZVVJTGFiZWxcXFxcbiAgICAgIGF0dHJpYnV0ZVZhbHVlXFxcXG4gICAgICBhdHRyaWJ1dGVWYWx1ZVNvdXJjZVxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBjYXRlZ29yeVYyIHtcXFxcbiAgICAgIGlkXFxcXG4gICAgICBsMUlkXFxcXG4gICAgICBsMU5hbWVcXFxcbiAgICAgIGwySWRcXFxcbiAgICAgIGwyTmFtZVxcXFxuICAgICAgbDNJZFxcXFxuICAgICAgbDNOYW1lXFxcXG4gICAgICBuYW1lXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBsaXN0aW5nRGV0YWlsQWRzIHtcXFxcbiAgICBhZFRpbGVzIHtcXFxcbiAgICAgIC4uLmFkc0dvb2dsZURpc3BsYXlBZFxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBwbGFjZW1lbnRzIHtcXFxcbiAgICAgIGFkVGlsZUNvbmZpZ3Mge1xcXFxuICAgICAgICBhZFNpemUge1xcXFxuICAgICAgICAgIGFkZGl0aW9uYWxTaXplc1xcXFxuICAgICAgICAgIGhlaWdodFxcXFxuICAgICAgICAgIHdpZHRoXFxcXG4gICAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGRpc3BsYXlUeXBlXFxcXG4gICAgICAgIHJlbmRlckxvY2F0aW9uXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIGFkVHlwZVxcXFxuICAgICAgcXVhbnRpdHlcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIGxpc3RpbmdJZFxcXFxuICBsb2NhdGlvbkRldGFpbHMge1xcXFxuICAgIGRpc3RhbmNlXFxcXG4gICAgbGF0aXR1ZGVcXFxcbiAgICBsb2NhdGlvbk5hbWVcXFxcbiAgICBsb25naXR1ZGVcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgbWVyY2hhbnRJZFxcXFxuICBtZXJjaGFudFByb2ZpbGUge1xcXFxuICAgIGF2YXRhciB7XFxcXG4gICAgICBzbWFsbCB7XFxcXG4gICAgICAgIHVybFxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIGRlc2NyaXB0aW9uXFxcXG4gICAgZW1haWxBZGRyZXNzXFxcXG4gICAgbGVnYWN5VXNlck93bmVyXFxcXG4gICAgcGhvbmVOdW1iZXJcXFxcbiAgICBwdWJsaWNMb2NhdGlvbk5hbWVcXFxcbiAgICBzdG9yZU5hbWVcXFxcbiAgICByYXRpbmdTdW1tYXJ5IHtcXFxcbiAgICAgIGF2ZXJhZ2VcXFxcbiAgICAgIGNvdW50XFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBvcmlnaW5hbFByaWNlXFxcXG4gIG9yaWdpbmFsVGl0bGVcXFxcbiAgb3duZXIge1xcXFxuICAgIGlkXFxcXG4gICAgcHJvZmlsZSB7XFxcXG4gICAgICBhdmF0YXJzIHtcXFxcbiAgICAgICAgc3F1YXJlSW1hZ2VcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgYzJjUGhvbmVOdW1iZXIge1xcXFxuICAgICAgICBjb3VudHJ5Q29kZVxcXFxuICAgICAgICBuYXRpb25hbE51bWJlclxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBjbGlja1RvQ2FsbEVuYWJsZWRcXFxcbiAgICAgIGRhdGVKb2luZWRcXFxcbiAgICAgIGlzQXV0b3NEZWFsZXJcXFxcbiAgICAgIGlzU3ViUHJpbWVEZWFsZXJcXFxcbiAgICAgIGlzVHJ1eW91VmVyaWZpZWRcXFxcbiAgICAgIG5hbWVcXFxcbiAgICAgIG5vdEFjdGl2ZVxcXFxuICAgICAgb3BlbmluZ0hvdXJzIHtcXFxcbiAgICAgICAgZGF5XFxcXG4gICAgICAgIGhvdXJzXFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIHBob25lTnVtYmVyXFxcXG4gICAgICBwdWJsaWNMb2NhdGlvbiB7XFxcXG4gICAgICAgIGZvcm1hdHRlZEFkZHJlc3NcXFxcbiAgICAgICAgbGF0aXR1ZGVcXFxcbiAgICAgICAgbG9uZ2l0dWRlXFxcXG4gICAgICAgIG5hbWVcXFxcbiAgICAgICAgX190eXBlbmFtZVxcXFxuICAgICAgfVxcXFxuICAgICAgcHVibGljTG9jYXRpb25OYW1lXFxcXG4gICAgICBpdGVtc1B1cmNoYXNlZFxcXFxuICAgICAgaXRlbXNTb2xkXFxcXG4gICAgICByZXNwb25zZVRpbWVcXFxcbiAgICAgIHJhdGluZ1N1bW1hcnkge1xcXFxuICAgICAgICBhdmVyYWdlXFxcXG4gICAgICAgIGNvdW50XFxcXG4gICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgIH1cXFxcbiAgICAgIHJldmlld3Mge1xcXFxuICAgICAgICBhdHRyaWJ1dGlvbkljb25cXFxcbiAgICAgICAgYXZlcmFnZVxcXFxuICAgICAgICByZWFkTW9yZVVybFxcXFxuICAgICAgICB0aXRsZVxcXFxuICAgICAgICB1c2VyUmV2aWV3cyB7XFxcXG4gICAgICAgICAgcHJvZmlsZVBob3RvVXJsXFxcXG4gICAgICAgICAgdGV4dFxcXFxuICAgICAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICB3ZWJzaXRlTGlua1xcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgb3duZXJJZFxcXFxuICBwaG90b3Mge1xcXFxuICAgIHV1aWRcXFxcbiAgICBkZXRhaWwge1xcXFxuICAgICAgaGVpZ2h0XFxcXG4gICAgICB1cmxcXFxcbiAgICAgIHdpZHRoXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIGRldGFpbEZ1bGwge1xcXFxuICAgICAgdXJsXFxcXG4gICAgICB3aWR0aFxcXFxuICAgICAgaGVpZ2h0XFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIGRldGFpbFNxdWFyZSB7XFxcXG4gICAgICBoZWlnaHRcXFxcbiAgICAgIHVybFxcXFxuICAgICAgd2lkdGhcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgbGlzdCB7XFxcXG4gICAgICBoZWlnaHRcXFxcbiAgICAgIHVybFxcXFxuICAgICAgd2lkdGhcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgbWVkaXVtIHtcXFxcbiAgICAgIGhlaWdodFxcXFxuICAgICAgdXJsXFxcXG4gICAgICB3aWR0aFxcXFxuICAgICAgX190eXBlbmFtZVxcXFxuICAgIH1cXFxcbiAgICBzcXVhcmVNZWRpdW0ge1xcXFxuICAgICAgaGVpZ2h0XFxcXG4gICAgICB1cmxcXFxcbiAgICAgIHdpZHRoXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBwb3N0RGF0ZVxcXFxuICBwcmljZVxcXFxuICBxdWFudGl0eVxcXFxuICBzYXZlZCBAaW5jbHVkZShpZjogJGlzTG9nZ2VkSW4pXFxcXG4gIHNoaXBwaW5nT3B0aW9ucyB7XFxcXG4gICAgbWF4SGFuZGxpbmdEYXlzXFxcXG4gICAgbWF4U2hpcHBpbmdEYXlzXFxcXG4gICAgbWluSGFuZGxpbmdEYXlzXFxcXG4gICAgbWluU2hpcHBpbmdEYXlzXFxcXG4gICAgbmFtZVxcXFxuICAgIHByaWNlXFxcXG4gICAgcHJpb3JpdHlcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgc2hpcHBpbmdSYXRlIHtcXFxcbiAgICBtYXhEZWxpdmVyeURheXNcXFxcbiAgICBtYXhFc3RpbWF0ZWREZWxpdmVyeURhdGVcXFxcbiAgICBtaW5EZWxpdmVyeURheXNcXFxcbiAgICBtaW5Fc3RpbWF0ZWREZWxpdmVyeURhdGVcXFxcbiAgICBwcmljZVxcXFxuICAgIHByaW9yaXR5XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIHNrdVxcXFxuICBzdGF0ZVxcXFxuICB0aXRsZVxcXFxuICB2ZWhpY2xlQXR0cmlidXRlcyB7XFxcXG4gICAgdmVoaWNsZUJvZHlcXFxcbiAgICB2ZWhpY2xlQ2l0eU1wZ1xcXFxuICAgIHZlaGljbGVDb2xvclxcXFxuICAgIHZlaGljbGVEcml2ZVRyYWluXFxcXG4gICAgdmVoaWNsZURyaXZlVHJhaW5DbGVhblxcXFxuICAgIHZlaGljbGVFbmdpbmVDeWxpbmRlcnNcXFxcbiAgICB2ZWhpY2xlRXBhQ2l0eVxcXFxuICAgIHZlaGljbGVFcGFIaWdod2F5XFxcXG4gICAgdmVoaWNsZUV4dGVybmFsSGlzdG9yeVJlcG9ydCB7XFxcXG4gICAgICBlcG9jaERhdGVcXFxcbiAgICAgIGltYWdlVXJsXFxcXG4gICAgICBpc3N1ZXNcXFxcbiAgICAgIHByaWNlIHtcXFxcbiAgICAgICAgbWljcm9Vbml0c1xcXFxuICAgICAgICBfX3R5cGVuYW1lXFxcXG4gICAgICB9XFxcXG4gICAgICBwcm92aWRlck5hbWVcXFxcbiAgICAgIHJlcG9ydFVybFxcXFxuICAgICAgc291cmNlXFxcXG4gICAgICBfX3R5cGVuYW1lXFxcXG4gICAgfVxcXFxuICAgIHZlaGljbGVGdWVsVHlwZVxcXFxuICAgIHZlaGljbGVGdW5kYW1lbnRhbHNcXFxcbiAgICB2ZWhpY2xlSGlnaHdheU1wZ1xcXFxuICAgIHZlaGljbGVJZFxcXFxuICAgIHZlaGljbGVNYWtlXFxcXG4gICAgdmVoaWNsZU1pbGVzXFxcXG4gICAgdmVoaWNsZU1vZGVsXFxcXG4gICAgdmVoaWNsZVN0eWxlRGlzcGxheVxcXFxuICAgIHZlaGljbGVUaXRsZVN0YXR1c1xcXFxuICAgIHZlaGljbGVUcmFuc21pc3Npb25cXFxcbiAgICB2ZWhpY2xlVHJhbnNtaXNzaW9uQ2xlYW5cXFxcbiAgICB2ZWhpY2xlVHJpbVxcXFxuICAgIHZlaGljbGVWaW5cXFxcbiAgICB2ZWhpY2xlWWVhclxcXFxuICAgIF9fdHlwZW5hbWVcXFxcbiAgfVxcXFxuICBfX3R5cGVuYW1lXFxcXG59XFxcXG5cXFxcbmZyYWdtZW50IGFkc0dvb2dsZURpc3BsYXlBZCBvbiBHb29nbGVEaXNwbGF5QWQge1xcXFxuICAuLi5iYXNlR29vZ2xlRGlzcGxheUFkXFxcXG4gIHJlbmRlckxvY2F0aW9uXFxcXG4gIHRpbGVUeXBlXFxcXG4gIF9fdHlwZW5hbWVcXFxcbn1cXFxcblxcXFxuZnJhZ21lbnQgYmFzZUdvb2dsZURpc3BsYXlBZCBvbiBHb29nbGVEaXNwbGF5QWQge1xcXFxuICBvdUFkSWRcXFxcbiAgYWRFeHBlcmltZW50SWRcXFxcbiAgYWRIZWlnaHRcXFxcbiAgYWRNZWRpYXRpb25JZFxcXFxuICBhZE5ldHdvcmtcXFxcbiAgYWRSZXF1ZXN0SWRcXFxcbiAgYWRXaWR0aFxcXFxuICBjbGllbnRJZFxcXFxuICBjb250ZW50VXJsXFxcXG4gIGRpc3BsYXlBZFR5cGVcXFxcbiAgZXJyb3JEcmF3YWJsZSB7XFxcXG4gICAgYWN0aW9uUGF0aFxcXFxuICAgIGxpc3RJbWFnZSB7XFxcXG4gICAgICBoZWlnaHRcXFxcbiAgICAgIHVybFxcXFxuICAgICAgd2lkdGhcXFxcbiAgICAgIF9fdHlwZW5hbWVcXFxcbiAgICB9XFxcXG4gICAgX190eXBlbmFtZVxcXFxuICB9XFxcXG4gIGV4cGVyaW1lbnREYXRhSGFzaFxcXFxuICBwZXJzb25hbGl6YXRpb25Qcm9wZXJ0aWVzIHtcXFxcbiAgICBrZXlcXFxcbiAgICB2YWx1ZXNcXFxcbiAgICBfX3R5cGVuYW1lXFxcXG4gIH1cXFxcbiAgdHlwZVxcXFxuICBfX3R5cGVuYW1lXFxcXG59XFxcXG5cIn1gO1xyXG4gICAgLy8gY29uc29sZS50cmFjZSgpO1xyXG4gIH1cclxuICB0cnkge1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBcGkoaVRyaWVzKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaChcImh0dHBzOi8vb2ZmZXJ1cC5jb20vYXBpL2dyYXBocWxcIiwge1xyXG4gICAgICAgIFwiY3JlZGVudGlhbHNcIjogXCJpbmNsdWRlXCIsXHJcbiAgICAgICAgXCJoZWFkZXJzXCI6IHtcclxuICAgICAgICAgIFwiVXNlci1BZ2VudFwiOiBcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2Ojg5LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvODkuMFwiLFxyXG4gICAgICAgICAgXCJBY2NlcHRcIjogXCIqLypcIixcclxuICAgICAgICAgIFwiQWNjZXB0LUxhbmd1YWdlXCI6IFwiZW4tVVMsZW47cT0wLjVcIixcclxuICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgXCJ4LW91LWQtdG9rZW5cIjogXCJ3ZWItOGEyNjNjMzk0NDVlOTMwODQwNzM0MDgwMTE4MDNjMTdiNDEzZDE4ZmE5MWZhZmI5ZjY0ZjcwNmZcIixcclxuICAgICAgICAgIFwieC1vdS1mLXRva2VuXCI6IFwiNmFmMjliMjViNTUxOTIyMjA1YTkwOTM3ZmQxNjQ2MDNcIixcclxuICAgICAgICAgIFwidXNlcmRhdGFcIjogXCJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKc2IyTmhkR2x2YmlJNkludGNJbU5wZEhsY0lqcGNJa1p2Y25RZ1RHRjFaR1Z5WkdGc1pWd2lMRndpYzNSaGRHVmNJanBjSWtaTVhDSXNYQ0o2YVhCRGIyUmxYQ0k2WENJek16TXlNbHdpTEZ3aWJHOXVaMmwwZFdSbFhDSTZMVGd3TGpJM05qZ3NYQ0pzWVhScGRIVmtaVndpT2pJMkxqRTBPRFo5SW4wLlRqaGxjYTJpQnB4YzYtU0NRRkltWFdrczJHbkhqWG5jenJMUm5ERGJYT29cIixcclxuICAgICAgICAgIFwib3UtYnJvd3Nlci11c2VyLWFnZW50XCI6IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6ODkuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC84OS4wXCIsXHJcbiAgICAgICAgICBcIlByb3h5LUF1dGhvcml6YXRpb25cIjogXCJCYXNpYyBkSEpoWkdWaGNIQnNaWE02WVhCd2JHVnpkSEpoWkdVMk9RPT1cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJyZWZlcnJlclwiOiBgaHR0cHM6Ly9vZmZlcnVwLmNvbS9pdGVtL2RldGFpbC8ke2lkfT9xPWlwaG9uZWAsXHJcbiAgICAgICAgXCJib2R5XCI6IGJvZHksXHJcbiAgICAgICAgXCJtZXRob2RcIjogXCJQT1NUXCIsXHJcbiAgICAgICAgXCJtb2RlXCI6IFwiY29yc1wiXHJcbiAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAuY2F0Y2goYXN5bmMgZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIEZhaWxlZCAoZmV0Y2hMaXN0aW5nRGV0YWlsKScsIGVyciwgaVRyaWVzKTtcclxuICAgICAgICAgIGlmIChpVHJpZXMgJiYgaVRyaWVzID4gNikgcmV0dXJuICcnO1xyXG4gICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDApO1xyXG4gICAgICAgICAgaWYgKCFpVHJpZXMpIGlUcmllcyA9IDA7XHJcbiAgICAgICAgICBpVHJpZXMgKz0gMTtcclxuICAgICAgICAgIHJldHVybiBmZXRjaEFwaShpVHJpZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZldGNoQXBpKClcclxuICAgICAgLnRoZW4oYXN5bmMgeCA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGlmICh4ICYmIHgubWF0Y2ggJiYgeC5tYXRjaCgvY3VycmVudGx5IHNlcnZlIGFyZWFzIG91dHNpZGUgb2YgdGhlIFVTL2kpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7ZXJyb3I6ICdQcm94eSBGYWlsZWQnLCBlcnJvcl9jb2RlOiAncHJveHktZmFpbGVkJ307XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4KTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBhd2FpdCBzZW5kRGVidWdMb2coeyBlcnJvcjogJ0ZhaWxlZCB0byBwYXJzZSBmZXRjaExpc3RpbmdEZXRhaWwgYXBpIHJlc3BvbnNlLicsIHggfSk7XHJcbiAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihhc3luYyB4ID0+IHtcclxuICAgICAgICBpZiAoeCAmJiB4LmVycm9yX2NvZGUgPT09ICdwcm94eS1mYWlsZWQnKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdQcm94eSBGYWlsZWQgLSBHb3QgRXJyb3I6IEN1cnJlbnRseSBzZXJ2ZSBhcmVhcyBvdXRzaWRlIG9mIHRoZSBVUycpO1xyXG4gICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeC5kYXRhICYmIHguZGF0YS5saXN0aW5nKSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbGlzdGluZyBkZXRhaWxzJywgeC5kYXRhLmxpc3RpbmcpO1xyXG4gICAgICAgICAgcmV0dXJuIHguZGF0YS5saXN0aW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGxpc3RpbmcgZGV0YWlscycsIHgpO1xyXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICAgICAgICBhd2FpdCBzZW5kRGVidWdMb2coeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgbGlzdGluZyBkZXRhaWxzJywgZGV0YWlsczogeCB9KTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRmV0Y2ggRmFpbGVkIChmZXRjaExpc3RpbmdEZXRhaWwpKScsIGVycik7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICB9KTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBpZiAoIWlzUmV0cnkpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ2ZldGNoTGlzdGluZ0RldGFpbCBmYWlsZWQuIFdpbGwgcmV0cnknKVxyXG4gICAgICByZXR1cm4gZmV0Y2hMaXN0aW5nRGV0YWlsKGlkLCB0cnVlKTtcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPdXRMaXN0aW5nc05vdEluUHJpY2VSYW5nZShhTGlzdGluZ3MpIHtcclxuICBsZXQgcmFuZ2VNaW4gPSBOdW1iZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3RpbmdfbWluX3ByaWNlJykudmFsdWUpIHx8IDA7XHJcbiAgbGV0IHJhbmdlTWF4ID0gTnVtYmVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaXN0aW5nX21heF9wcmljZScpLnZhbHVlKSB8fCAwO1xyXG4gIGlmIChyYW5nZU1pbiA9PT0gMCAmJiByYW5nZU1heCA9PT0gMCkgcmV0dXJuIGFMaXN0aW5ncztcclxuICBjb25zdCBsZW5ndGhCZWZvcmUgPSBhTGlzdGluZ3MubGVuZ3RoO1xyXG4gIGFMaXN0aW5ncyA9IGFMaXN0aW5ncy5maWx0ZXIobGlzdGluZyA9PiB7XHJcbiAgICBjb25zdCBwcmljZSA9IGxpc3RpbmcudGlsZSAmJiBOdW1iZXIobGlzdGluZy50aWxlLnByaWNlKTtcclxuICAgIHJldHVybiBwcmljZSA+PSByYW5nZU1pbiAmJiBwcmljZSA8PSByYW5nZU1heDtcclxuICB9KTtcclxuICBjb25zdCBsZW5ndGhBZnRlciA9IGFMaXN0aW5ncy5sZW5ndGg7XHJcbiAgaWYgKGxlbmd0aEFmdGVyICE9PSBsZW5ndGhCZWZvcmUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGBGaWx0ZXJlZCBvdXQgJHtsZW5ndGhCZWZvcmUgLSBsZW5ndGhBZnRlcn0gb2YgJHtsZW5ndGhCZWZvcmV9IGxpc3RpbmdzIHdpdGggcHJpY2UgdGhhdCBkb2VzbnQgZmFsbCBpbiByYW5nZS5gKTtcclxuICAgIENPTlNPTEVfTUVTU0FHRSgncHJpY2Vfbm90X2lucmFuZ2UnLCB7XHJcbiAgICAgIG51bV9saXN0aW5nczogKGxlbmd0aEJlZm9yZSAtIGxlbmd0aEFmdGVyKVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBhTGlzdGluZ3M7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ByaWNlSW5SYW5nZShwcmljZSkge1xyXG4gIGxldCByYW5nZU1pbiA9IE51bWJlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlzdGluZ19taW5fcHJpY2UnKS52YWx1ZSkgfHwgMDtcclxuICBsZXQgcmFuZ2VNYXggPSBOdW1iZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3RpbmdfbWF4X3ByaWNlJykudmFsdWUpIHx8IDA7XHJcbiAgaWYgKHJhbmdlTWluID09PSAwICYmIHJhbmdlTWF4ID09PSAwKSByZXR1cm4gdHJ1ZTtcclxuICByZXR1cm4gcHJpY2UgPj0gcmFuZ2VNaW4gJiYgcHJpY2UgPD0gcmFuZ2VNYXg7XHJcbn0iLCJpbXBvcnQgeyBoYW5kbGVGZXRjaEVycm9ycyB9IGZyb20gXCIuL2hhbmRsZUZldGNoRXJyb3JzXCI7XHJcbmltcG9ydCBzZW5kRGVidWdMb2cgZnJvbSBcIi4vc2VuZERlYnVnTG9nXCI7XHJcbmltcG9ydCB7IHNob3dMYXN0Q29uc29sZUxvZyB9IGZyb20gXCIuL3Nob3dMYXN0Q29uc29sZUxvZ1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnNvbGVNZXNzYWdlcygpIHtcclxuICBpZiAod2luZG93LmNvbnNvbGVNZXNzYWdlcykgcmV0dXJuIHdpbmRvdy5jb25zb2xlTWVzc2FnZXM7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9zaGVldHMuaG9wbGEudG9vbHMvP0hUPTFhNjMyNGVhNDU2YzI3MzQ2MjMwZGYwYTcwNDU4Y2M5JmZvcm1hdD1qc29uJnNoZWV0X25hbWU9Q29uc29sZUxvZycpXHJcbiAgICAudGhlbihhc3luYyByZXMgPT4gaGFuZGxlRmV0Y2hFcnJvcnMocmVzKSlcclxuICAgIC50aGVuKHggPT4geC50ZXh0KCkpXHJcbiAgICAudGhlbihhc3luYyB4ID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4KTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGF3YWl0IHNlbmREZWJ1Z0xvZyh7IGVycm9yOiAnRmFpbGVkIHRvIHBhcnNlIGdldENvbnNvbGVNZXNzYWdlcyBhcGkgcmVzcG9uc2UuJywgeCB9KTtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5yZXN1bHQpIHtcclxuICAgIHdpbmRvdy5jb25zb2xlTWVzc2FnZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiByZXNwb25zZS5yZXN1bHQpIHtcclxuICAgICAgaWYgKG1lc3NhZ2UudmFyaWFibGUpIHtcclxuICAgICAgICB3aW5kb3cuY29uc29sZU1lc3NhZ2VzW21lc3NhZ2UudmFyaWFibGVdID0gbWVzc2FnZS5tZXNzYWdlIHx8ICcnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LmNvbnNvbGVNZXNzYWdlcztcclxuICB9XHJcbiAgYXdhaXQgc2VuZERlYnVnTG9nKHtlcnJvcjogJ0ZhaWxlZCB0byBnZXQgY29uc29sZSBtZXNzYWdlcy4nfSk7XHJcbiAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBjb25zb2xlIG1lc3NhZ2UnKTtcclxuICByZXR1cm4ge307XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDT05TT0xFX01FU1NBR0UodGVtcGxhdGVfbmFtZSwgdmFyaWFibGVzKSB7XHJcbiAgaWYgKGlzRHVwZUxvZyh2YXJpYWJsZXMgfHwgdGVtcGxhdGVfbmFtZSkpIHJldHVybjtcclxuICBpZiAodGVtcGxhdGVfbmFtZSA9PT0gJ2N1c3RvbScpIHtcclxuICAgIHdpbmRvdy5sYXN0TG9nID0gdmFyaWFibGVzO1xyXG4gICAgY29uc29sZS5sb2codmFyaWFibGVzKTtcclxuICAgIHNob3dMYXN0Q29uc29sZUxvZyh2YXJpYWJsZXMpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAoIXdpbmRvdy5jb25zb2xlTWVzc2FnZXMpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0NhbGxlZCBjb25zb2xlTWVzc2FnZSB3aXRob3V0IGluaXRpYXRpbmcuJyk7XHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfVxyXG4gIGxldCBtZXNzYWdlID0gd2luZG93LmNvbnNvbGVNZXNzYWdlc1t0ZW1wbGF0ZV9uYW1lXTtcclxuXHJcbiAgaWYgKHZhcmlhYmxlcykge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFyaWFibGVzKSB7XHJcbiAgICAgIGNvbnN0IHJneCA9IG5ldyBSZWdFeHAoYHske2tleX19YCwgJ2dpJyk7XHJcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2Uocmd4LCB2YXJpYWJsZXNba2V5XSB8fCAnJyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gIHNob3dMYXN0Q29uc29sZUxvZyhtZXNzYWdlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNEdXBlTG9nKHZhcmlhYmxlcykge1xyXG4gIHZhcmlhYmxlcyA9IHR5cGVvZiB2YXJpYWJsZXMgPT09ICdvYmplY3QnID8gSlNPTi5zdHJpbmdpZnkodmFyaWFibGVzKSA6IHZhcmlhYmxlcztcclxuICBpZiAoIXdpbmRvdy5sYXN0TG9nKSB7XHJcbiAgICB3aW5kb3cubGFzdExvZyA9IHZhcmlhYmxlcztcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlcyA9IHdpbmRvdy5sYXN0TG9nID09PSB2YXJpYWJsZXM7XHJcbiAgaWYgKHJlcykgcmV0dXJuIHRydWU7XHJcbiAgd2luZG93Lmxhc3RMb2cgPSB2YXJpYWJsZXM7XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0RGF0YUZyb21BdHRyaWJ1dGUoX2F0dHJpYnV0ZXMsIGF0dHJpYnV0ZU5hbWUpIHtcclxuICBpZiAoIV9hdHRyaWJ1dGVzKSByZXR1cm4gJyc7XHJcbiAgZm9yIChjb25zdCBvYXR0cmlidXRlIG9mIF9hdHRyaWJ1dGVzKSB7XHJcbiAgICBpZiAob2F0dHJpYnV0ZS5hdHRyaWJ1dGVOYW1lID09PSBhdHRyaWJ1dGVOYW1lKSB7XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9hdHRyaWJ1dGUuYXR0cmlidXRlVmFsdWUpICYmIG9hdHRyaWJ1dGUuYXR0cmlidXRlVmFsdWUubGVuZ3RoKSByZXR1cm4gb2F0dHJpYnV0ZS5hdHRyaWJ1dGVWYWx1ZVswXS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn0iLCJpbXBvcnQgeyBmZXRjaExpc3RpbmdEZXRhaWwgfSBmcm9tIFwiLi9mZXRjaExpc3RpbmdEZXRhaWxcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJdGVtSW5mbyhpZCkge1xyXG4gIC8vIGNvbnNvbGUubG9nKCdnZXRJdGVtSW5mbycsIGlkKTtcclxuICBjb25zdCBfZGF0YSA9IGF3YWl0IGZldGNoTGlzdGluZ0RldGFpbChpZCk7XHJcbiAgLy8gY29uc29sZS5sb2coJ2xpc3RpbmdkZXRhaWwnLCBfZGF0YSk7XHJcbiAgaWYgKCFfZGF0YSkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ25vIGRhdGEnLCBfZGF0YSk7XHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG5cclxuXHJcbiAgY29uc3QgYXR0cmlidXRlcyA9IF9kYXRhLmxpc3RpbmdDYXRlZ29yeS5jYXRlZ29yeUF0dHJpYnV0ZU1hcDtcclxuICBsZXQge1xyXG4gICAgdGl0bGUsIGRlc2NyaXB0aW9uLCBjb25kaXRpb24sIHByaWNlXHJcbiAgfSA9IF9kYXRhO1xyXG4gIGlmICghdGl0bGUpIHRpdGxlID0gJyc7XHJcbiAgaWYgKCFkZXNjcmlwdGlvbikgZGVzY3JpcHRpb24gPSAnJztcclxuICBpZiAoIWNvbmRpdGlvbikgY29uZGl0aW9uID0gJyc7XHJcbiAgaWYgKCFwcmljZSkgcHJpY2UgPSAnJztcclxuICByZXR1cm4ge1xyXG4gICAgdGl0bGUsIGRlc2NyaXB0aW9uLCBjb25kaXRpb24sIHByaWNlLCBhdHRyaWJ1dGVzXHJcbiAgfTtcclxufVxyXG53aW5kb3cuZ2V0SXRlbUluZm8gPSBnZXRJdGVtSW5mbzsiLCJleHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGFydG5lckRldGFpbHModWlkKSB7XHJcbiAgcmV0dXJuIGZldGNoKGBodHRwczovL3VzLWNlbnRyYWwxLXRyYWRlLWFwcGxlcy5jbG91ZGZ1bmN0aW9ucy5uZXQvcGFydG5lcnM/Z2V0cGFydG5lcmRldGFpbHM9MSZ1aWQ9JHt1aWR9YCkudGhlbih4ID0+IHguanNvbigpKTtcclxufSIsImltcG9ydCBzZW5kRGVidWdMb2cgZnJvbSBcIi4vc2VuZERlYnVnTG9nXCI7XHJcblxyXG4gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEtleVZhbHVlcygpIHtcclxuICB0cnkge1xyXG4gICAgaWYgKHdpbmRvdy5rdkpzb24pIHJldHVybiB3aW5kb3cua3ZKc29uO1xyXG4gICAgY29uc3Qga3ZKc29uID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vcHJpY2VzLnBob25lcy50cmFkZS8/a3ZyZWFkPWtleV92YWx1ZXNgKS50aGVuKHggPT4geC5qc29uKCkpO1xyXG4gICAgd2luZG93Lmt2SnNvbiA9IGt2SnNvbjtcclxuICAgIHJldHVybiBrdkpzb247XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgY29uc29sZS5sb2coJ2Vycm9yJywgZSk7XHJcbiAgICBhd2FpdCBzZW5kRGVidWdMb2coe2Vycm9yOiAnRmFpbGVkIHRvIGdldCBrZXkgdmFsdWVzIGZyb20gcHJpY2VzIGVuZHBvaW50J30pO1xyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxufSIsImltcG9ydCB7IGdldEtleVZhbHVlcyB9IGZyb20gXCIuL2dldEtleVZhbHVlc1wiO1xyXG5pbXBvcnQge3JlbW92ZURlc2NyaXB0aW9ufSBmcm9tICcuLi9yZW1vdmVEZXNjcmlwdGlvbic7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXJsTW9kZWxUb01vZGVsS2V5KHVybE1vZGVsKSB7XHJcbiAgY29uc3Qga2V5VmFsdWVzID0gYXdhaXQgZ2V0S2V5VmFsdWVzKCk7XHJcbiAgY29uc3QgYnlrZXkgPSBrZXlWYWx1ZXMuYnlrZXk7XHJcbiAgbGV0IG1vZGVscyA9IFtdO1xyXG4gIGlmICghYnlrZXkpIHJldHVybiAnJztcclxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYnlrZXkpLmZpbHRlcihrZXkgPT4ga2V5LnN0YXJ0c1dpdGgoJ00nKSk7XHJcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgbW9kZWxzLnB1c2goe2tleSwgdmFsdWU6IGJ5a2V5W2tleV19KTtcclxuICB9XHJcbiAgaWYgKHVybE1vZGVsICYmICF1cmxNb2RlbC5zdGFydHNXaXRoKCdpcGhvbmUnKSkgdXJsTW9kZWwgPSAnaXBob25lJyArIHVybE1vZGVsO1xyXG4gIGZvciAoY29uc3QgbyBvZiBtb2RlbHMpIHtcclxuICAgIGxldCBfbmFtZSA9IG8udmFsdWU7XHJcbiAgICBfbmFtZSA9IF9uYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XHJcbiAgICBpZiAoX25hbWUgPT09ICdpcGhvbmVzZTIwMjAnKSBfbmFtZSA9ICdpcGhvbmVzZTInO1xyXG4gICAgaWYgKF9uYW1lID09PSAnaXBob25lc2UyMDIyJykgX25hbWUgPSAnaXBob25lc2UzJztcclxuICAgIGlmIChfbmFtZSA9PT0gdXJsTW9kZWwpIHJldHVybiBvLmtleTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTdG9yYWdla2V5KHVybFN0b3JhZ2UpIHtcclxuICBjb25zdCBrZXlWYWx1ZXMgPSBhd2FpdCBnZXRLZXlWYWx1ZXMoKTtcclxuICB1cmxTdG9yYWdlID0gdXJsU3RvcmFnZS50b1VwcGVyQ2FzZSgpO1xyXG4gIHJldHVybiBrZXlWYWx1ZXMuYnl2YWx1ZVt1cmxTdG9yYWdlXTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE5ldHdvcmtLZXkodXJsTmV0d29yaykge1xyXG4gIGNvbnN0IGtleVZhbHVlcyA9IGF3YWl0IGdldEtleVZhbHVlcygpO1xyXG4gIGNvbnN0IG5ldHdvcmtLZXlzID0gT2JqZWN0LmtleXMoa2V5VmFsdWVzLmJ5a2V5KS5maWx0ZXIoeCA9PiB4LnN0YXJ0c1dpdGgoJ04nKSk7XHJcbiAgZm9yIChjb25zdCBuZXR3b3JrS2V5IG9mIG5ldHdvcmtLZXlzKSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IHJlbW92ZURlc2NyaXB0aW9uKGtleVZhbHVlcy5ieWtleVtuZXR3b3JrS2V5XSk7XHJcbiAgICBpZiAodXJsTmV0d29yay50b0xvd2VyQ2FzZSgpID09PSB2YWx1ZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gbmV0d29ya0tleTtcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDb25kaXRpb25SZWFkYWJsZShjb25kaXRpb25GdWxsU3RyaW5nKSB7XHJcbiAgaWYgKGNvbmRpdGlvbkZ1bGxTdHJpbmcgJiYgY29uZGl0aW9uRnVsbFN0cmluZy5tYXRjaCgvaW50ZXJuYWwvaSkpIHJldHVybiAnaW50ZXJuYWwnO1xyXG4gIGNvbnN0IHJhd1ZhbHVlID0gY29uZGl0aW9uRnVsbFN0cmluZztcclxuICBsZXQgdmFsdWUgPSByYXdWYWx1ZTtcclxuICBjb25zdCBtYXRjaCA9IHJhd1ZhbHVlLm1hdGNoKC9cXFsoLispXFxdLyk7XHJcbiAgbGV0IGRlc2MgPSAnJztcclxuICBpZiAobWF0Y2gpIHtcclxuICAgIGRlc2MgPSBtYXRjaFsxXS50cmltKCk7XHJcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoYFske2Rlc2N9XWAsICcnKS50cmltKCk7XHJcbiAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KCctJyk7XHJcbiAgICBpZiAodmFsdWUubGVuZ3RoID4gMSkge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlWzFdLnRyaW0oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhbHVlID0gdmFsdWVbMF0udHJpbSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29uZGl0aW9uS2V5KHVybENvbmRpdGlvbikge1xyXG4gIGNvbnN0IGtleVZhbHVlcyA9IGF3YWl0IGdldEtleVZhbHVlcygpO1xyXG4gIGNvbnN0IGJ5a2V5ID0ga2V5VmFsdWVzLmJ5a2V5O1xyXG4gIGNvbnN0IGNvbmRpdGlvbnMgPSBbXTtcclxuICBpZiAoIWJ5a2V5KSByZXR1cm4gJyc7XHJcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJ5a2V5KS5maWx0ZXIoa2V5ID0+IGtleS5zdGFydHNXaXRoKCdDJykpO1xyXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgIGNvbmRpdGlvbnMucHVzaCh7a2V5LCB2YWx1ZTogYnlrZXlba2V5XX0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKHVybENvbmRpdGlvbikge1xyXG4gICAgdXJsQ29uZGl0aW9uID0gdXJsQ29uZGl0aW9uLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XHJcbiAgfVxyXG4gIGZvciAoY29uc3QgbyBvZiBjb25kaXRpb25zKSB7XHJcbiAgICBsZXQgX25hbWUgPSBvLnZhbHVlO1xyXG4gICAgX25hbWUgPSBnZXRDb25kaXRpb25SZWFkYWJsZShfbmFtZSk7XHJcbiAgICBfbmFtZSA9IF9uYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XHJcbiAgICBpZiAoX25hbWUgPT09IHVybENvbmRpdGlvbikgcmV0dXJuIG8ua2V5O1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWR1Y3Rpb25LZXlzKGFEZWR1Y3Rpb25zKSB7XHJcbiAgY29uc3QgZGVkdWN0aW9uS2V5cyA9IFtdO1xyXG4gIC8vIERFRFVDVElPTlNcclxuICBpZiAoYURlZHVjdGlvbnMpIHtcclxuICAgIC8vIGlmIChhRGVkdWN0aW9ucy5pbmNsdWRlcygnaWNsb3VkJykpIHtcclxuICAgIC8vICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAvLyAgICAgcmVmU3dpdGNoaUNsb3VkLmN1cnJlbnQgJiYgcmVmU3dpdGNoaUNsb3VkLmN1cnJlbnQub25DaGFuZ2UodHJ1ZSk7XHJcbiAgICAvLyAgIH0sIDApO1xyXG4gICAgLy8gfVxyXG4gICAgYURlZHVjdGlvbnMuZm9yRWFjaChkZWR1Y3Rpb25IYXNoID0+IHtcclxuICAgICAgbGV0IGRlZHVjdGlvbktleTtcclxuICAgICAgc3dpdGNoIChkZWR1Y3Rpb25IYXNoKSB7XHJcbiAgICAgICAgY2FzZSAndG91Y2hpZCBpc3N1ZSc6XHJcbiAgICAgICAgY2FzZSAnZmFjZWlkIGlzc3VlJzpcclxuICAgICAgICAgIGRlZHVjdGlvbktleSA9ICdEMyc7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjcmFja2VkYmFjayc6XHJcbiAgICAgICAgY2FzZSAnY3JhY2tlZGlwaG9uZSc6XHJcbiAgICAgICAgICBkZWR1Y3Rpb25LZXkgPSAnRDEnO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc2ltY2FyZCByZWFkaW5nIGlzc3VlJzpcclxuICAgICAgICAgIGRlZHVjdGlvbktleSA9ICdENSc7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd3aWZpaXNzdWVzJzpcclxuICAgICAgICBjYXNlICd3aWZpcHJvYmxlbXMnOlxyXG4gICAgICAgICAgZGVkdWN0aW9uS2V5ID0gJ0Q0JztcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2NhbWVyYSBpc3N1ZXMnOlxyXG4gICAgICAgIGNhc2UgJ2NhbWVyYXByb2JsZW1zJzpcclxuICAgICAgICBjYXNlICdicm9rZW5jYW1lcmEnOlxyXG4gICAgICAgICAgZGVkdWN0aW9uS2V5ID0gJ0QyJztcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2NyYWNrZWRjYW1lcmFsZW5zJzpcclxuICAgICAgICAgIGRlZHVjdGlvbktleSA9ICdEMTMnO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGRlZHVjdGlvbktleSkge1xyXG4gICAgICAgIGRlZHVjdGlvbktleXMucHVzaChkZWR1Y3Rpb25LZXkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBrZXlUb05hbWUoa2V5KSB7XHJcbiAgY29uc3Qga2V5VmFsdWVzID0gYXdhaXQgZ2V0S2V5VmFsdWVzKCk7XHJcbiAgaWYgKCFrZXlWYWx1ZXMpIHJldHVybiAnJztcclxuICBjb25zdCBieWtleSA9IGtleVZhbHVlcy5ieWtleTtcclxuICBpZiAoIWJ5a2V5KSByZXR1cm4gJyc7XHJcbiAgcmV0dXJuIGJ5a2V5W2tleV0gfHwgJydcclxufSIsImltcG9ydCB7IHJlbW92ZURlc2NyaXB0aW9uIH0gZnJvbSBcIi4uL3JlbW92ZURlc2NyaXB0aW9uXCI7XHJcbmltcG9ydCB7IENPTlNPTEVfTUVTU0FHRSB9IGZyb20gXCIuL2dldENvbnNvbGVNZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyBnZXRDb25kaXRpb25LZXksIGdldERlZHVjdGlvbktleXMsIGdldE5ldHdvcmtLZXksIGdldFN0b3JhZ2VrZXksIGtleVRvTmFtZSwgdXJsTW9kZWxUb01vZGVsS2V5IH0gZnJvbSBcIi4vcGFyc2VyXCI7XHJcbmltcG9ydCBzZW5kRGVidWdMb2cgZnJvbSBcIi4vc2VuZERlYnVnTG9nXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UXVvdGUodmFyaWFudCwgbGlzdGluZ0lkKSB7XHJcbiAgY29uc29sZS5sb2coJ0dldHRpbmcgcXVvdGUuLicpO1xyXG4gIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgYEdldHRpbmcgcXVvdGUgb2YgbGlzdGluZyAoJHtsaXN0aW5nSWR9KWApO1xyXG5cclxuICAvLyBDT05WRVJUIFRPIHZhcmlhbnRRdW90ZVxyXG4gIGNvbnN0IHZhcmlhbnRNb2RlbCA9IHZhcmlhbnQubW9kZWwgfHwgJzEzcHJvbWF4JztcclxuICBjb25zdCB2YXJpYW50U3RvcmFnZSA9IHZhcmlhbnQuc3RvcmFnZTtcclxuICBjb25zdCB2YXJpYW50TmV0d29yayA9IHZhcmlhbnQubmV0d29yaztcclxuICBjb25zdCB2YXJpYW50Q29uZGl0aW9uID0gdmFyaWFudC5jb25kaXRpb24gfHwgJ2xpa2VuZXcnO1xyXG4gIGNvbnN0IHZhcmlhbkRlZHVjdGlvbiA9IHZhcmlhbnQuZGVkdWN0aW9ucyB8fCAnJztcclxuXHJcbiAgaWYgKCF2YXJpYW50Lm1vZGVsIHx8ICF2YXJpYW50LnN0b3JhZ2UgfHwgIXZhcmlhbnQubmV0d29yayB8fCAhdmFyaWFudC5jb25kaXRpb24gfHwgIXZhcmlhbnQuZGVkdWN0aW9ucykge1xyXG4gICAgY29uc29sZS5sb2coJ0ZvdW5kIGNhc2Ugd2l0aCBtaXNzaW5nIHZhcmlhbnQgZGV0YWlscy4nLCB2YXJpYW50LCBsaXN0aW5nSWQpO1xyXG4gICAgLy8gY29uc29sZS5lcnJvcignRm91bmQgY2FzZSB3aGVyZSB2YXJpYW50IGhhcyBtaXNzaW5nIGZpZWxkcycsIHZhcmlhbnQsIGxpc3RpbmdJZCk7XHJcbiAgICAvLyBzZW5kRGVidWdMb2coe1xyXG4gICAgLy8gICBlcnJvcjogJ0ZvdW5kIGNhc2Ugd2hlcmUgdmFyaWFudCBoYXMgbWlzc2luZyBmaWVsZHMnLFxyXG4gICAgLy8gICB2YXJpYW50LFxyXG4gICAgLy8gICBsaXN0aW5nSWRcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gYWxlcnQoJ0ZvdW5kIGNhc2Ugd2hlcmUgdmFyaWFudCBoYXMgbWlzc2luZyBmaWVsZHMnKTtcclxuICB9XHJcbiAgbGV0IHN0b3JhZ2VLZXksIG5ldHdvcmtLZXk7XHJcbiAgY29uc3QgbW9kZWxLZXkgPSBhd2FpdCB1cmxNb2RlbFRvTW9kZWxLZXkodmFyaWFudE1vZGVsKTtcclxuICBpZiAodmFyaWFudFN0b3JhZ2UpIHN0b3JhZ2VLZXkgPSBhd2FpdCBnZXRTdG9yYWdla2V5KHZhcmlhbnRTdG9yYWdlKTtcclxuICBpZiAodmFyaWFudE5ldHdvcmspIG5ldHdvcmtLZXkgPSBhd2FpdCBnZXROZXR3b3JrS2V5KHZhcmlhbnROZXR3b3JrKTtcclxuICBjb25zdCBjb25kaXRpb25LZXkgPSBhd2FpdCBnZXRDb25kaXRpb25LZXkodmFyaWFudENvbmRpdGlvbik7XHJcbiAgY29uc3QgZGVkdWN0aW9uS2V5cyA9IGF3YWl0IGdldERlZHVjdGlvbktleXModmFyaWFuRGVkdWN0aW9uKTtcclxuICBjb25zb2xlLmxvZygnZGVkdWN0aW9uS2V5cycsIGRlZHVjdGlvbktleXMpOyBcclxuXHJcbiAgXHJcbiAgY29uc3QgcXVvdGUgPSB7XHJcbiAgICBtb2RlbDogcmVtb3ZlRGVzY3JpcHRpb24oYXdhaXQga2V5VG9OYW1lKG1vZGVsS2V5KSksXHJcbiAgICBjb25kaXRpb246IHJlbW92ZURlc2NyaXB0aW9uKGF3YWl0IGtleVRvTmFtZShjb25kaXRpb25LZXkpKSxcclxuICB9O1xyXG4gIFxyXG4gIGlmIChzdG9yYWdlS2V5KSBxdW90ZS5zdG9yYWdlID0gcmVtb3ZlRGVzY3JpcHRpb24oYXdhaXQga2V5VG9OYW1lKHN0b3JhZ2VLZXkpKTtcclxuICBpZiAobmV0d29ya0tleSkgcXVvdGUubmV0d29yayA9IHJlbW92ZURlc2NyaXB0aW9uKGF3YWl0IGtleVRvTmFtZShuZXR3b3JrS2V5KSk7XHJcbiAgXHJcbiAgaWYgKGRlZHVjdGlvbktleXMgJiYgQXJyYXkuaXNBcnJheShkZWR1Y3Rpb25LZXlzKSkge1xyXG4gICAgY29uc3QgZGVkdWN0aW9ucyA9IGRlZHVjdGlvbktleXMubWFwKGtleSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdrZXknLCBrZXkpO1xyXG4gICAgICBsZXQgbmFtZSA9IGtleVRvTmFtZSh4KTtcclxuICAgICAgcmV0dXJuIHJlbW92ZURlc2NyaXB0aW9uKG5hbWUpO1xyXG4gICAgfSk7XHJcbiAgICBxdW90ZS5kZWR1Y3Rpb25zID0gZGVkdWN0aW9ucztcclxuICB9XHJcbiAgXHJcblxyXG4gIGlmICh2YXJpYW5EZWR1Y3Rpb24gJiYgdmFyaWFuRGVkdWN0aW9uLmluY2x1ZGVzKCdpY2xvdWQnKSkge1xyXG4gICAgc3RvcmFnZUtleSA9ICdTNSc7XHJcbiAgICBuZXR3b3JrS2V5ID0gJ042JztcclxuICB9XHJcblxyXG4gIGNvbnNvbGUubG9nKCdtb2RlbEtleScsIG1vZGVsS2V5KTtcclxuICBjb25zb2xlLmxvZygnc3RvcmFnZUtleScsIHN0b3JhZ2VLZXkpO1xyXG4gIGNvbnNvbGUubG9nKCduZXR3b3JrS2V5JywgbmV0d29ya0tleSk7XHJcbiAgY29uc29sZS5sb2coJ2NvbmRpdGlvbktleScsIGNvbmRpdGlvbktleSk7XHJcbiAgY29uc29sZS5sb2coJ2RlZHVjdGlvbktleXMnLCBkZWR1Y3Rpb25LZXlzKTtcclxuXHJcbiAgY29uc3QgcHJpY2VSZXMgPSBhd2FpdCBnZXRQcmljZShtb2RlbEtleSwgc3RvcmFnZUtleSwgbmV0d29ya0tleSwgY29uZGl0aW9uS2V5LCBkZWR1Y3Rpb25LZXlzKTtcclxuICBjb25zb2xlLmxvZygncHJpY2UnLCBwcmljZVJlcy5wcmljZSk7XHJcblxyXG4gIGlmICghc3RvcmFnZUtleSAmJiBwcmljZVJlcy5zdG9yYWdlS2V5KSBxdW90ZS5zdG9yYWdlID0gcmVtb3ZlRGVzY3JpcHRpb24oYXdhaXQga2V5VG9OYW1lKHByaWNlUmVzLnN0b3JhZ2VLZXkpKTtcclxuICBpZiAoIW5ldHdvcmtLZXkgJiYgcHJpY2VSZXMubmV0d29ya0tleSkgcXVvdGUubmV0d29yayA9IHJlbW92ZURlc2NyaXB0aW9uKGF3YWl0IGtleVRvTmFtZShwcmljZVJlcy5uZXR3b3JrS2V5KSk7XHJcblxyXG4gIHF1b3RlLnByaWNlID0gcHJpY2VSZXMucHJpY2U7XHJcbiAgcmV0dXJuIHF1b3RlO1xyXG5cclxufVxyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFF1b3RlX09MRChsaXN0aW5nSWQpIHtcclxuLy8gICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbi8vICAgICBjb25zdCByZXF1ZXN0SWRRdW90ZSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcclxuLy8gICAgIGNvbnNvbGUubG9nKCdHZXR0aW5nIHF1b3RlLi4nKTtcclxuLy8gICAgIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgYEdldHRpbmcgcXVvdGUgb2YgbGlzdGluZyAoJHtsaXN0aW5nSWR9KWApO1xyXG4vLyAgICAgc2VuZEdldFF1b3RlKHJlcXVlc3RJZFF1b3RlKTtcclxuLy8gICAgIGZ1bmN0aW9uIHdhaXRSZXBseShlKSB7XHJcbi8vICAgICAgIGlmICh0eXBlb2YgZS5kYXRhID09PSAnb2JqZWN0JyAmJiBlLmRhdGEgJiYgZS5kYXRhLm1vZGVsKSB7XHJcbi8vICAgICAgICAgLy8gY29uc29sZS5sb2coJ1JlcGx5IGhhcyBiZWVuIHJlY2VpdmVkLicsIGUuZGF0YSk7XHJcbi8vICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB3YWl0UmVwbHkpO1xyXG4vLyAgICAgICAgIHJlc29sdmUoZS5kYXRhKTtcclxuLy8gICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB3YWl0UmVwbHksIGZhbHNlKTtcclxuLy8gICB9KTtcclxuLy8gfVxyXG5cclxuLy8gZnVuY3Rpb24gc2VuZEdldFF1b3RlKHJlcXVlc3RJZCwgaSkge1xyXG4vLyAgIGlmICghaSkgaSA9IDA7XHJcbi8vICAgaSArPSAxO1xyXG4vLyAgIGlmIChpIDwgNCkge1xyXG4vLyAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbi8vICAgICAgIGNvbnN0IHduID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZnJhbWUnKS5jb250ZW50V2luZG93O1xyXG4vLyAgICAgICAvLyBwb3N0TWVzc2FnZSBhcmd1bWVudHM6IGRhdGEgdG8gc2VuZCwgdGFyZ2V0IG9yaWdpblxyXG4vLyAgICAgICBjb25zdCBtc2cgPSB7ICdyZXF1ZXN0JzogJ2dldFF1b3RlJywgcmVxdWVzdElkIH07XHJcbi8vICAgICAgIGlmICghd2luZG93LnBhcnRuZXJfbGluaykgbXNnLmluY2x1ZGVfcGFydG5lcmxpbmsgPSB0cnVlO1xyXG4vLyAgICAgICB0cnkge1xyXG4vLyAgICAgICAgIHduLnBvc3RNZXNzYWdlKG1zZywgJ2h0dHBzOi8vc2VsbC5waG9uZXMudHJhZGUnKTtcclxuLy8gICAgICAgfSBjYXRjaCAoZSkge1xyXG4vLyAgICAgICAgIGFsZXJ0KGBGYWlsZWQgdG8gcG9zdE1lc3NhZ2U6ICR7ZS50b1N0cmluZygpfWApO1xyXG4vLyAgICAgICB9XHJcbi8vICAgICAgIHNlbmRHZXRRdW90ZShyZXF1ZXN0SWQsIGkpO1xyXG4vLyAgICAgfSwgNTAwMCk7XHJcbi8vICAgfVxyXG4vLyB9XHJcblxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFByaWNlKG1vZGVsS2V5LCBzdG9yYWdlS2V5LCBuZXR3b3JrS2V5LCBjb25kaXRpb25LZXksIGFEZWR1Y3Rpb25LZXlzKSB7XHJcbiAgbGV0IHNEZWR1Y3Rpb25LZXlzID0gYURlZHVjdGlvbktleXMgPyBhRGVkdWN0aW9uS2V5cy5qb2luKCctJykgOiAnJztcclxuICBpZiAoc0RlZHVjdGlvbktleXMpIHNEZWR1Y3Rpb25LZXlzID0gYCZkZWR1Y3Rpb25zPSR7c0RlZHVjdGlvbktleXN9YDtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9wcmljZXMucGhvbmVzLnRyYWRlLz9nZXR2YXJpYW50cHJpY2U9MSZtb2RlbD0ke21vZGVsS2V5fSZzdG9yYWdlPSR7c3RvcmFnZUtleSAgfHwgJyd9Jm5ldHdvcms9JHtuZXR3b3JrS2V5IHx8ICcnfSZjb25kaXRpb249JHtjb25kaXRpb25LZXkgIHx8ICcnfSR7c0RlZHVjdGlvbktleXN9YClcclxuICAgIC50aGVuKHggPT4geC50ZXh0KCkpXHJcbiAgICAudGhlbih4ID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4KTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgcmV0dXJuIHJlcztcclxuICAvLyBpZiAoJ3ByaWNlJyBpbiByZXMpIHJldHVybiB7XHJcbiAgLy8gICBwcmljZTogcmVzLnByaWNlXHJcbiAgLy8gfTtcclxufVxyXG4iLCJpbXBvcnQgeyBfYXBpU2VuZEJ1ZyB9IGZyb20gXCIuL19hcGlTZW5kQnVnXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckVtYWlsKCkge1xyXG4gIGlmICh3aW5kb3cudXNlckVtYWlsKSByZXR1cm4gd2luZG93LnVzZXJFbWFpbDtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNfX05FWFRfREFUQV9fJykudGV4dENvbnRlbnQ7XHJcbiAgICBjb25zdCBvID0gSlNPTi5wYXJzZShzKTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG8ucHJvcHMucGFnZVByb3BzLmluaXRpYWxBcG9sbG9TdGF0ZSkge1xyXG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ1VzZXInKSkge1xyXG4gICAgICAgIHdpbmRvdy51c2VyRW1haWwgPSBvLnByb3BzLnBhZ2VQcm9wcy5pbml0aWFsQXBvbGxvU3RhdGVba2V5XS5hY2NvdW50LmVtYWlsO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2luZG93LnVzZXJFbWFpbDtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgX2FwaVNlbmRCdWcoeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgdXNlciBlbWFpbCcsIGRldGFpbHM6IGUudG9TdHJpbmcoKSB9KTtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBoYW5kbGVGZXRjaEVycm9ycyB9IGZyb20gXCIuL2hhbmRsZUZldGNoRXJyb3JzXCI7XHJcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4vc2xlZXBcIjtcclxuaW1wb3J0IHsgX2FwaVNlbmRCdWcgfSBmcm9tIFwiLi9fYXBpU2VuZEJ1Z1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1vZGVsTWF0Y2hlcygpIHtcclxuICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgbW9kZWwgbWF0Y2hlcy4nKTtcclxuICByZXR1cm4gZmV0Y2goJ2h0dHBzOi8vc2hlZXRzLmhvcGxhLnRvb2xzLz9IVD1mNjkwNzZjZjUyODQzNzRhMDllYzcyMTc2OGJkZjBhZSZmb3JtYXQ9anNvbiZzaGVldF9uYW1lPU1vZGVsJTIwTWF0Y2hlcycpXHJcbiAgICAudGhlbihhc3luYyByZXMgPT4gaGFuZGxlRmV0Y2hFcnJvcnMocmVzKSlcclxuICAgIC50aGVuKHggPT4geC50ZXh0KCkpXHJcbiAgICAudGhlbih4ID0+IHtcclxuICAgICAgeCA9IEpTT04ucGFyc2UoeCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdNb2RlbCBtYXRjaGVzIGhhcyBiZWVuIGZldGNoZWQuJyk7XHJcbiAgICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgICBpZiAoeC5yZXN1bHQgJiYgQXJyYXkuaXNBcnJheSh4LnJlc3VsdCkgJiYgeC5yZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgeC5yZXN1bHQuZm9yRWFjaChvID0+IHtcclxuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcclxuICAgICAgICAgICAgaWYgKCFyZXNba2V5XSkgcmVzW2tleV0gPSBbXTtcclxuICAgICAgICAgICAgaWYgKG9ba2V5XSkgcmVzW2tleV0ucHVzaChvW2tleV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH1cclxuICAgICAgX2FwaVNlbmRCdWcoeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgbW9kZWwgbWF0Y2hlcy4nLCB4IH0pO1xyXG4gICAgICBhbGVydCgnRmFpbGVkIHRvIGdldCBtb2RlbCBtYXRjaGVzLicpO1xyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgX2FwaVNlbmRCdWcoeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgbW9kZWwgbWF0Y2hlcy4nLCBlOiBlLnRvU3RyaW5nKCkgfSk7XHJcbiAgICAgIC8vIGFsZXJ0KCdGYWlsZWQgdG8gZ2V0IG1vZGVsIG1hdGNoZXMuJyk7XHJcbiAgICAgIHJldHVybiBzbGVlcCgxMDAwMCkudGhlbigoKSA9PiBnZXRNb2RlbE1hdGNoZXMoKSk7XHJcbiAgICAgIC8vIHJldHVybiBnZXRNb2RlbE1hdGNoZXMoKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTdG9yYWdlTWF0Y2hlcygpIHtcclxuICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgc3RvcmFnZSBtYXRjaGVzLicpO1xyXG4gIHJldHVybiBmZXRjaCgnaHR0cHM6Ly9zaGVldHMuaG9wbGEudG9vbHMvP0hUPWY2OTA3NmNmNTI4NDM3NGEwOWVjNzIxNzY4YmRmMGFlJmZvcm1hdD1qc29uJnNoZWV0X25hbWU9U3RvcmFnZSUyME1hdGNoZXMnKVxyXG4gICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAudGhlbih4ID0+IHgudGV4dCgpKVxyXG4gICAgLnRoZW4oeCA9PiB7XHJcbiAgICAgIHggPSBKU09OLnBhcnNlKHgpO1xyXG4gICAgICBjb25zb2xlLmxvZygnU3RvcmFnZSBtYXRjaGVzIGhhcyBiZWVuIGZldGNoZWQuJyk7XHJcbiAgICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgICBpZiAoeC5yZXN1bHQgJiYgQXJyYXkuaXNBcnJheSh4LnJlc3VsdCkgJiYgeC5yZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgeC5yZXN1bHQuZm9yRWFjaChvID0+IHtcclxuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcclxuICAgICAgICAgICAgaWYgKCFyZXNba2V5XSkgcmVzW2tleV0gPSBbXTtcclxuICAgICAgICAgICAgaWYgKG9ba2V5XSkgcmVzW2tleV0ucHVzaChvW2tleV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH1cclxuICAgICAgX2FwaVNlbmRCdWcoeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgc3RvcmFnZSBtYXRjaGVzLicsIHggfSk7XHJcbiAgICAgIGFsZXJ0KCdGYWlsZWQgdG8gZ2V0IHN0b3JhZ2UgbWF0Y2hlcy4nKTtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgIF9hcGlTZW5kQnVnKHsgZXJyb3I6ICdGYWlsZWQgdG8gZ2V0IHN0b3JhZ2UgbWF0Y2hlcy4nLCBlOiBlLnRvU3RyaW5nKCkgfSk7XHJcbiAgICAgIC8vIGFsZXJ0KCdGYWlsZWQgdG8gZ2V0IHN0b3JhZ2UgbWF0Y2hlcy4nKTtcclxuICAgICAgcmV0dXJuIHNsZWVwKDEwMDAwKS50aGVuKCgpID0+IGdldFN0b3JhZ2VNYXRjaGVzKCkpO1xyXG4gICAgICAvLyByZXR1cm4gZ2V0U3RvcmFnZU1hdGNoZXMoKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXROZXR3b3JrTWF0Y2hlcygpIHtcclxuICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgbmV0d29yayBtYXRjaGVzLicpO1xyXG4gIHJldHVybiBmZXRjaCgnaHR0cHM6Ly9zaGVldHMuaG9wbGEudG9vbHMvP0hUPWY2OTA3NmNmNTI4NDM3NGEwOWVjNzIxNzY4YmRmMGFlJmZvcm1hdD1qc29uJnNoZWV0X25hbWU9TmV0d29yayUyME1hdGNoZXMnKVxyXG4gICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAudGhlbih4ID0+IHgudGV4dCgpKVxyXG4gICAgLnRoZW4oeCA9PiB7XHJcbiAgICAgIHggPSBKU09OLnBhcnNlKHgpO1xyXG4gICAgICBjb25zb2xlLmxvZygnTmV0d29yayBtYXRjaGVzIGhhcyBiZWVuIGZldGNoZWQuJyk7XHJcbiAgICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgICBpZiAoeC5yZXN1bHQgJiYgQXJyYXkuaXNBcnJheSh4LnJlc3VsdCkgJiYgeC5yZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgeC5yZXN1bHQuZm9yRWFjaChvID0+IHtcclxuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcclxuICAgICAgICAgICAgaWYgKCFyZXNba2V5XSkgcmVzW2tleV0gPSBbXTtcclxuICAgICAgICAgICAgaWYgKG9ba2V5XSkgcmVzW2tleV0ucHVzaChvW2tleV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH1cclxuICAgICAgX2FwaVNlbmRCdWcoeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgbmV0d29yayBtYXRjaGVzLicsIHggfSk7XHJcbiAgICAgIGFsZXJ0KCdGYWlsZWQgdG8gZ2V0IG5ldHdvcmsgbWF0Y2hlcy4nKTtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgIF9hcGlTZW5kQnVnKHsgZXJyb3I6ICdGYWlsZWQgdG8gZ2V0IG5ldHdvcmsgbWF0Y2hlcy4nLCBlOiBlLnRvU3RyaW5nKCkgfSk7XHJcbiAgICAgIC8vIGFsZXJ0KCdGYWlsZWQgdG8gZ2V0IG5ldHdvcmsgbWF0Y2hlcy4nKTtcclxuICAgICAgcmV0dXJuIHNsZWVwKDEwMDAwKS50aGVuKCgpID0+IGdldE5ldHdvcmtNYXRjaGVzKCkpO1xyXG4gICAgICAvLyByZXR1cm4gZ2V0TmV0d29ya01hdGNoZXMoKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREZWR1Y3Rpb25NYXRjaGVzKCkge1xyXG4gIGNvbnNvbGUubG9nKCdGZXRjaGluZyBkZWR1Y3Rpb24gbWF0Y2hlcy4nKTtcclxuICByZXR1cm4gZmV0Y2goJ2h0dHBzOi8vc2hlZXRzLmhvcGxhLnRvb2xzLz9IVD1mNjkwNzZjZjUyODQzNzRhMDllYzcyMTc2OGJkZjBhZSZmb3JtYXQ9anNvbiZzaGVldF9uYW1lPURlZHVjdGlvbiUyME1hdGNoZXMnKVxyXG4gICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAudGhlbih4ID0+IHgudGV4dCgpKVxyXG4gICAgLnRoZW4oeCA9PiB7XHJcbiAgICAgIHggPSBKU09OLnBhcnNlKHgpO1xyXG4gICAgICBjb25zb2xlLmxvZygnRGVkdWN0aW9uIG1hdGNoZXMgaGFzIGJlZW4gZmV0Y2hlZC4nKTtcclxuICAgICAgY29uc3QgcmVzID0ge307XHJcbiAgICAgIGlmICh4LnJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHgucmVzdWx0KSAmJiB4LnJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICB4LnJlc3VsdC5mb3JFYWNoKG8gPT4ge1xyXG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xyXG4gICAgICAgICAgICBpZiAoIXJlc1trZXldKSByZXNba2V5XSA9IFtdO1xyXG4gICAgICAgICAgICBpZiAob1trZXldKSByZXNba2V5XS5wdXNoKG9ba2V5XSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgfVxyXG4gICAgICBfYXBpU2VuZEJ1Zyh7IGVycm9yOiAnRmFpbGVkIHRvIGdldCBkZWR1Y3Rpb24gbWF0Y2hlcy4nLCB4IH0pO1xyXG4gICAgICBhbGVydCgnRmFpbGVkIHRvIGdldCBkZWR1Y3Rpb24gbWF0Y2hlcy4nKTtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgIF9hcGlTZW5kQnVnKHsgZXJyb3I6ICdGYWlsZWQgdG8gZ2V0IGRlZHVjdGlvbiBtYXRjaGVzLicsIGU6IGUudG9TdHJpbmcoKSB9KTtcclxuICAgICAgYWxlcnQoJ0ZhaWxlZCB0byBnZXQgZGVkdWN0aW9uIG1hdGNoZXMuJyk7XHJcbiAgICAgIHJldHVybiBzbGVlcCgxMDAwMCkudGhlbigoKSA9PiBnZXREZWR1Y3Rpb25NYXRjaGVzKCkpO1xyXG4gICAgICAvLyByZXR1cm4gZ2V0RGVkdWN0aW9uTWF0Y2hlcygpO1xyXG4gICAgfSk7XHJcbn0iLCJpbXBvcnQgeyBnZXREYXRhRnJvbUF0dHJpYnV0ZSB9IGZyb20gXCIuL2dldERhdGFGcm9tQXR0cmlidXRlXCI7XHJcbmltcG9ydCB7IGdldEl0ZW1JbmZvIH0gZnJvbSBcIi4vZ2V0SXRlbUluZm9cIjtcclxuaW1wb3J0IHsgZ2V0RGVkdWN0aW9uTWF0Y2hlcywgZ2V0TW9kZWxNYXRjaGVzLCBnZXROZXR3b3JrTWF0Y2hlcywgZ2V0U3RvcmFnZU1hdGNoZXMgfSBmcm9tIFwiLi9nZXRNYXRjaGVzXCI7XHJcbmltcG9ydCB7IHVwZGF0ZUJ1Z0luZm8gfSBmcm9tIFwiLi91cGRhdGVCdWdJbmZvXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmFyaWFudChpZCkge1xyXG4gIHdpbmRvdy50ZXh0TWF0Y2hJbmRleCA9IHt9O1xyXG4gIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0gPSB7fTtcclxuICAvLyBjb25zb2xlLmxvZygnZ2V0dmFyaWFudCcsIGlkKTtcclxuICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0SXRlbUluZm8oaWQpO1xyXG4gIC8vIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKFwie1xcXCJ0aXRsZVxcXCI6XFxcIklwaG9uZSA4IDY0Z2IgZmFjdG9yeSB1bmxvY2tlZFxcXCIsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiRmFjdG9yeSB1bmxvY2tlZFxcXFxuQ2xlYW4gaW1laSBcXFxcblxcXFxuVG1vYmlsZSAvIG1ldHJvIHBjcyAvIG5ldCAxMCAvIGgyMCAvIHNpbXBsZSBtb2JpbGUgLyBhdHQgLyBhbmQgbWFueSBtb3JlXFxcXG5cXFxcbldFIEFSRSBBIFNUT1JFISBcXFxcXFxcIkNlbGwgcGhvbmUgSG9wZVxcXFxcXFwiIDkwIGRheXMgd2FyYW50eVxcXFxuXFxcXG5PdXIgQWRkcmVzcyA6IDQ1NCBzdyA4dGggc3QgfHwgbWlhbWkgLEZMIHx8IDMzMTMwXFxcXG5cXFxcbkMuQS5MLkwgVS5TIC8vMy8wLzUvOC83LzkvMy8wLzgvMS8vXFxcIixcXFwiY29uZGl0aW9uXFxcIjo0MCxcXFwicHJpY2VcXFwiOlxcXCIyMDBcXFwifVwiKTtcclxuICBjb25zdCBvdXQgPSB7fTtcclxuICBvdXQubW9kZWwgPSBhd2FpdCBnZXRNb2RlbCgpO1xyXG4gIG91dC5zdG9yYWdlID0gYXdhaXQgZ2V0U3RvcmFnZSgpO1xyXG4gIG91dC5uZXR3b3JrID0gYXdhaXQgZ2V0TmV0d29yaygpO1xyXG4gIG91dC5jb25kaXRpb24gPSBhd2FpdCBnZXRDb25kaXRpb24oKTtcclxuICBvdXQuZGVkdWN0aW9ucyA9IGF3YWl0IGdldERlZHVjdGlvbnMoKTtcclxuICBpZiAoZGF0YS5wcmljZSkge1xyXG4gICAgb3V0Lmxpc3RpbmdfcHJpY2UgPSBwYXJzZUZsb2F0KGRhdGEucHJpY2UpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvdXQubGlzdGluZ19wcmljZSA9IDA7XHJcbiAgfVxyXG4gIHdpbmRvdy5sYXN0VmFyaWFudCA9IG91dDtcclxuICB1cGRhdGVCdWdJbmZvKGlkLCBkYXRhKTtcclxuICByZXR1cm4gb3V0O1xyXG4gIGFzeW5jIGZ1bmN0aW9uIGdldE1vZGVsKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dldE1vZGVsJyk7XHJcbiAgICBjb25zdCB0aXRsZSA9IGRhdGEudGl0bGUgJiYgZGF0YS50aXRsZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uICYmIGRhdGEuZGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IG1vZGVsRnJvbUF0dHJpYnV0ZSA9IGdldERhdGFGcm9tQXR0cmlidXRlKGRhdGEuYXR0cmlidXRlcywgJ21vZGVsJyk7XHJcbiAgICBjb25zdCBzb3J0ID0gW1wiMTFwcm9tYXhcIiwgXCIxMXByb1wiLCBcIjExXCIsIFwieHNtYXhcIiwgXCJ4c1wiLCBcInhyXCIsIFwieFwiLCBcIjhwbHVzXCIsIFwiOFwiLCBcIjdwbHVzXCIsIFwiN1wiLCBcInNlMlwiLCBcIjEycHJvbWF4XCIsIFwiMTJwcm9cIiwgXCIxMm1pbmlcIiwgXCIxMlwiLCBcIjEzcHJvbWF4XCIsIFwiMTNwcm9cIiwgXCIxM21pbmlcIiwgXCIxM1wiLCBcIjZwbHVzXCIsIFwiNnNwbHVzXCIsIFwiNnNcIiwgXCI2XCJdO1xyXG4gICAgaWYgKCF3aW5kb3cubW9kZWxNYXRjaGVzKSB7XHJcbiAgICAgIGNvbnN0IF9tYXRjaGVzID0gYXdhaXQgZ2V0TW9kZWxNYXRjaGVzKCk7XHJcbiAgICAgIHdpbmRvdy5tb2RlbE1hdGNoZXMgPSBbXTtcclxuICAgICAgc29ydC5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgd2luZG93Lm1vZGVsTWF0Y2hlcy5wdXNoKFtrZXksIF9tYXRjaGVzW2tleV1dKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtb2RlbE1hdGNoZXMgPSB3aW5kb3cubW9kZWxNYXRjaGVzO1xyXG5cclxuICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgbW9kZWxNYXRjaGVzKSB7XHJcbiAgICAgIGNvbnN0IGtleSA9IG1hdGNoWzBdO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygna2V5Jywga2V5KTtcclxuICAgICAgY29uc3Qga2V5TWF0Y2hlcyA9IG1hdGNoWzFdO1xyXG4gICAgICAvLyBrZXlNYXRjaGVzLmZvckVhY2goa2V5d29yZCA9PiB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdrZXlNYXRjaGVzJywga2V5TWF0Y2hlcyk7XHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShrZXlNYXRjaGVzKSkgY29udGludWU7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBrZXlNYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3Qgcmd4ID0gbmV3IFJlZ0V4cChrZXl3b3JkLCAnaScpO1xyXG4gICAgICAgIC8vIGlmIChtb2RlbEZyb21BdHRyaWJ1dGUuaW5jbHVkZXMoa2V5d29yZCkpIHtcclxuICAgICAgICBsZXQgbWF0Y2hlcyA9IG1vZGVsRnJvbUF0dHJpYnV0ZSAmJiBtb2RlbEZyb21BdHRyaWJ1dGUubWF0Y2gocmd4KTtcclxuICAgICAgICBpZiAobWF0Y2hlcykge1xyXG4gICAgICAgICAgaWYgKCF3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLm1vZGVsRnJvbUF0dHJpYnV0ZSkgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5tb2RlbEZyb21BdHRyaWJ1dGUgPSB7fTtcclxuICAgICAgICAgIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0ubW9kZWxGcm9tQXR0cmlidXRlLm1vZGVsID0geyByZ3ggfTtcclxuICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hdGNoZXMgPSB0aXRsZSAmJiB0aXRsZS5tYXRjaChyZ3gpO1xyXG4gICAgICAgIGlmIChtYXRjaGVzKSB7XHJcbiAgICAgICAgICBpZiAoIXdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0udGl0bGUpIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0udGl0bGUgPSB7fTtcclxuICAgICAgICAgIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0udGl0bGUubW9kZWwgPSB7IHJneCB9O1xyXG4gICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWF0Y2hlcyA9IGRlc2NyaXB0aW9uICYmIGRlc2NyaXB0aW9uLm1hdGNoKHJneCk7XHJcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcclxuICAgICAgICAgIGlmICghd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5kZXNjcmlwdGlvbikgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5kZXNjcmlwdGlvbiA9IHt9O1xyXG4gICAgICAgICAgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5kZXNjcmlwdGlvbi5tb2RlbCA9IHsgcmd4IH07XHJcbiAgICAgICAgICB3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLm1vZGVsID0geyB2aWE6ICdkZXNjcmlwdGlvbicsIGluZGV4OiBtYXRjaGVzLmluZGV4LCBsZW5ndGg6IHJneC5zb3VyY2UubGVuZ3RoLCB9O1xyXG4gICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgbW9kZWxNYXRjaGVzKSB7XHJcbiAgICAgIGNvbnN0IGtleSA9IG1hdGNoWzBdO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygna2V5Jywga2V5KTtcclxuICAgICAgY29uc3Qga2V5TWF0Y2hlcyA9IG1hdGNoWzFdO1xyXG4gICAgICAvLyBrZXlNYXRjaGVzLmZvckVhY2goa2V5d29yZCA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdrZXlNYXRjaGVzJywga2V5TWF0Y2hlcyk7XHJcbiAgICAgIGlmICgha2V5TWF0Y2hlcykgY29udGludWU7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBrZXlNYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3Qgcmd4ID0gbmV3IFJlZ0V4cChrZXl3b3JkLCAnaScpO1xyXG4gICAgICAgIC8vIGlmIChtb2RlbEZyb21BdHRyaWJ1dGUuaW5jbHVkZXMoa2V5d29yZCkpIHtcclxuICAgICAgICBpZiAobW9kZWxGcm9tQXR0cmlidXRlICYmIG1vZGVsRnJvbUF0dHJpYnV0ZS5tYXRjaChyZ3gpKSB7XHJcbiAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgICAgLy8gfSBlbHNlIGlmICh0aXRsZS5tYXRjaChyZ3gpKSB7XHJcbiAgICAgICAgICAvLyAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbi5tYXRjaChyZ3gpKSB7XHJcbiAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBhc3luYyBmdW5jdGlvbiBnZXRTdG9yYWdlKCkge1xyXG4gICAgY29uc3QgdGl0bGUgPSBkYXRhLnRpdGxlICYmIGRhdGEudGl0bGUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiAmJiBkYXRhLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cclxuICAgIGlmICghd2luZG93LnN0b3JhZ2VNYXRjaGVzKSB7XHJcbiAgICAgIHdpbmRvdy5zdG9yYWdlTWF0Y2hlcyA9IGF3YWl0IGdldFN0b3JhZ2VNYXRjaGVzKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd3aW5kb3cuc3RvcmFnZU1hdGNoZXMnLCB3aW5kb3cuc3RvcmFnZU1hdGNoZXMpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RvcmFnZU1hdGNoZXMgPSB3aW5kb3cuc3RvcmFnZU1hdGNoZXM7XHJcbiAgICAvLyBjb25zdCBzdG9yYWdlTWF0Y2hlcyA9IHtcclxuICAgIC8vICAgJzY0Z2InOiBbJzY0XFxcXHM/Z2I/J10sXHJcbiAgICAvLyAgICcxMjhnYic6IFsnMTI4XFxcXHM/Z2I/J10sXHJcbiAgICAvLyAgICcyNTZnYic6IFsnMjU2XFxcXHM/Z2I/J10sXHJcbiAgICAvLyAgICc1MTJnYic6IFsnNTEyXFxcXHM/Z2I/J10sXHJcbiAgICAvLyAgICczMmdiJzogWyczMlxcXFxzP2diPyddLFxyXG4gICAgLy8gfTtcclxuXHJcbiAgICBjb25zdCBpc1NraXBTdG9yYWdlcyA9IHsgLy8gV0UgRE9OVCBCVVlcclxuICAgICAgJzE2Z2InOiBbJzE2XFxcXHM/Z2InXSxcclxuICAgIH07XHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3RvcmFnZU1hdGNoZXMpIHtcclxuICAgICAgY29uc3Qga2V5TWF0Y2hlcyA9IHN0b3JhZ2VNYXRjaGVzW2tleV07XHJcbiAgICAgIC8vIGtleU1hdGNoZXMuZm9yRWFjaChrZXl3b3JkID0+IHtcclxuICAgICAgZm9yIChjb25zdCBrZXl3b3JkIG9mIGtleU1hdGNoZXMpIHtcclxuICAgICAgICBjb25zdCByZ3ggPSBuZXcgUmVnRXhwKGtleXdvcmQsICdpJyk7XHJcbiAgICAgICAgLy8gaWYgKHRpdGxlLmluY2x1ZGVzKGtleXdvcmQpKSB7XHJcbiAgICAgICAgaWYgKHRpdGxlICYmIHRpdGxlLm1hdGNoKHJneCkpIHtcclxuICAgICAgICAgIGlmICghd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS50aXRsZSkgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS50aXRsZSA9IHt9O1xyXG4gICAgICAgICAgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS50aXRsZS5zdG9yYWdlID0geyByZ3ggfTtcclxuICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICAvLyB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLmluY2x1ZGVzKGtleXdvcmQpKSB7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbi5tYXRjaChyZ3gpKSB7XHJcbiAgICAgICAgICBpZiAoIXdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0uZGVzY3JpcHRpb24pIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0uZGVzY3JpcHRpb24gPSB7fTtcclxuICAgICAgICAgIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0uZGVzY3JpcHRpb24uc3RvcmFnZSA9IHsgcmd4IH07XHJcbiAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gaXNTa2lwU3RvcmFnZXMpIHtcclxuICAgICAgY29uc3Qga2V5TWF0Y2hlcyA9IGlzU2tpcFN0b3JhZ2VzW2tleV07XHJcbiAgICAgIC8vIGtleU1hdGNoZXMuZm9yRWFjaChrZXl3b3JkID0+IHtcclxuICAgICAgZm9yIChjb25zdCBrZXl3b3JkIG9mIGtleU1hdGNoZXMpIHtcclxuICAgICAgICBjb25zdCByZ3ggPSBuZXcgUmVnRXhwKGtleXdvcmQsICdpJyk7XHJcbiAgICAgICAgLy8gaWYgKHRpdGxlLmluY2x1ZGVzKGtleXdvcmQpKSB7XHJcbiAgICAgICAgaWYgKHRpdGxlICYmIHRpdGxlLm1hdGNoKHJneCkpIHtcclxuICAgICAgICAgIG91dC5za2lwID0gdHJ1ZTtcclxuICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICAvLyB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLmluY2x1ZGVzKGtleXdvcmQpKSB7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbi5tYXRjaChyZ3gpKSB7XHJcbiAgICAgICAgICBvdXQuc2tpcCA9IHRydWU7XHJcbiAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBhc3luYyBmdW5jdGlvbiBnZXROZXR3b3JrKCkge1xyXG4gICAgY29uc3QgdGl0bGUgPSBkYXRhLnRpdGxlICYmIGRhdGEudGl0bGUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiAmJiBkYXRhLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBuZXR3b3JrRnJvbUF0dHJpYnV0ZSA9IGdldERhdGFGcm9tQXR0cmlidXRlKGRhdGEuYXR0cmlidXRlcywgJ2NhcnJpZXJOZXR3b3JrJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbmV0d29ya0Zyb21BdHRyaWJ1dGUnLCBuZXR3b3JrRnJvbUF0dHJpYnV0ZSk7XHJcbiAgICBjb25zdCBzb3J0ID0gWyd1bmxvY2tlZCcsICdsb2NrZWQnXTtcclxuICAgIGlmICghd2luZG93Lm5ldHdvcmtNYXRjaGVzKSB7XHJcbiAgICAgIGNvbnN0IF9tYXRjaGVzID0gYXdhaXQgZ2V0TmV0d29ya01hdGNoZXMoKTtcclxuICAgICAgd2luZG93Lm5ldHdvcmtNYXRjaGVzID0gW107XHJcbiAgICAgIHNvcnQuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5uZXR3b3JrTWF0Y2hlcy5wdXNoKFtrZXksIF9tYXRjaGVzW2tleV1dKTtcclxuICAgICAgfSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd3aW5kb3cubmV0d29ya01hdGNoZXMnLCB3aW5kb3cubmV0d29ya01hdGNoZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc3QgbmV0d29ya01hdGNoZXMgPSBbXHJcbiAgICAvLyAgIFsndW5sb2NrZWQnLCBbJ2ZhY3RvcnkgdW5sb2NrZWQnXV0sIC8vIFBSSU9SSVRZICMxLiBJRiBGT1VORC4gTUVBTlMgSVRTIFVOTE9DS0VELlxyXG4gICAgLy8gICBbJ3VubG9ja2VkJywgWyd1bmxvY2tlZCcsICd1bmxvY2snXV0sXHJcbiAgICAvLyAgIFsnbG9ja2VkJywgW1xyXG4gICAgLy8gICAgICd2ZXJpem9uJyxcclxuICAgIC8vICAgICAnYXQmdCcsXHJcbiAgICAvLyAgICAgJ3QtbW9iaWxlJyxcclxuICAgIC8vICAgICAnc3ByaW50JyxcclxuICAgIC8vICAgXV0sXHJcbiAgICAvLyBdO1xyXG4gICAgY29uc3QgbmV0d29ya01hdGNoZXMgPSB3aW5kb3cubmV0d29ya01hdGNoZXM7XHJcblxyXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBuZXR3b3JrTWF0Y2hlcykge1xyXG4gICAgICBjb25zdCBrZXkgPSBtYXRjaFswXTtcclxuICAgICAgY29uc3Qga2V5TWF0Y2hlcyA9IG1hdGNoWzFdO1xyXG4gICAgICAvLyBrZXlNYXRjaGVzLmZvckVhY2goa2V5d29yZCA9PiB7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBrZXlNYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3Qgcmd4ID0gbmV3IFJlZ0V4cChrZXl3b3JkLCAnaScpO1xyXG4gICAgICAgIGlmIChuZXR3b3JrRnJvbUF0dHJpYnV0ZSAmJiBuZXR3b3JrRnJvbUF0dHJpYnV0ZS5tYXRjaChyZ3gpKSB7XHJcbiAgICAgICAgICBpZiAoIXdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0ubmV0d29ya0Zyb21BdHRyaWJ1dGUpIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0ubmV0d29ya0Zyb21BdHRyaWJ1dGUgPSB7fTtcclxuICAgICAgICAgIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0ubmV0d29ya0Zyb21BdHRyaWJ1dGUubmV0d29yayA9IHsgcmd4IH07XHJcbiAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGl0bGUgJiYgdGl0bGUubWF0Y2gocmd4KSkge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2codGl0bGUsICdpbmNsdWRlcycsIGtleXdvcmQpO1xyXG4gICAgICAgICAgaWYgKCF3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLnRpdGxlKSB3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLnRpdGxlID0ge307XHJcbiAgICAgICAgICB3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLnRpdGxlLm5ldHdvcmsgPSB7IHJneCB9O1xyXG4gICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uICYmIGRlc2NyaXB0aW9uLm1hdGNoKHJneCkpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRlc2NyaXB0aW9uLCAnaW5jbHVkZXMnLCBrZXl3b3JkKTtcclxuICAgICAgICAgIGlmICghd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5kZXNjcmlwdGlvbikgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5kZXNjcmlwdGlvbiA9IHt9O1xyXG4gICAgICAgICAgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5kZXNjcmlwdGlvbi5uZXR3b3JrID0geyByZ3ggfTtcclxuICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGdldENvbmRpdGlvbigpIHtcclxuICAgIC8vIDEwMCA9IE5ld1xyXG4gICAgLy8gODAgPSBSZWNvbmRpdGlvbmVkL0NlcnRpZmllZFxyXG4gICAgLy8gNjAgPSBPcGVuIEJveCAobmV2ZXIgdXNlZClcclxuICAgIC8vIDQwID0gVXNlZCAobm9ybWFsIHdlYXIpXHJcbiAgICAvLyAyMCA9IEZvciBQYXJ0c1xyXG4gICAgLy8gMCA9IE90aGVyIChzZWUgZGVzY3JpcHRpb24pXHJcblxyXG4gICAgLy8gb3VyIG1hcHBpbmdcclxuICAgIC8vIDEwMCA9IGJcclxuICAgIC8vIDgwID0gYlxyXG4gICAgLy8gNjAgPSBhXHJcbiAgICAvLyA0MCA9IGJcclxuICAgIC8vIDIwID0gc2tpcFxyXG4gICAgLy8gMCA9IGIgKFxyXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5jb25kaXRpb24pIHtcclxuICAgICAgaWYgKGRhdGEuY29uZGl0aW9uID09PSAxMDApIHJldHVybiAnbGlrZW5ldyc7XHJcbiAgICAgIGlmIChkYXRhLmNvbmRpdGlvbiA9PT0gODApIHJldHVybiAnbGlrZW5ldyc7XHJcbiAgICAgIGlmIChkYXRhLmNvbmRpdGlvbiA9PT0gNjApIHJldHVybiAnbmV3JztcclxuICAgICAgaWYgKGRhdGEuY29uZGl0aW9uID09PSA0MCkgcmV0dXJuICdsaWtlbmV3JztcclxuICAgICAgaWYgKGRhdGEuY29uZGl0aW9uID09PSAyMCkge1xyXG4gICAgICAgIG91dC5za2lwID0gdHJ1ZTtcclxuICAgICAgICBjb25zb2xlLmxvZygnU2tpcHBlZCBiZWNhdXNlIGNvbmRpdGlvbiBpcyBGb3IgUGFydHMuJyk7XHJcbiAgICAgICAgcmV0dXJuICdkZWFkJztcclxuICAgICAgfVxyXG4gICAgICBpZiAoZGF0YS5jb25kaXRpb24gPT09IDApIHJldHVybiAnbGlrZW5ldyc7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGFzeW5jIGZ1bmN0aW9uIGdldERlZHVjdGlvbnMoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0RGVkdWN0aW9ucycpO1xyXG4gICAgY29uc3QgdGl0bGUgPSBkYXRhLnRpdGxlICYmIGRhdGEudGl0bGUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiAmJiBkYXRhLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgY29uc3Qgc29ydCA9IFsnaWNsb3VkJywgJ2NyYWNrZWRjYW1lcmFsZW5zJywgJ2ZhY2VpZCBpc3N1ZSddO1xyXG4gICAgaWYgKCF3aW5kb3cuZGVkdWN0aW9uTWF0Y2hlcykge1xyXG4gICAgICBjb25zdCBfbWF0Y2hlcyA9IGF3YWl0IGdldERlZHVjdGlvbk1hdGNoZXMoKTtcclxuICAgICAgd2luZG93LmRlZHVjdGlvbk1hdGNoZXMgPSBbXTtcclxuICAgICAgc29ydC5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgd2luZG93LmRlZHVjdGlvbk1hdGNoZXMucHVzaChba2V5LCBfbWF0Y2hlc1trZXldXSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnd2luZG93LmRlZHVjdGlvbk1hdGNoZXMnLCB3aW5kb3cuZGVkdWN0aW9uTWF0Y2hlcyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkZWR1Y3Rpb25NYXRjaGVzID0gd2luZG93LmRlZHVjdGlvbk1hdGNoZXM7XHJcbiAgICAvLyBjb25zdCBkZWR1Y3Rpb25NYXRjaGVzID0gW1xyXG4gICAgLy8gICBbJ2ljbG91ZCcsIFsnaWNsb3VkIGxvY2snXV0sXHJcbiAgICAvLyAgIFsnY3JhY2tlZGNhbWVyYWxlbnMnLCBbJ2NyYWNrLitjYW1lcmFcXFxccz9sZW5zJ11dLFxyXG4gICAgLy8gICBbJ2ZhY2VpZCBpc3N1ZScsIFsnbm9cXFxccz9mYWNlXFxcXHM/aWQnXV1cclxuICAgIC8vIF07XHJcbiAgICBjb25zdCBkZWR1Y3Rpb25zID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBkZWR1Y3Rpb25NYXRjaGVzKSB7XHJcbiAgICAgIGNvbnN0IGtleSA9IG1hdGNoWzBdO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygna2V5Jywga2V5KTtcclxuICAgICAgY29uc3Qga2V5TWF0Y2hlcyA9IG1hdGNoWzFdO1xyXG4gICAgICAvLyBrZXlNYXRjaGVzLmZvckVhY2goa2V5d29yZCA9PiB7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBrZXlNYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3Qgcmd4ID0gbmV3IFJlZ0V4cChrZXl3b3JkLCAnaScpO1xyXG4gICAgICAgIC8vIGlmIChtb2RlbEZyb21BdHRyaWJ1dGUuaW5jbHVkZXMoa2V5d29yZCkpIHtcclxuICAgICAgICBpZiAodGl0bGUgJiYgdGl0bGUubWF0Y2gocmd4KSkge1xyXG4gICAgICAgICAgaWYgKCF3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLnRpdGxlKSB3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLnRpdGxlID0ge307XHJcbiAgICAgICAgICBpZiAoIXdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0udGl0bGUuZGVkdWN0aW9ucykgd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS50aXRsZS5kZWR1Y3Rpb25zID0gW107XHJcbiAgICAgICAgICB3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLnRpdGxlLmRlZHVjdGlvbnMucHVzaChyZ3gpO1xyXG4gICAgICAgICAgZGVkdWN0aW9ucy5wdXNoKGtleSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbi5tYXRjaChyZ3gpKSB7XHJcbiAgICAgICAgICBpZiAoIXdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0uZGVzY3JpcHRpb24pIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0uZGVzY3JpcHRpb24gPSB7fTtcclxuICAgICAgICAgIGlmICghd2luZG93LnRleHRNYXRjaEluZGV4W2lkXS5kZXNjcmlwdGlvbi5kZWR1Y3Rpb25zKSB3aW5kb3cudGV4dE1hdGNoSW5kZXhbaWRdLmRlc2NyaXB0aW9uLmRlZHVjdGlvbnMgPSBbXTtcclxuICAgICAgICAgIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtpZF0uZGVzY3JpcHRpb24uZGVkdWN0aW9ucy5wdXNoKHJneCk7XHJcbiAgICAgICAgICBkZWR1Y3Rpb25zLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKCdkZWR1Y3Rpb25zJywgZGVkdWN0aW9ucyk7XHJcbiAgICByZXR1cm4gZGVkdWN0aW9ucztcclxuICB9XHJcbn1cclxud2luZG93LmdldFZhcmlhbnQgPSBnZXRWYXJpYW50OyIsImltcG9ydCBzZW5kRGVidWdMb2cgZnJvbSBcIi4vc2VuZERlYnVnTG9nXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBnZXRXZWJzaXRlVmFyaWFibGUodWlkKSB7XHJcbiAgcmV0dXJuIGZldGNoKGBodHRwczovL3VzLWNlbnRyYWwxLXRyYWRlLWFwcGxlcy5jbG91ZGZ1bmN0aW9ucy5uZXQvcGFydG5lcnM/Z2V0RG9tYWluPTEmdWlkPSR7dWlkfWApXHJcbiAgICAudGhlbihyZXMgPT4gcmVzLnRleHQoKSlcclxuICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzSnNvbiA9IEpTT04ucGFyc2UocmVzKTtcclxuICAgICAgICBsZXQgZG9tYWluID0gcmVzSnNvbiAmJiByZXNKc29uLmRvbWFpbjtcclxuICAgICAgICBpZiAoIWRvbWFpbikgZG9tYWluID0gYCR7dWlkfS50cmFkZWFwcGxlcy5jb21gO1xyXG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke2RvbWFpbn1gO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7dWlkfS50cmFkZWFwcGxlcy5jb21gO1xyXG4gICAgICB9XHJcbiAgICB9KS5jYXRjaChlID0+IHtcclxuICAgICAgc2VuZERlYnVnTG9nKHtlcnJvcjogJ2dldFdlYnNpdGVWYXJpYWJsZSBmYWlsZWQuJywgZGV0YWlsOiBlLnRvU3RyaW5nKCl9KTtcclxuICAgICAgcmV0dXJuIGBodHRwczovLyR7dWlkfS50cmFkZWFwcGxlcy5jb21gO1xyXG4gICAgfSk7XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gaGFuZGxlRmV0Y2hFcnJvcnMocmVzcG9uc2UpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgaWYgKCF3aW5kb3cuaXNSdW4pIHJldHVybiByZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgY29uc29sZS50cmFjZSgpO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBoYXMgY2F1Z2h0IGVycm9yIGJ1dCBpcyBoYW5kbGVkJywgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgIC8vIHRocm93IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnZGVsYXkgc3RhcnQnKTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2RlbGF5IGVuZCcpO1xyXG4gICAgICAgIHJlamVjdChyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgfSwgMTAwMDApO1xyXG4gICAgICAvLyB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgfSk7XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gaW5qZWN0SG9wbGFMb2dpbihvblJlYWR5KSB7XHJcbiAgbGV0IGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICBlLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2h0dHBzOi8vbG9naW4uaG9wbGEudG8vanMvaG9wbGEtbG9naW4uanMnKTtcclxuICBlLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcclxuICBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgSE9QTEFfbG9naW4uaW5pdCh7XHJcbiAgICAgIHByb2plY3RpZDogJy1NdUg4ZXJDYy1ETy1HQVd2Tzd2JyxcclxuICAgICAgb25yZWFkeTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJVc2VyIERldGFpbHNcIiwgSE9QTEFfbG9naW4udXNlcik7IFxyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJZb3UgYXJlIGxvZ2dlZCBpbiBhcyBcIiwgSE9QTEFfbG9naW4udXNlci51aWQpO1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBvblJlYWR5ID09PSAnZnVuY3Rpb24nKSBvblJlYWR5KEhPUExBX2xvZ2luLnVzZXIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlKTtcclxuXHJcbiAgZG9jdW1lbnQuaGVhZC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8c3R5bGU+XHJcbiAgICAjdGEgLmhvcGxhLWJ1dHRvbiB7XHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgdG9wOiAyOSU7XHJcbiAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XHJcbiAgICB9XHJcbiAgICA8L3N0eWxlPmApO1xyXG59IiwiY29uc3QgeyBzaG93TGFzdENvbnNvbGVMb2cgfSA9IHJlcXVpcmUoXCIuL3Nob3dMYXN0Q29uc29sZUxvZ1wiKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RMb2dnZXIoKSB7XHJcbiAgaWYgKHdpbmRvdy5ldmVyeXRoaW5nID09PSB1bmRlZmluZWQpIHtcclxuICAgIHdpbmRvdy5ldmVyeXRoaW5nID0gW107XHJcblxyXG4gICAgY29uc29sZS5kZWZhdWx0TG9nID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcclxuICAgIGNvbnNvbGUubG9nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBzaG93TGFzdENvbnNvbGVMb2coQXJyYXkuZnJvbShhcmd1bWVudHMpLmpvaW4oJyAnKSk7XHJcbiAgICAgIHdpbmRvdy5ldmVyeXRoaW5nLnB1c2goeyBcInR5cGVcIjogXCJsb2dcIiwgXCJkYXRldGltZVwiOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgXCJ2YWx1ZVwiOiBBcnJheS5mcm9tKGFyZ3VtZW50cykgfSk7XHJcbiAgICAgIGNvbnNvbGUuZGVmYXVsdExvZy5hcHBseShjb25zb2xlLCBbbmV3IERhdGUoKS50b0xvY2FsZVN0cmluZygpLCAuLi5hcmd1bWVudHNdKTtcclxuICAgIH07XHJcbiAgICBjb25zb2xlLmRlZmF1bHRFcnJvciA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcclxuICAgIGNvbnNvbGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNob3dMYXN0Q29uc29sZUxvZyhBcnJheS5mcm9tKGFyZ3VtZW50cykuam9pbignICcpKTtcclxuICAgICAgd2luZG93LmV2ZXJ5dGhpbmcucHVzaCh7IFwidHlwZVwiOiBcImVycm9yXCIsIFwiZGF0ZXRpbWVcIjogbmV3IERhdGUoKS5nZXRUaW1lKCksIFwidmFsdWVcIjogQXJyYXkuZnJvbShhcmd1bWVudHMpIH0pO1xyXG4gICAgICBjb25zb2xlLmRlZmF1bHRFcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5kZWZhdWx0V2FybiA9IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpO1xyXG4gICAgY29uc29sZS53YXJuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB3aW5kb3cuZXZlcnl0aGluZy5wdXNoKHsgXCJ0eXBlXCI6IFwid2FyblwiLCBcImRhdGV0aW1lXCI6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBcInZhbHVlXCI6IEFycmF5LmZyb20oYXJndW1lbnRzKSB9KTtcclxuICAgICAgY29uc29sZS5kZWZhdWx0V2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5kZWZhdWx0RGVidWcgPSBjb25zb2xlLmRlYnVnLmJpbmQoY29uc29sZSk7XHJcbiAgICBjb25zb2xlLmRlYnVnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB3aW5kb3cuZXZlcnl0aGluZy5wdXNoKHsgXCJ0eXBlXCI6IFwiZGVidWdcIiwgXCJkYXRldGltZVwiOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgXCJ2YWx1ZVwiOiBBcnJheS5mcm9tKGFyZ3VtZW50cykgfSk7XHJcbiAgICAgIGNvbnNvbGUuZGVmYXVsdERlYnVnLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGluamVjdE1kbCgpIHtcclxuICBsZXQgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICBlLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcclxuICBlLnNldEF0dHJpYnV0ZSgnaHJlZicsICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2ljb24/ZmFtaWx5PU1hdGVyaWFsK0ljb25zJyk7XHJcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlKTtcclxuXHJcbiAgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICBlLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcclxuICBlLnNldEF0dHJpYnV0ZSgnaHJlZicsICdodHRwczovL2NvZGUuZ2V0bWRsLmlvLzEuMy4wL21hdGVyaWFsLmluZGlnby1waW5rLm1pbi5jc3MnKTtcclxuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGUpO1xyXG5cclxuICBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2NvZGUuZ2V0bWRsLmlvLzEuMy4wL21hdGVyaWFsLm1pbi5qcycpO1xyXG4gIC8vIGUuc2V0QXR0cmlidXRlKCdzcmMnLCBjaHJvbWUucnVudGltZS5nZXRVUkwoXCJyZXNvdXJjZXMvanMvbWF0ZXJpYWwubWluLmpzXCIpKTtcclxuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGUpO1xyXG4gIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICBlLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2RpYWxvZy1wb2x5ZmlsbC8wLjQuMi9kaWFsb2ctcG9seWZpbGwubWluLmpzJyk7XHJcbiAgLy8gZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIGNocm9tZS5ydW50aW1lLmdldFVSTChcInJlc291cmNlcy9qcy9kaWFsb2ctcG9seWZpbGwubWluLmpzXCIpKTtcclxuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGUpO1xyXG5cclxuICBkb2N1bWVudC5oZWFkLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxzdHlsZT5cclxuICAgICN0YSAubWRsLXN3aXRjaCB7XHJcbiAgICAgIHdpZHRoOiB1bnNldDtcclxuICAgIH1cclxuXHJcbiAgICAjX19uZXh0LCAuTXVpUGFwZXItcm9vdCB7XHJcbiAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAzNzBweCkgIWltcG9ydGFudDtcclxuICAgICAgbGVmdDogMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgICA8L3N0eWxlPmApO1xyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGluamVjdE1vbWVudCgpIHtcclxuICBjb25zdCBzcmMgPSBgaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbW9tZW50LmpzLzIuMjkuMi9tb21lbnQubWluLmpzYDtcclxuICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XHJcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlKTtcclxufSIsImV4cG9ydCBmdW5jdGlvbiBpbmplY3RTdHlsZSgpIHtcclxuICBjb25zdCBzdHlsZVN0cmluZyA9IGAubWRsLWxpc3RfX2l0ZW0udGFzZXBhcmF0b3Ige1xyXG4gICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNlMGUwZTA7XHJcbiAgfVxyXG4gIFxyXG4gIC5tZGwtbGlzdF9faXRlbS50YXNlcGFyYXRvciAubWRsLXRleHRmaWVsZF9faW5wdXQge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogdW5zZXQ7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICB9XHJcbiAgXHJcbiAgLm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb24udGF3c21hbGwge1xyXG4gICAgd2lkdGg6IDQ1cHg7XHJcbiAgfVxyXG4gIFxyXG4gIFtpZF49cGFnZV0gLmRlbW8tbGlzdC1jb250cm9sIHtcclxuICAgIG1hcmdpbi10b3A6IHVuc2V0O1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxNDNweCk7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICB9XHJcbiAgXHJcbiAgI3BhZ2UyIC5kZW1vLWxpc3QtY29udHJvbCB7XHJcbiAgICAvKiBtYXJnaW4tdG9wOiB1bnNldDtcclxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XHJcbiAgICBvdmVyZmxvdzogYXV0bzsgKi9cclxuICAgIG1hcmdpbi10b3A6IHVuc2V0O1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxOThweCk7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICB9XHJcbiAgXHJcbiAgI3RhIC5tZGwtdGV4dGZpZWxkIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAvKiAjdGEgLm1kbC10ZXh0ZmllbGRfX2xhYmVsIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9ICovXHJcbiAgXHJcbiAgLmxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgfVxyXG4gIFxyXG4gICNkaWFsb2ctYnVnIHtcclxuICAgIHdpZHRoOiA0MDBweDtcclxuICAgIGhlaWdodDogbWF4LWNvbnRlbnQ7XHJcbiAgfVxyXG4gIFxyXG4gIC5yZXBvcnQtZGV0YWlsIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgfVxyXG4gIFxyXG4gICNidWd2YXJpYW50ZGV0YWlscyB7XHJcbiAgICBib3JkZXI6IHNvbGlkIDFweDtcclxuICAgIHBhZGRpbmc6IDhweDtcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgLmJsdWUge1xyXG4gICAgY29sb3I6IGJsdWVcclxuICB9XHJcbiAgLmdyZWVuIHtcclxuICAgIGNvbG9yOiBncmVlblxyXG4gIH1cclxuICAucHVycGxlIHtcclxuICAgIGNvbG9yOiBwdXJwbGVcclxuICB9XHJcbiAgLnJlZCB7XHJcbiAgICBjb2xvcjogcmVkXHJcbiAgfVxyXG4gIC5iZ3JlZCB7XHJcbiAgICBiYWNrZ3JvdW5kOiByZWQgIWltcG9ydGFudDtcclxuICB9XHJcbiAgXHJcbiAgLmJ1dHRvbnNfY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBgO1xyXG5cclxuICBcclxuICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmQoc3R5bGUpO1xyXG4gIHN0eWxlLnRleHRDb250ZW50ID0gc3R5bGVTdHJpbmc7XHJcbn0iLCJpbXBvcnQgeyBpbmplY3RUcmFja0pzTW9kdWxlIH0gZnJvbSAnLi9pbmplY3RUcmFja0pzTW9kdWxlJztcclxuaW1wb3J0IHNlbmREZWJ1Z0xvZyBmcm9tICcuL3NlbmREZWJ1Z0xvZyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0VHJhY2tqcygpIHtcclxuICB0cnkge1xyXG4gICAgaW5qZWN0VHJhY2tKc01vZHVsZSgpO1xyXG4gICAgd2luZG93LlRyYWNrSlMgJiYgVHJhY2tKUy5pbnN0YWxsKHsgXHJcbiAgICAgIHRva2VuOiBcIjE2YzE4N2VmYjA1NTQxYzZiODFiZWUzMDVlMDcyN2QxXCIsXHJcbiAgICAgIGFwcGxpY2F0aW9uOiBcIm9mZmVydXBib3RcIlxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIHNlbmREZWJ1Z0xvZyh7ZXJyb3I6ICdGYWlsZWQgdG8gaW5zdGFsbCB0cmFja2pzJywgZGV0YWlsczogZS50b1N0cmluZygpfSk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGluamVjdFRyYWNrSnNNb2R1bGUoKSB7XHJcbiAgLy8hIFRyYWNrSlMgSmF2YVNjcmlwdCBlcnJvciBtb25pdG9yaW5nIGFnZW50LlxyXG4vLyEgQ09QWVJJR0hUIChjKSAyMDIxIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuLy8hIFNlZSBMaWNlbnNlIGF0IGh0dHBzOi8vdHJhY2tqcy5jb20vdGVybXMvXHJcbnNlbGYuVHJhY2tKUz1zZWxmLnRyYWNrSnM9KGZ1bmN0aW9uKGcsbCxuKXtcInVzZSBhd2Vzb21lXCI7dmFyIHU9ZnVuY3Rpb24oYSxiKXt0aGlzLmNvbmZpZz1hO3RoaXMub25FcnJvcj1iO2EuZW5hYmxlZCYmdGhpcy53YXRjaCgpfTt1LnByb3RvdHlwZT17d2F0Y2g6ZnVuY3Rpb24oKXtjLmZvckVhY2goW1wiRXZlbnRUYXJnZXRcIixcIk5vZGVcIixcIlhNTEh0dHBSZXF1ZXN0XCJdLGZ1bmN0aW9uKGEpe2MuaGFzKGcsYStcIi5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lclwiKSYmYy5oYXNPd24oZ1thXS5wcm90b3R5cGUsXCJhZGRFdmVudExpc3RlbmVyXCIpJiZ0aGlzLndyYXBFdmVudFRhcmdldChnW2FdLnByb3RvdHlwZSl9LHRoaXMpO3RoaXMud3JhcFRpbWVyKFwic2V0VGltZW91dFwiKTt0aGlzLndyYXBUaW1lcihcInNldEludGVydmFsXCIpfSx3cmFwOmZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGIpe3Rocm93IGQub25FcnJvcihcImNhdGNoXCIsYix7YmluZFRpbWU6ZSxiaW5kU3RhY2s6Zn0pLFxyXG5jLndyYXBFcnJvcihiKTt9fXZhciBkPXRoaXM7dHJ5e2lmKCFjLmlzRnVuY3Rpb24oYSl8fGMuaGFzT3duKGEsXCJfX3RyYWNranNfX1wiKSlyZXR1cm4gYTtpZihjLmhhc093bihhLFwiX190cmFja2pzX3N0YXRlX19cIikpcmV0dXJuIGEuX190cmFja2pzX3N0YXRlX199Y2F0Y2gocCl7cmV0dXJuIGF9dmFyIGUsZjtpZihkLmNvbmZpZy5iaW5kU3RhY2spdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKHApe2Y9cC5zdGFjayxlPWMuaXNvTm93KCl9Zm9yKHZhciBoIGluIGEpYy5oYXNPd24oYSxoKSYmKGJbaF09YVtoXSk7Yi5wcm90b3R5cGU9YS5wcm90b3R5cGU7Yi5fX3RyYWNranNfXz0hMDtyZXR1cm4gYS5fX3RyYWNranNfc3RhdGVfXz1ifSx3cmFwRXZlbnRUYXJnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztjLmhhcyhhLFwiYWRkRXZlbnRMaXN0ZW5lci5jYWxsXCIpJiZjLmhhcyhhLFwicmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsXCIpJiYoYy5wYXRjaChhLFwiYWRkRXZlbnRMaXN0ZW5lclwiLFxyXG5mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oZSxmLGgscCl7dHJ5e2MuaGFzKGYsXCJoYW5kbGVFdmVudFwiKSYmKGYuaGFuZGxlRXZlbnQ9Yi53cmFwKGYuaGFuZGxlRXZlbnQpKX1jYXRjaChnKXt9cmV0dXJuIGEuY2FsbCh0aGlzLGUsYi53cmFwKGYpLGgscCl9fSksYy5wYXRjaChhLFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGYsYyxnKXt0cnl7Zj1mJiYoZi5fX3RyYWNranNfc3RhdGVfX3x8Zil9Y2F0Y2goayl7fXJldHVybiBhLmNhbGwodGhpcyxiLGYsYyxnKX19KSl9LHdyYXBUaW1lcjpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2MucGF0Y2goZyxhLGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihlLGYpe3ZhciBoPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZz1oWzBdO2MuaXNGdW5jdGlvbihnKSYmKGhbMF09Yi53cmFwKGcpKTtyZXR1cm4gYy5oYXMoYSxcImFwcGx5XCIpP2EuYXBwbHkodGhpcyxoKTpcclxuYShoWzBdLGhbMV0pfX0pfX07dmFyIHE9ZnVuY3Rpb24oYSl7dGhpcy5pbml0Q3VycmVudChhKXx8Y29uc29sZS53YXJuKFwiW1RyYWNrSlNdIGludmFsaWQgY29uZmlnXCIpfTtxLnByb3RvdHlwZT17Y3VycmVudDp7fSxpbml0T25seTp7YXBwbGljYXRpb246ITAsY29va2llOiEwLGVuYWJsZWQ6ITAsdG9rZW46ITAsY2FsbGJhY2s6e2VuYWJsZWQ6ITB9LGNvbnNvbGU6e2VuYWJsZWQ6ITB9LG5hdmlnYXRpb246e2VuYWJsZWQ6ITB9LG5ldHdvcms6e2VuYWJsZWQ6ITAsZmV0Y2g6ITB9LHZpc2l0b3I6e2VuYWJsZWQ6ITB9LHdpbmRvdzp7ZW5hYmxlZDohMCxwcm9taXNlOiEwfX0sZGVmYXVsdHM6e2FwcGxpY2F0aW9uOlwiXCIsY29va2llOiExLGRlZHVwZTohMCxkZXBlbmRlbmNpZXM6ITAsZW5hYmxlZDohMCxmb3J3YXJkaW5nRG9tYWluOlwiXCIsZXJyb3JVUkw6XCJodHRwczovL2NhcHR1cmUudHJhY2tqcy5jb20vY2FwdHVyZVwiLGVycm9yTm9TU0xVUkw6XCJodHRwOi8vY2FwdHVyZS50cmFja2pzLmNvbS9jYXB0dXJlXCIsXHJcbmZhdWx0VVJMOlwiaHR0cHM6Ly91c2FnZS50cmFja2pzLmNvbS9mYXVsdC5naWZcIix1c2FnZVVSTDpcImh0dHBzOi8vdXNhZ2UudHJhY2tqcy5jb20vdXNhZ2UuZ2lmXCIsb25FcnJvcjpmdW5jdGlvbigpe3JldHVybiEwfSxzZXJpYWxpemU6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhKXt2YXIgZD1cIjxcIithLnRhZ05hbWUudG9Mb3dlckNhc2UoKTthPWEuYXR0cmlidXRlc3x8W107Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspZCs9XCIgXCIrYVtiXS5uYW1lKyc9XCInK2FbYl0udmFsdWUrJ1wiJztyZXR1cm4gZCtcIj5cIn1pZihcIlwiPT09YSlyZXR1cm5cIkVtcHR5IFN0cmluZ1wiO2lmKGE9PT1uKXJldHVyblwidW5kZWZpbmVkXCI7aWYoYy5pc1N0cmluZyhhKXx8Yy5pc051bWJlcihhKXx8Yy5pc0Jvb2xlYW4oYSl8fGMuaXNGdW5jdGlvbihhKSlyZXR1cm5cIlwiK2E7aWYoYy5pc0VsZW1lbnQoYSkpcmV0dXJuIGIoYSk7aWYoXCJzeW1ib2xcIj09PXR5cGVvZiBhKXJldHVybiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSk7XHJcbnZhciBkO3RyeXtkPUpTT04uc3RyaW5naWZ5KGEsZnVuY3Rpb24oYSxkKXtyZXR1cm4gZD09PW4/XCJ1bmRlZmluZWRcIjpjLmlzTnVtYmVyKGQpJiZpc05hTihkKT9cIk5hTlwiOmMuaXNFcnJvcihkKT97bmFtZTpkLm5hbWUsbWVzc2FnZTpkLm1lc3NhZ2Usc3RhY2s6ZC5zdGFja306Yy5pc0VsZW1lbnQoZCk/YihkKTpkfSl9Y2F0Y2goZil7ZD1cIlwiO2Zvcih2YXIgZSBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoZSkpdHJ5e2QrPScsXCInK2UrJ1wiOlwiJythW2VdKydcIid9Y2F0Y2goaCl7fWQ9ZD9cIntcIitkLnJlcGxhY2UoXCIsXCIsXCJcIikrXCJ9XCI6XCJVbnNlcmlhbGl6YWJsZSBPYmplY3RcIn1yZXR1cm4gZC5yZXBsYWNlKC9cInVuZGVmaW5lZFwiL2csXCJ1bmRlZmluZWRcIikucmVwbGFjZSgvXCJOYU5cIi9nLFwiTmFOXCIpfSxzZXNzaW9uSWQ6XCJcIix0b2tlbjpcIlwiLHVzZXJJZDpcIlwiLHZlcnNpb246XCJcIixjYWxsYmFjazp7ZW5hYmxlZDohMCxiaW5kU3RhY2s6ITF9LGNvbnNvbGU6e2VuYWJsZWQ6ITAsZGlzcGxheTohMCxcclxuZXJyb3I6ITAsd2FybjohMSx3YXRjaDpbXCJsb2dcIixcImRlYnVnXCIsXCJpbmZvXCIsXCJ3YXJuXCIsXCJlcnJvclwiXX0sbmF2aWdhdGlvbjp7ZW5hYmxlZDohMH0sbmV0d29yazp7ZW5hYmxlZDohMCxlcnJvcjohMCxmZXRjaDohMH0sdmlzaXRvcjp7ZW5hYmxlZDohMH0sd2luZG93OntlbmFibGVkOiEwLHByb21pc2U6ITB9fSxpbml0Q3VycmVudDpmdW5jdGlvbihhKXt0aGlzLnJlbW92ZUVtcHR5KGEpO2lmKHRoaXMudmFsaWRhdGUoYSx0aGlzLmRlZmF1bHRzLFwiW1RyYWNrSlNdIGNvbmZpZ1wiLHt9KSlyZXR1cm4gdGhpcy5jdXJyZW50PWMuZGVmYXVsdHNEZWVwKHt9LGEsdGhpcy5kZWZhdWx0cyksITA7dGhpcy5jdXJyZW50PWMuZGVmYXVsdHNEZWVwKHt9LHRoaXMuZGVmYXVsdHMpO3JldHVybiExfSxzZXRDdXJyZW50OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnZhbGlkYXRlKGEsdGhpcy5kZWZhdWx0cyxcIltUcmFja0pTXSBjb25maWdcIix0aGlzLmluaXRPbmx5KT8odGhpcy5jdXJyZW50PWMuZGVmYXVsdHNEZWVwKHt9LFxyXG5hLHRoaXMuY3VycmVudCksITApOiExfSxyZW1vdmVFbXB0eTpmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSlhLmhhc093blByb3BlcnR5KGIpJiZhW2JdPT09biYmZGVsZXRlIGFbYl19LHZhbGlkYXRlOmZ1bmN0aW9uKGEsYixkLGUpe3ZhciBmPSEwO2Q9ZHx8XCJcIjtlPWV8fHt9O2Zvcih2YXIgYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGc9dHlwZW9mIGJbY107ZyE9PXR5cGVvZiBhW2NdPyhjb25zb2xlLndhcm4oZCtcIi5cIitjK1wiOiBwcm9wZXJ0eSBtdXN0IGJlIHR5cGUgXCIrZytcIi5cIiksZj0hMSk6XCJbb2JqZWN0IEFycmF5XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFbY10pfHx0aGlzLnZhbGlkYXRlQXJyYXkoYVtjXSxiW2NdLGQrXCIuXCIrYyk/XCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhW2NdKT9mPXRoaXMudmFsaWRhdGUoYVtjXSxiW2NdLGQrXCIuXCIrXHJcbmMsZVtjXSk6ZS5oYXNPd25Qcm9wZXJ0eShjKSYmKGNvbnNvbGUud2FybihkK1wiLlwiK2MrXCI6IHByb3BlcnR5IGNhbm5vdCBiZSBzZXQgYWZ0ZXIgbG9hZC5cIiksZj0hMSk6Zj0hMX1lbHNlIGNvbnNvbGUud2FybihkK1wiLlwiK2MrXCI6IHByb3BlcnR5IG5vdCBzdXBwb3J0ZWQuXCIpLGY9ITE7cmV0dXJuIGZ9LHZhbGlkYXRlQXJyYXk6ZnVuY3Rpb24oYSxiLGQpe3ZhciBlPSEwO2Q9ZHx8XCJcIjtmb3IodmFyIGY9MDtmPGEubGVuZ3RoO2YrKyljLmNvbnRhaW5zKGIsYVtmXSl8fChjb25zb2xlLndhcm4oZCtcIltcIitmK1wiXTogaW52YWxpZCB2YWx1ZTogXCIrYVtmXStcIi5cIiksZT0hMSk7cmV0dXJuIGV9fTt2YXIgcj1mdW5jdGlvbihhLGIsZCxlLGMsaCxnKXt0aGlzLnV0aWw9YTt0aGlzLmxvZz1iO3RoaXMub25FcnJvcj1kO3RoaXMub25GYXVsdD1lO3RoaXMuc2VyaWFsaXplPWM7Zy5lbmFibGVkJiYoaC5jb25zb2xlPXRoaXMud3JhcENvbnNvbGVPYmplY3QoaC5jb25zb2xlLGcpKX07ci5wcm90b3R5cGU9XHJcbnt3cmFwQ29uc29sZU9iamVjdDpmdW5jdGlvbihhLGIpe2E9YXx8e307dmFyIGQ9YS5sb2d8fGZ1bmN0aW9uKCl7fSxlPXRoaXMsZjtmb3IoZj0wO2Y8Yi53YXRjaC5sZW5ndGg7ZisrKShmdW5jdGlvbihmKXt2YXIgZz1hW2ZdfHxkO2FbZl09ZnVuY3Rpb24oKXt0cnl7dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtlLmxvZy5hZGQoXCJjXCIse3RpbWVzdGFtcDplLnV0aWwuaXNvTm93KCksc2V2ZXJpdHk6ZixtZXNzYWdlOmUuc2VyaWFsaXplKDE9PT1kLmxlbmd0aD9kWzBdOmQpfSk7aWYoYltmXSlpZihjLmlzRXJyb3IoZFswXSkmJjE9PT1kLmxlbmd0aCllLm9uRXJyb3IoXCJjb25zb2xlXCIsZFswXSk7ZWxzZSB0cnl7dGhyb3cgRXJyb3IoZS5zZXJpYWxpemUoMT09PWQubGVuZ3RoP2RbMF06ZCkpO31jYXRjaChtKXtlLm9uRXJyb3IoXCJjb25zb2xlXCIsbSl9Yi5kaXNwbGF5JiYoZS51dGlsLmhhc0Z1bmN0aW9uKGcsXCJhcHBseVwiKT9nLmFwcGx5KGEsZCk6XHJcbmcoZFswXSkpfWNhdGNoKG0pe2Uub25GYXVsdChtKX19fSkoYi53YXRjaFtmXSk7cmV0dXJuIGF9LHJlcG9ydDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxvZy5hbGwoXCJjXCIpfX07dmFyIHY9ZnVuY3Rpb24oYSxiLGQsZSxjKXt0aGlzLmNvbmZpZz1hO3RoaXMudXRpbD1iO3RoaXMubG9nPWQ7dGhpcy53aW5kb3c9ZTt0aGlzLmRvY3VtZW50PWM7dGhpcy5jb3JyZWxhdGlvbklkPXRoaXMudG9rZW49bnVsbDt0aGlzLmluaXRpYWxpemUoKX07di5wcm90b3R5cGU9e2luaXRpYWxpemU6ZnVuY3Rpb24oKXt0aGlzLnRva2VuPXRoaXMuZ2V0Q3VzdG9tZXJUb2tlbigpO3RoaXMuY29ycmVsYXRpb25JZD10aGlzLmdldENvcnJlbGF0aW9uSWQoKX0sZ2V0Q3VzdG9tZXJUb2tlbjpmdW5jdGlvbigpe2lmKHRoaXMuY29uZmlnLmN1cnJlbnQudG9rZW4pcmV0dXJuIHRoaXMuY29uZmlnLmN1cnJlbnQudG9rZW47dmFyIGE9dGhpcy5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcclxucmV0dXJuIGFbYS5sZW5ndGgtMV0uZ2V0QXR0cmlidXRlKFwiZGF0YS10b2tlblwiKX0sZ2V0Q29ycmVsYXRpb25JZDpmdW5jdGlvbigpe3ZhciBhO2lmKCF0aGlzLmNvbmZpZy5jdXJyZW50LmNvb2tpZSlyZXR1cm4gdGhpcy51dGlsLnV1aWQoKTt0cnl7YT10aGlzLmRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKC8oPzooPzpefC4qO1xccyopVHJhY2tKU1xccypcXD1cXHMqKFteO10qKS4qJCl8Xi4qJC8sXCIkMVwiKSxhfHwoYT10aGlzLnV0aWwudXVpZCgpLHRoaXMuZG9jdW1lbnQuY29va2llPVwiVHJhY2tKUz1cIithK1wiOyBleHBpcmVzPUZyaSwgMzEgRGVjIDk5OTkgMjM6NTk6NTkgR01UOyBwYXRoPS9cIil9Y2F0Y2goYil7YT10aGlzLnV0aWwudXVpZCgpfXJldHVybiBhfSxyZXBvcnQ6ZnVuY3Rpb24oKXtyZXR1cm57YXBwbGljYXRpb246dGhpcy5jb25maWcuY3VycmVudC5hcHBsaWNhdGlvbixjb3JyZWxhdGlvbklkOnRoaXMuY29ycmVsYXRpb25JZCxzZXNzaW9uSWQ6dGhpcy5jb25maWcuY3VycmVudC5zZXNzaW9uSWQsXHJcbnRva2VuOnRoaXMudG9rZW4sdXNlcklkOnRoaXMuY29uZmlnLmN1cnJlbnQudXNlcklkLHZlcnNpb246dGhpcy5jb25maWcuY3VycmVudC52ZXJzaW9ufX19O3ZhciB3PWZ1bmN0aW9uKGEpe3RoaXMuY29uZmlnPWE7dGhpcy5sb2FkZWRPbj0obmV3IERhdGUpLmdldFRpbWUoKTt0aGlzLm9yaWdpbmFsVXJsPWMuZ2V0TG9jYXRpb24oKTt0aGlzLnJlZmVycmVyPWMuaXNCcm93c2VyP2wucmVmZXJyZXI6XCJcIn07dy5wcm90b3R5cGU9e2Rpc2NvdmVyRGVwZW5kZW5jaWVzOmZ1bmN0aW9uKCl7dmFyIGE9e1RyYWNrSlM6XCIzLjEwLjFcIn07Zy5qUXVlcnkmJmcualF1ZXJ5LmZuJiZnLmpRdWVyeS5mbi5qcXVlcnkmJihhLmpRdWVyeT1nLmpRdWVyeS5mbi5qcXVlcnkpO2cualF1ZXJ5JiZnLmpRdWVyeS51aSYmZy5qUXVlcnkudWkudmVyc2lvbiYmKGEualF1ZXJ5VUk9Zy5qUXVlcnkudWkudmVyc2lvbik7Zy5hbmd1bGFyJiZnLmFuZ3VsYXIudmVyc2lvbiYmZy5hbmd1bGFyLnZlcnNpb24uZnVsbCYmXHJcbihhLmFuZ3VsYXI9Zy5hbmd1bGFyLnZlcnNpb24uZnVsbCk7Zm9yKHZhciBiIGluIGcpaWYoXCJfdHJhY2tKc1wiIT09YiYmXCJfdHJhY2tKU1wiIT09YiYmXCJfdHJhY2tqc1wiIT09YiYmXCJ3ZWJraXRTdG9yYWdlSW5mb1wiIT09YiYmXCJ3ZWJraXRJbmRleGVkREJcIiE9PWImJlwidG9wXCIhPT1iJiZcInBhcmVudFwiIT09YiYmXCJmcmFtZUVsZW1lbnRcIiE9PWIpdHJ5e2lmKGdbYl0pe3ZhciBkPWdbYl0udmVyc2lvbnx8Z1tiXS5WZXJzaW9ufHxnW2JdLlZFUlNJT047XCJzdHJpbmdcIj09PXR5cGVvZiBkJiYoYVtiXT1kKX19Y2F0Y2goZSl7fWEuVHJhY2tKUyYmYS50cmFja0pzJiZkZWxldGUgYS50cmFja0pzO3JldHVybiBhfSxyZXBvcnQ6ZnVuY3Rpb24oKXtyZXR1cm57YWdlOihuZXcgRGF0ZSkuZ2V0VGltZSgpLXRoaXMubG9hZGVkT24sZGVwZW5kZW5jaWVzOnRoaXMuY29uZmlnLmN1cnJlbnQuZGVwZW5kZW5jaWVzP3RoaXMuZGlzY292ZXJEZXBlbmRlbmNpZXMoKTp7dHJhY2tKczpcIjMuMTAuMVwifSxvcmlnaW5hbFVybDp0aGlzLm9yaWdpbmFsVXJsLFxyXG5yZWZlcnJlcjp0aGlzLnJlZmVycmVyLHVzZXJBZ2VudDpnLm5hdmlnYXRvci51c2VyQWdlbnQsdmlld3BvcnRIZWlnaHQ6Yy5pc0Jyb3dzZXI/Zy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0OjAsdmlld3BvcnRXaWR0aDpjLmlzQnJvd3Nlcj9nLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDowfX19O3ZhciB4PWZ1bmN0aW9uKGEpe3RoaXMudXRpbD1hO3RoaXMuYXBwZW5kZXI9W107dGhpcy5tYXhMZW5ndGg9MzB9O3gucHJvdG90eXBlPXthbGw6ZnVuY3Rpb24oYSl7dmFyIGI9W10sZCxlO2ZvcihlPTA7ZTx0aGlzLmFwcGVuZGVyLmxlbmd0aDtlKyspKGQ9dGhpcy5hcHBlbmRlcltlXSkmJmQuY2F0ZWdvcnk9PT1hJiZiLnB1c2goZC52YWx1ZSk7cmV0dXJuIGJ9LGNsZWFyOmZ1bmN0aW9uKCl7dGhpcy5hcHBlbmRlci5sZW5ndGg9MH0sdHJ1bmNhdGU6ZnVuY3Rpb24oKXt0aGlzLmFwcGVuZGVyLmxlbmd0aD50aGlzLm1heExlbmd0aCYmKHRoaXMuYXBwZW5kZXI9XHJcbnRoaXMuYXBwZW5kZXIuc2xpY2UoTWF0aC5tYXgodGhpcy5hcHBlbmRlci5sZW5ndGgtdGhpcy5tYXhMZW5ndGgsMCkpKX0sYWRkOmZ1bmN0aW9uKGEsYil7dmFyIGQ9dGhpcy51dGlsLnV1aWQoKTt0aGlzLmFwcGVuZGVyLnB1c2goe2tleTpkLGNhdGVnb3J5OmEsdmFsdWU6Yn0pO3RoaXMudHJ1bmNhdGUoKTtyZXR1cm4gZH0sZ2V0OmZ1bmN0aW9uKGEsYil7dmFyIGQsZTtmb3IoZT0wO2U8dGhpcy5hcHBlbmRlci5sZW5ndGg7ZSsrKWlmKGQ9dGhpcy5hcHBlbmRlcltlXSxkLmNhdGVnb3J5PT09YSYmZC5rZXk9PT1iKXJldHVybiBkLnZhbHVlO3JldHVybiExfX07dmFyIEQ9ZnVuY3Rpb24oYSl7dmFyIGI9e307cmV0dXJue2FkZE1ldGFkYXRhOmZ1bmN0aW9uKGEsZSl7YlthXT1lfSxyZW1vdmVNZXRhZGF0YTpmdW5jdGlvbihhKXtkZWxldGUgYlthXX0scmVwb3J0OmZ1bmN0aW9uKCl7dmFyIGQ9W10sZTtmb3IoZSBpbiBiKWIuaGFzT3duUHJvcGVydHkoZSkmJmQucHVzaCh7a2V5OmUsXHJcbnZhbHVlOmEoYltlXSl9KTtyZXR1cm4gZH0sc3RvcmU6Yn19LHk9ZnVuY3Rpb24oYSxiKXt0aGlzLmxvZz1hO3RoaXMub3B0aW9ucz1iO2IuZW5hYmxlZCYmdGhpcy53YXRjaCgpfTt5LnByb3RvdHlwZT17aXNDb21wYXRpYmxlOmZ1bmN0aW9uKGEpe2E9YXx8ZztyZXR1cm4hYy5oYXMoYSxcImNocm9tZS5hcHAucnVudGltZVwiKSYmYy5oYXMoYSxcImFkZEV2ZW50TGlzdGVuZXJcIikmJmMuaGFzKGEsXCJoaXN0b3J5LnB1c2hTdGF0ZVwiKX0scmVjb3JkOmZ1bmN0aW9uKGEsYixkKXt0aGlzLmxvZy5hZGQoXCJoXCIse3R5cGU6YSxmcm9tOmMudHJ1bmNhdGUoYiwyNTApLHRvOmMudHJ1bmNhdGUoZCwyNTApLG9uOmMuaXNvTm93KCl9KX0scmVwb3J0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9nLmFsbChcImhcIil9LHdhdGNoOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0NvbXBhdGlibGUoKSl7dmFyIGE9dGhpcyxiPWMuZ2V0TG9jYXRpb25VUkwoKS5yZWxhdGl2ZTtnLmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLFxyXG5mdW5jdGlvbigpe3ZhciBkPWMuZ2V0TG9jYXRpb25VUkwoKS5yZWxhdGl2ZTthLnJlY29yZChcInBvcFN0YXRlXCIsYixkKTtiPWR9LCEwKTtjLmZvckVhY2goW1wicHVzaFN0YXRlXCIsXCJyZXBsYWNlU3RhdGVcIl0sZnVuY3Rpb24oZCl7Yy5wYXRjaChoaXN0b3J5LGQsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7Yj1jLmdldExvY2F0aW9uVVJMKCkucmVsYXRpdmU7dmFyIGY9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksaD1jLmdldExvY2F0aW9uVVJMKCkucmVsYXRpdmU7YS5yZWNvcmQoZCxiLGgpO2I9aDtyZXR1cm4gZn19KX0pfX19O3ZhciB6PWZ1bmN0aW9uKGEsYixkLGUsYyxoKXt0aGlzLnV0aWw9YTt0aGlzLmxvZz1iO3RoaXMub25FcnJvcj1kO3RoaXMub25GYXVsdD1lO3RoaXMud2luZG93PWM7dGhpcy5vcHRpb25zPWg7aC5lbmFibGVkJiZ0aGlzLmluaXRpYWxpemUoYyl9O3oucHJvdG90eXBlPXtpbml0aWFsaXplOmZ1bmN0aW9uKGEpe2EuWE1MSHR0cFJlcXVlc3QmJnRoaXMudXRpbC5oYXNGdW5jdGlvbihhLlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuLFxyXG5cImFwcGx5XCIpJiZ0aGlzLndhdGNoTmV0d29ya09iamVjdChhLlhNTEh0dHBSZXF1ZXN0KTthLlhEb21haW5SZXF1ZXN0JiZ0aGlzLnV0aWwuaGFzRnVuY3Rpb24oYS5YRG9tYWluUmVxdWVzdC5wcm90b3R5cGUub3BlbixcImFwcGx5XCIpJiZ0aGlzLndhdGNoTmV0d29ya09iamVjdChhLlhEb21haW5SZXF1ZXN0KTt0aGlzLm9wdGlvbnMuZmV0Y2gmJmMuaXNXcmFwcGFibGVGdW5jdGlvbihhLmZldGNoKSYmdGhpcy53YXRjaEZldGNoKCl9LGVzY2FwZVVybDpmdW5jdGlvbihhKXtyZXR1cm4oXCJcIithKS5yZXBsYWNlKC8gL2dpLFwiJTIwXCIpLnJlcGxhY2UoL1xcdC9naSxcIiUwOVwiKX0sd2F0Y2hGZXRjaDpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj10aGlzLmxvZyxkPXRoaXMub3B0aW9ucyxlPXRoaXMub25FcnJvcjtjLnBhdGNoKGcsXCJmZXRjaFwiLGZ1bmN0aW9uKGYpe3JldHVybiBmdW5jdGlvbihoLHApe2lmKHAmJnAuX190cmFja2pzX18pcmV0dXJuIGYuYXBwbHkoZyxhcmd1bWVudHMpO3ZhciBrO1xyXG50cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goRSl7az1FLnN0YWNrfXZhciBtPWggaW5zdGFuY2VvZiBSZXF1ZXN0P2gudXJsOmgsbj1oIGluc3RhbmNlb2YgUmVxdWVzdD9oLm1ldGhvZDoocHx8e30pLm1ldGhvZHx8XCJHRVRcIixtPWEuZXNjYXBlVXJsKG0pLGw9Zi5hcHBseShnLGFyZ3VtZW50cyk7bC5fX3RyYWNranNfc3RhdGVfXz1iLmFkZChcIm5cIix7dHlwZTpcImZldGNoXCIsc3RhcnRlZE9uOmMuaXNvTm93KCksbWV0aG9kOm4sdXJsOmMudHJ1bmNhdGUobSwyRTMpfSk7cmV0dXJuIGwudGhlbihmdW5jdGlvbihhKXt2YXIgZj1iLmdldChcIm5cIixsLl9fdHJhY2tqc19zdGF0ZV9fKTtpZihmKXtjLmRlZmF1bHRzKGYse2NvbXBsZXRlZE9uOmMuaXNvTm93KCksc3RhdHVzQ29kZTphLnN0YXR1cyxzdGF0dXNUZXh0OmEuc3RhdHVzVGV4dH0pO3ZhciBoPWEuaGVhZGVycy5nZXQoXCJ0cmFja2pzLWNvcnJlbGF0aW9uLWlkXCIpO2gmJihmLnJlcXVlc3RDb3JyZWxhdGlvbklkPWgpO2QuZXJyb3ImJlxyXG40MDA8PWEuc3RhdHVzJiYoZj1FcnJvcihmLnN0YXR1c0NvZGUrXCIgOiBcIitmLm1ldGhvZCtcIiBcIitmLnVybCksZi5zdGFjaz1rLGUoXCJhamF4XCIsZikpfXJldHVybiBhfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPWF8fHt9O3ZhciBmPWIuZ2V0KFwiblwiLGwuX190cmFja2pzX3N0YXRlX18pO2YmJihjLmRlZmF1bHRzKGYse2NvbXBsZXRlZE9uOmMuaXNvTm93KCksc3RhdHVzQ29kZTowLHN0YXR1c1RleHQ6YS50b1N0cmluZygpfSksZC5lcnJvciYmKGUoXCJhamF4XCIse25hbWU6YS5uYW1lLG1lc3NhZ2U6KGEubWVzc2FnZXx8XCJGYWlsZWRcIikrXCI6IFwiK2YubWV0aG9kK1wiIFwiK2YudXJsLHN0YWNrOmEuc3RhY2t8fGt9KSxhLl9fdHJhY2tqc19zdGF0ZV9fPSEwKSk7dGhyb3cgYTt9KX19KX0sd2F0Y2hOZXR3b3JrT2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsZD1hLnByb3RvdHlwZS5vcGVuLGU9YS5wcm90b3R5cGUuc2VuZDthLnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKGEsZSl7dmFyIGM9XHJcbihlfHxcIlwiKS50b1N0cmluZygpOzA+Yy5pbmRleE9mKFwibG9jYWxob3N0OjBcIikmJihjPWIuZXNjYXBlVXJsKGMpLHRoaXMuX3RyYWNrSnM9e21ldGhvZDphLHVybDpjfSk7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfTthLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX3RyYWNrSnMpdHJ5e3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChhKXtiLm9uRXJyb3IoXCJhamF4XCIsYSk7cmV0dXJufXRyeXt0aGlzLl90cmFja0pzLmxvZ0lkPWIubG9nLmFkZChcIm5cIix7dHlwZTpcInhoclwiLHN0YXJ0ZWRPbjpiLnV0aWwuaXNvTm93KCksbWV0aG9kOnRoaXMuX3RyYWNrSnMubWV0aG9kLHVybDpjLnRydW5jYXRlKHRoaXMuX3RyYWNrSnMudXJsLDJFMyl9KSxiLmxpc3RlbkZvck5ldHdvcmtDb21wbGV0ZSh0aGlzKX1jYXRjaChhKXtiLm9uRmF1bHQoYSl9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gYX0sbGlzdGVuRm9yTmV0d29ya0NvbXBsZXRlOmZ1bmN0aW9uKGEpe3ZhciBiPVxyXG50aGlzO2Iud2luZG93LlByb2dyZXNzRXZlbnQmJmEuYWRkRXZlbnRMaXN0ZW5lciYmYS5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLGZ1bmN0aW9uKCl7ND09PWEucmVhZHlTdGF0ZSYmYi5maW5hbGl6ZU5ldHdvcmtFdmVudChhKX0sITApO2EuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsZnVuY3Rpb24oKXtiLmZpbmFsaXplTmV0d29ya0V2ZW50KGEpO2IuY2hlY2tOZXR3b3JrRmF1bHQoYSl9LCEwKTpzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dHJ5e3ZhciBkPWEub25sb2FkO2Eub25sb2FkPWZ1bmN0aW9uKCl7Yi5maW5hbGl6ZU5ldHdvcmtFdmVudChhKTtiLmNoZWNrTmV0d29ya0ZhdWx0KGEpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkJiZiLnV0aWwuaGFzRnVuY3Rpb24oZCxcImFwcGx5XCIpJiZkLmFwcGx5KGEsYXJndW1lbnRzKX07dmFyIGU9YS5vbmVycm9yO2Eub25lcnJvcj1mdW5jdGlvbigpe2IuZmluYWxpemVOZXR3b3JrRXZlbnQoYSk7XHJcbmIuY2hlY2tOZXR3b3JrRmF1bHQoYSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIG9sZE9uRXJyb3ImJmUuYXBwbHkoYSxhcmd1bWVudHMpfX1jYXRjaChjKXtiLm9uRmF1bHQoYyl9fSwwKX0sZmluYWxpemVOZXR3b3JrRXZlbnQ6ZnVuY3Rpb24oYSl7aWYoYS5fdHJhY2tKcyl7dmFyIGI9dGhpcy5sb2cuZ2V0KFwiblwiLGEuX3RyYWNrSnMubG9nSWQpO2ImJihiLmNvbXBsZXRlZE9uPXRoaXMudXRpbC5pc29Ob3coKSxhLmdldEFsbFJlc3BvbnNlSGVhZGVycyYmYS5nZXRSZXNwb25zZUhlYWRlciYmMDw9KGEuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCl8fFwiXCIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInRyYWNranMtY29ycmVsYXRpb24taWRcIikmJihiLnJlcXVlc3RDb3JyZWxhdGlvbklkPWEuZ2V0UmVzcG9uc2VIZWFkZXIoXCJ0cmFja2pzLWNvcnJlbGF0aW9uLWlkXCIpKSxiLnN0YXR1c0NvZGU9MTIyMz09YS5zdGF0dXM/MjA0OmEuc3RhdHVzLGIuc3RhdHVzVGV4dD0xMjIzPT1hLnN0YXR1cz9cclxuXCJObyBDb250ZW50XCI6YS5zdGF0dXNUZXh0KX19LGNoZWNrTmV0d29ya0ZhdWx0OmZ1bmN0aW9uKGEpe2lmKHRoaXMub3B0aW9ucy5lcnJvciYmNDAwPD1hLnN0YXR1cyYmMTIyMyE9YS5zdGF0dXMpe3ZhciBiPWEuX3RyYWNrSnN8fHt9O3RoaXMub25FcnJvcihcImFqYXhcIixhLnN0YXR1cytcIiA6IFwiK2IubWV0aG9kK1wiIFwiK2IudXJsKX19LHJlcG9ydDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxvZy5hbGwoXCJuXCIpfX07dmFyIHQ9ZnVuY3Rpb24oYSxiKXt0aGlzLnV0aWw9YTt0aGlzLmNvbmZpZz1iO3RoaXMuZGlzYWJsZWQ9ITE7dGhpcy50aHJvdHRsZVN0YXRzPXthdHRlbXB0Q291bnQ6MCx0aHJvdHRsZWRDb3VudDowLGxhc3RBdHRlbXB0OihuZXcgRGF0ZSkuZ2V0VGltZSgpfTtnLkpTT04mJmcuSlNPTi5zdHJpbmdpZnl8fCh0aGlzLmRpc2FibGVkPSEwKX07dC5wcm90b3R5cGU9e2Vycm9yRW5kcG9pbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jb25maWcuY3VycmVudCxkPWIuZXJyb3JVUkw7XHJcbmMuaXNCcm93c2VyJiYhYy50ZXN0Q3Jvc3Nkb21haW5YaHIoKSYmLTE9PT1nLmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwc1wiKT9kPWIuZXJyb3JOb1NTTFVSTDpiLmZvcndhcmRpbmdEb21haW4mJihkPVwiaHR0cHM6Ly9cIitiLmZvcndhcmRpbmdEb21haW4rXCIvY2FwdHVyZVwiKTtyZXR1cm4gZCtcIj90b2tlbj1cIithK1wiJnY9My4xMC4xXCJ9LHVzYWdlRW5kcG9pbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jb25maWcuY3VycmVudCxkPWIudXNhZ2VVUkw7Yi5mb3J3YXJkaW5nRG9tYWluJiYoZD1cImh0dHBzOi8vXCIrYi5mb3J3YXJkaW5nRG9tYWluK1wiL3VzYWdlLmdpZlwiKTtyZXR1cm4gdGhpcy5hcHBlbmRPYmplY3RBc1F1ZXJ5KGEsZCl9LHRyYWNrZXJGYXVsdEVuZHBvaW50OmZ1bmN0aW9uKGEpe3ZhciBiPSh0aGlzLmNvbmZpZ3x8e30pLmN1cnJlbnR8fHEucHJvdG90eXBlLmRlZmF1bHRzLGQ9Yi5mYXVsdFVSTDtiLmZvcndhcmRpbmdEb21haW4mJihkPVwiaHR0cHM6Ly9cIitcclxuYi5mb3J3YXJkaW5nRG9tYWluK1wiL2ZhdWx0LmdpZlwiKTtyZXR1cm4gdGhpcy5hcHBlbmRPYmplY3RBc1F1ZXJ5KGEsZCl9LGFwcGVuZE9iamVjdEFzUXVlcnk6ZnVuY3Rpb24oYSxiKXtiKz1cIj9cIjtmb3IodmFyIGQgaW4gYSlhLmhhc093blByb3BlcnR5KGQpJiYoYis9ZW5jb2RlVVJJQ29tcG9uZW50KGQpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChhW2RdKStcIiZcIik7cmV0dXJuIGJ9LGdldENPUlNSZXF1ZXN0OmZ1bmN0aW9uKGEsYil7dmFyIGQ7dGhpcy51dGlsLnRlc3RDcm9zc2RvbWFpblhocigpPyhkPW5ldyBnLlhNTEh0dHBSZXF1ZXN0LGQub3BlbihhLGIpLGQuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLFwidGV4dC9wbGFpblwiKSk6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnLlhEb21haW5SZXF1ZXN0PyhkPW5ldyBnLlhEb21haW5SZXF1ZXN0LGQub3BlbihhLGIpKTpkPW51bGw7cmV0dXJuIGR9LHNlbmRUcmFja2VyRmF1bHQ6ZnVuY3Rpb24oYSl7dGhpcy50aHJvdHRsZShhKXx8XHJcbihjLmlzQnJvd3Nlcj9sLmNyZWF0ZUVsZW1lbnQoXCJpbWdcIikuc3JjPXRoaXMudHJhY2tlckZhdWx0RW5kcG9pbnQoYSk6ZmV0Y2godGhpcy50cmFja2VyRmF1bHRFbmRwb2ludChhKSx7bW9kZTpcIm5vLWNvcnNcIixfX3RyYWNranNfXzohMH0pKX0sc2VuZFVzYWdlOmZ1bmN0aW9uKGEpe2MuaXNCcm93c2VyP2wuY3JlYXRlRWxlbWVudChcImltZ1wiKS5zcmM9dGhpcy51c2FnZUVuZHBvaW50KGEpOmZldGNoKHRoaXMudXNhZ2VFbmRwb2ludChhKSx7bW9kZTpcIm5vLWNvcnNcIixfX3RyYWNranNfXzohMH0pfSxzZW5kRXJyb3I6ZnVuY3Rpb24oYSxiKXt2YXIgZD10aGlzO2lmKCF0aGlzLmRpc2FibGVkJiYhdGhpcy50aHJvdHRsZShhKSl0cnl7aWYoYy5pc0Jyb3dzZXIpe3ZhciBlPXRoaXMuZ2V0Q09SU1JlcXVlc3QoXCJQT1NUXCIsdGhpcy5lcnJvckVuZHBvaW50KGIpKTtlLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQhPT1lLnJlYWR5U3RhdGV8fGMuY29udGFpbnMoWzIwMCwyMDJdLFxyXG5lLnN0YXR1cyl8fChkLmRpc2FibGVkPSEwKX07ZS5fdHJhY2tKcz1uO2Uuc2VuZChnLkpTT04uc3RyaW5naWZ5KGEpKX1lbHNlIGlmKGMuaXNXb3JrZXIpe3ZhciBmPXttZXRob2Q6XCJQT1NUXCIsbW9kZTpcImNvcnNcIixib2R5OmcuSlNPTi5zdHJpbmdpZnkoYSksX190cmFja2pzX186MX07ZmV0Y2godGhpcy5lcnJvckVuZHBvaW50KGIpLGYpLnRoZW4oZnVuY3Rpb24oYSl7YS5va3x8KGQuZGlzYWJsZWQ9ITApfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtkLmRpc2FibGVkPSEwfSl9fWNhdGNoKGgpe3Rocm93IHRoaXMuZGlzYWJsZWQ9ITAsaDt9fSx0aHJvdHRsZTpmdW5jdGlvbihhKXt2YXIgYj0obmV3IERhdGUpLmdldFRpbWUoKTt0aGlzLnRocm90dGxlU3RhdHMuYXR0ZW1wdENvdW50Kys7aWYodGhpcy50aHJvdHRsZVN0YXRzLmxhc3RBdHRlbXB0KzFFMz49Yil7aWYodGhpcy50aHJvdHRsZVN0YXRzLmxhc3RBdHRlbXB0PWIsMTA8dGhpcy50aHJvdHRsZVN0YXRzLmF0dGVtcHRDb3VudClyZXR1cm4gdGhpcy50aHJvdHRsZVN0YXRzLnRocm90dGxlZENvdW50KyssXHJcbiEwfWVsc2UgYS50aHJvdHRsZWQ9dGhpcy50aHJvdHRsZVN0YXRzLnRocm90dGxlZENvdW50LHRoaXMudGhyb3R0bGVTdGF0cy5hdHRlbXB0Q291bnQ9MCx0aGlzLnRocm90dGxlU3RhdHMubGFzdEF0dGVtcHQ9Yix0aGlzLnRocm90dGxlU3RhdHMudGhyb3R0bGVkQ291bnQ9MDtyZXR1cm4hMX19O3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShkLGUsZixoKXtmPWZ8fCExO2g9aHx8MDtjLmZvckVhY2goZSxmdW5jdGlvbihlKXtjLmZvckVhY2goYy5rZXlzKGUpLGZ1bmN0aW9uKGMpe251bGw9PT1lW2NdfHxlW2NdPT09bj9kW2NdPWVbY106ZiYmMTA+aCYmXCJbb2JqZWN0IE9iamVjdF1cIj09PWIoZVtjXSk/KGRbY109ZFtjXXx8e30sYShkW2NdLFtlW2NdXSxmLGgrMSkpOmQuaGFzT3duUHJvcGVydHkoYyl8fChkW2NdPWVbY10pfSl9KTtyZXR1cm4gZH1mdW5jdGlvbiBiKGEpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9cmV0dXJue2lzQnJvd3NlcjpcInVuZGVmaW5lZFwiIT09XHJcbnR5cGVvZiBnJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGcuZG9jdW1lbnQsaXNXb3JrZXI6XCJvYmplY3RcIj09PXR5cGVvZiBzZWxmJiZzZWxmLmNvbnN0cnVjdG9yJiYwPD0oc2VsZi5jb25zdHJ1Y3Rvci5uYW1lfHxcIlwiKS5pbmRleE9mKFwiV29ya2VyR2xvYmFsU2NvcGVcIiksaXNOb2RlOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgcHJvY2VzcyYmbnVsbCE9cHJvY2Vzcy52ZXJzaW9ucyYmbnVsbCE9cHJvY2Vzcy52ZXJzaW9ucy5ub2RlLGFkZEV2ZW50TGlzdGVuZXJTYWZlOmZ1bmN0aW9uKGEsYixjLGgpe2EuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLGgpOmEuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoXCJvblwiK2IsYyl9LGFmdGVyRG9jdW1lbnRMb2FkOmZ1bmN0aW9uKGEpe2lmKGMuaXNXb3JrZXIpYy5kZWZlcihhKTtlbHNle3ZhciBiPSExO1wiY29tcGxldGVcIj09PWwucmVhZHlTdGF0ZT9jLmRlZmVyKGEpOihjLmFkZEV2ZW50TGlzdGVuZXJTYWZlKGwsXCJyZWFkeXN0YXRlY2hhbmdlXCIsXHJcbmZ1bmN0aW9uKCl7XCJjb21wbGV0ZVwiIT09bC5yZWFkeVN0YXRlfHxifHwoYy5kZWZlcihhKSxiPSEwKX0pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtifHwoYy5kZWZlcihhKSxiPSEwKX0sMUU0KSl9fSxiaW5kOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKX19LGNvbnRhaW5zOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDA8PWEuaW5kZXhPZihiKX0sZGVmYXVsdHM6ZnVuY3Rpb24oZCl7cmV0dXJuIGEoZCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksITEpfSxkZWZhdWx0c0RlZXA6ZnVuY3Rpb24oZCl7cmV0dXJuIGEoZCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksITApfSxkZWZlcjpmdW5jdGlvbihhLGIpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXthLmFwcGx5KGIpfSl9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGYpe2lmKGMuaXNBcnJheShhKSl7aWYoYS5mb3JFYWNoKXJldHVybiBhLmZvckVhY2goYixcclxuZik7Zm9yKHZhciBoPTA7aDxhLmxlbmd0aDspYi5jYWxsKGYsYVtoXSxoLGEpLGgrK319LGdldExvY2F0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGcubG9jYXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC8gL2csXCIlMjBcIil9LGdldExvY2F0aW9uVVJMOmZ1bmN0aW9uKCl7cmV0dXJuIGMucGFyc2VVUkwoYy5nZXRMb2NhdGlvbigpKX0saGFzOmZ1bmN0aW9uKGEsYil7dHJ5e2Zvcih2YXIgYz1iLnNwbGl0KFwiLlwiKSxoPWEsZz0wO2c8Yy5sZW5ndGg7ZysrKWlmKGhbY1tnXV0paD1oW2NbZ11dO2Vsc2UgcmV0dXJuITE7cmV0dXJuITB9Y2F0Y2goayl7cmV0dXJuITF9fSxoYXNGdW5jdGlvbjpmdW5jdGlvbihhLGIpe3RyeXtyZXR1cm4hIWFbYl19Y2F0Y2goYyl7cmV0dXJuITF9fSxoYXNPd246ZnVuY3Rpb24oYSxiKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsYil9LGlzQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09YihhKX0sXHJcbmlzQm9vbGVhbjpmdW5jdGlvbihhKXtyZXR1cm5cImJvb2xlYW5cIj09PXR5cGVvZiBhfHxjLmlzT2JqZWN0KGEpJiZcIltvYmplY3QgQm9vbGVhbl1cIj09PWIoYSl9LGlzQnJvd3NlcklFOmZ1bmN0aW9uKGEpe2E9YXx8Zy5uYXZpZ2F0b3IudXNlckFnZW50O3ZhciBiPWEubWF0Y2goL1RyaWRlbnRcXC8oW1xcZC5dKykvKTtyZXR1cm4gYiYmXCI3LjBcIj09PWJbMV0/MTE6KGE9YS5tYXRjaCgvTVNJRSAoW1xcZC5dKykvKSk/cGFyc2VJbnQoYVsxXSwxMCk6ITF9LGlzQnJvd3NlclN1cHBvcnRlZDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuaXNCcm93c2VySUUoKTtyZXR1cm4hYXx8ODw9YX0saXNFcnJvcjpmdW5jdGlvbihhKXtpZighYy5pc09iamVjdChhKSlyZXR1cm4hMTt2YXIgZT1iKGEpO3JldHVyblwiW29iamVjdCBFcnJvcl1cIj09PWV8fFwiW29iamVjdCBET01FeGNlcHRpb25dXCI9PT1lfHxjLmlzU3RyaW5nKGEubmFtZSkmJmMuaXNTdHJpbmcoYS5tZXNzYWdlKX0saXNFbGVtZW50OmZ1bmN0aW9uKGEpe3JldHVybiBjLmlzT2JqZWN0KGEpJiZcclxuMT09PWEubm9kZVR5cGV9LGlzRnVuY3Rpb246ZnVuY3Rpb24oYSl7cmV0dXJuISghYXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGEpfSxpc051bWJlcjpmdW5jdGlvbihhKXtyZXR1cm5cIm51bWJlclwiPT09dHlwZW9mIGF8fGMuaXNPYmplY3QoYSkmJlwiW29iamVjdCBOdW1iZXJdXCI9PT1iKGEpfSxpc09iamVjdDpmdW5jdGlvbihhKXtyZXR1cm4hKCFhfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpfSxpc1N0cmluZzpmdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fCFjLmlzQXJyYXkoYSkmJmMuaXNPYmplY3QoYSkmJlwiW29iamVjdCBTdHJpbmddXCI9PT1iKGEpfSxpc1dyYXBwYWJsZUZ1bmN0aW9uOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmlzRnVuY3Rpb24oYSkmJnRoaXMuaGFzRnVuY3Rpb24oYSxcImFwcGx5XCIpfSxpc29Ob3c6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgRGF0ZTtyZXR1cm4gYS50b0lTT1N0cmluZz9hLnRvSVNPU3RyaW5nKCk6YS5nZXRVVENGdWxsWWVhcigpK1wiLVwiK1xyXG50aGlzLnBhZChhLmdldFVUQ01vbnRoKCkrMSkrXCItXCIrdGhpcy5wYWQoYS5nZXRVVENEYXRlKCkpK1wiVFwiK3RoaXMucGFkKGEuZ2V0VVRDSG91cnMoKSkrXCI6XCIrdGhpcy5wYWQoYS5nZXRVVENNaW51dGVzKCkpK1wiOlwiK3RoaXMucGFkKGEuZ2V0VVRDU2Vjb25kcygpKStcIi5cIitTdHJpbmcoKGEuZ2V0VVRDTWlsbGlzZWNvbmRzKCkvMUUzKS50b0ZpeGVkKDMpKS5zbGljZSgyLDUpK1wiWlwifSxrZXlzOmZ1bmN0aW9uKGEpe2lmKCFjLmlzT2JqZWN0KGEpKXJldHVybltdO3ZhciBiPVtdLGY7Zm9yKGYgaW4gYSlhLmhhc093blByb3BlcnR5KGYpJiZiLnB1c2goZik7cmV0dXJuIGJ9LG5vb3A6ZnVuY3Rpb24oKXt9LHBhZDpmdW5jdGlvbihhKXthPVN0cmluZyhhKTsxPT09YS5sZW5ndGgmJihhPVwiMFwiK2EpO3JldHVybiBhfSxwYXJzZVVSTDpmdW5jdGlvbihhKXt2YXIgYj1hLm1hdGNoKC9eKChbXjpcXC8/I10rKTopPyhcXC9cXC8oW15cXC8/I10qKSk/KFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyk7XHJcbmlmKCFiKXJldHVybnt9O2I9e3Byb3RvY29sOmJbMl0saG9zdDpiWzRdLHBhdGg6Yls1XSxxdWVyeTpiWzZdLGhhc2g6Yls4XX07Yi5vcmlnaW49KGIucHJvdG9jb2x8fFwiXCIpK1wiOi8vXCIrKGIuaG9zdHx8XCJcIik7Yi5yZWxhdGl2ZT0oYi5wYXRofHxcIlwiKSsoYi5xdWVyeXx8XCJcIikrKGIuaGFzaHx8XCJcIik7Yi5ocmVmPWE7cmV0dXJuIGJ9LHBhdGNoOmZ1bmN0aW9uKGEsYixmKXthW2JdPWYoYVtiXXx8Yy5ub29wKX0sdGVzdENyb3NzZG9tYWluWGhyOmZ1bmN0aW9uKCl7cmV0dXJuIGMuaXNCcm93c2VyJiZcIndpdGhDcmVkZW50aWFsc1wiaW4gbmV3IFhNTEh0dHBSZXF1ZXN0fSx0cnVuY2F0ZTpmdW5jdGlvbihhLGIpe2E9XCJcIithO2lmKGEubGVuZ3RoPD1iKXJldHVybiBhO3ZhciBjPWEubGVuZ3RoLWI7cmV0dXJuIGEuc3Vic3RyKDAsYikrXCIuLi57XCIrYytcIn1cIn0sdHJ5R2V0OmZ1bmN0aW9uKGEsYil7dHJ5e3JldHVybiBhW2JdfWNhdGNoKGMpe319LHV1aWQ6ZnVuY3Rpb24oKXtyZXR1cm5cInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZyxcclxuZnVuY3Rpb24oYSl7dmFyIGI9MTYqTWF0aC5yYW5kb20oKXwwO3JldHVybihcInhcIj09YT9iOmImM3w4KS50b1N0cmluZygxNil9KX0sd3JhcEVycm9yOmZ1bmN0aW9uKGEpe3ZhciBiPWF8fE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKTtpZihiJiZiLmlubmVyRXJyb3IpcmV0dXJuIGE7dmFyIGM9RXJyb3IoXCJUcmFja0pTIENhdWdodDogXCIrKGIubWVzc2FnZXx8YikpO2MuZGVzY3JpcHRpb249XCJUcmFja0pTIENhdWdodDogXCIrYi5kZXNjcmlwdGlvbjtjLmZpbGU9Yi5maWxlO2MubGluZT1iLmxpbmV8fGIubGluZU51bWJlcjtjLmNvbHVtbj1iLmNvbHVtbnx8Yi5jb2x1bW5OdW1iZXI7Yy5zdGFjaz1iLnN0YWNrO2MuaW5uZXJFcnJvcj1hO3JldHVybiBjfX19KCksQT1mdW5jdGlvbihhLGIsZCxjLGYsZyl7dGhpcy51dGlsPWE7dGhpcy5sb2c9Yjt0aGlzLm9uRXJyb3I9ZDt0aGlzLm9uRmF1bHQ9Yzt0aGlzLm9wdGlvbnM9Zzt0aGlzLmRvY3VtZW50PWY7YS5pc0Jyb3dzZXImJlxyXG5nLmVuYWJsZWQmJnRoaXMuaW5pdGlhbGl6ZShmKX07QS5wcm90b3R5cGU9e2luaXRpYWxpemU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy51dGlsLmJpbmQodGhpcy5vbkRvY3VtZW50Q2xpY2tlZCx0aGlzKSxkPXRoaXMudXRpbC5iaW5kKHRoaXMub25JbnB1dENoYW5nZWQsdGhpcyk7YS5hZGRFdmVudExpc3RlbmVyPyhhLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGIsITApLGEuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIixkLCEwKSk6YS5hdHRhY2hFdmVudCYmKGEuYXR0YWNoRXZlbnQoXCJvbmNsaWNrXCIsYiksYS5hdHRhY2hFdmVudChcIm9uZm9jdXNvdXRcIixkKSl9LG9uRG9jdW1lbnRDbGlja2VkOmZ1bmN0aW9uKGEpe3RyeXt2YXIgYj10aGlzLmdldEVsZW1lbnRGcm9tRXZlbnQoYSk7YiYmYi50YWdOYW1lJiYodGhpcy5pc0Rlc2NyaWJlZEVsZW1lbnQoYixcImFcIil8fHRoaXMuaXNEZXNjcmliZWRFbGVtZW50KGIsXCJidXR0b25cIil8fHRoaXMuaXNEZXNjcmliZWRFbGVtZW50KGIsXCJpbnB1dFwiLFxyXG5bXCJidXR0b25cIixcInN1Ym1pdFwiXSk/dGhpcy53cml0ZVZpc2l0b3JFdmVudChiLFwiY2xpY2tcIik6dGhpcy5pc0Rlc2NyaWJlZEVsZW1lbnQoYixcImlucHV0XCIsW1wiY2hlY2tib3hcIixcInJhZGlvXCJdKSYmdGhpcy53cml0ZVZpc2l0b3JFdmVudChiLFwiaW5wdXRcIixiLnZhbHVlLGIuY2hlY2tlZCkpfWNhdGNoKGQpe3RoaXMub25GYXVsdChkKX19LG9uSW5wdXRDaGFuZ2VkOmZ1bmN0aW9uKGEpe3RyeXt2YXIgYj10aGlzLmdldEVsZW1lbnRGcm9tRXZlbnQoYSk7aWYoYiYmYi50YWdOYW1lKWlmKHRoaXMuaXNEZXNjcmliZWRFbGVtZW50KGIsXCJ0ZXh0YXJlYVwiKSl0aGlzLndyaXRlVmlzaXRvckV2ZW50KGIsXCJpbnB1dFwiLGIudmFsdWUpO2Vsc2UgaWYodGhpcy5pc0Rlc2NyaWJlZEVsZW1lbnQoYixcInNlbGVjdFwiKSYmYi5vcHRpb25zJiZiLm9wdGlvbnMubGVuZ3RoKXRoaXMub25TZWxlY3RJbnB1dENoYW5nZWQoYik7ZWxzZSB0aGlzLmlzRGVzY3JpYmVkRWxlbWVudChiLFwiaW5wdXRcIikmJiF0aGlzLmlzRGVzY3JpYmVkRWxlbWVudChiLFxyXG5cImlucHV0XCIsW1wiYnV0dG9uXCIsXCJzdWJtaXRcIixcImhpZGRlblwiLFwiY2hlY2tib3hcIixcInJhZGlvXCJdKSYmdGhpcy53cml0ZVZpc2l0b3JFdmVudChiLFwiaW5wdXRcIixiLnZhbHVlKX1jYXRjaChkKXt0aGlzLm9uRmF1bHQoZCl9fSxvblNlbGVjdElucHV0Q2hhbmdlZDpmdW5jdGlvbihhKXtpZihhLm11bHRpcGxlKWZvcih2YXIgYj0wO2I8YS5vcHRpb25zLmxlbmd0aDtiKyspYS5vcHRpb25zW2JdLnNlbGVjdGVkJiZ0aGlzLndyaXRlVmlzaXRvckV2ZW50KGEsXCJpbnB1dFwiLGEub3B0aW9uc1tiXS52YWx1ZSk7ZWxzZSAwPD1hLnNlbGVjdGVkSW5kZXgmJmEub3B0aW9uc1thLnNlbGVjdGVkSW5kZXhdJiZ0aGlzLndyaXRlVmlzaXRvckV2ZW50KGEsXCJpbnB1dFwiLGEub3B0aW9uc1thLnNlbGVjdGVkSW5kZXhdLnZhbHVlKX0sd3JpdGVWaXNpdG9yRXZlbnQ6ZnVuY3Rpb24oYSxiLGQsYyl7XCJwYXNzd29yZFwiPT09dGhpcy5nZXRFbGVtZW50VHlwZShhKSYmKGQ9bik7dmFyIGY9dGhpcy5nZXRFbGVtZW50QXR0cmlidXRlcyhhKTtcclxuYS5pbm5lclRleHQmJihmLl9fdHJhY2tqc19lbGVtZW50X3RleHQ9dGhpcy51dGlsLnRydW5jYXRlKGEuaW5uZXJUZXh0LDUwMCkpO3RoaXMubG9nLmFkZChcInZcIix7dGltZXN0YW1wOnRoaXMudXRpbC5pc29Ob3coKSxhY3Rpb246YixlbGVtZW50Ont0YWc6YS50YWdOYW1lLnRvTG93ZXJDYXNlKCksYXR0cmlidXRlczpmLHZhbHVlOnRoaXMuZ2V0TWV0YVZhbHVlKGQsYyl9fSl9LGdldEVsZW1lbnRGcm9tRXZlbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGFyZ2V0fHxsLmVsZW1lbnRGcm9tUG9pbnQoYS5jbGllbnRYLGEuY2xpZW50WSl9LGlzRGVzY3JpYmVkRWxlbWVudDpmdW5jdGlvbihhLGIsZCl7aWYoYS50YWdOYW1lLnRvTG93ZXJDYXNlKCkhPT1iLnRvTG93ZXJDYXNlKCkpcmV0dXJuITE7aWYoIWQpcmV0dXJuITA7YT10aGlzLmdldEVsZW1lbnRUeXBlKGEpO2ZvcihiPTA7YjxkLmxlbmd0aDtiKyspaWYoZFtiXT09PWEpcmV0dXJuITA7cmV0dXJuITF9LGdldEVsZW1lbnRUeXBlOmZ1bmN0aW9uKGEpe3JldHVybihhLmdldEF0dHJpYnV0ZShcInR5cGVcIil8fFxyXG5cIlwiKS50b0xvd2VyQ2FzZSgpfSxnZXRFbGVtZW50QXR0cmlidXRlczpmdW5jdGlvbihhKXtmb3IodmFyIGI9e30sZD1NYXRoLm1pbihhLmF0dHJpYnV0ZXMubGVuZ3RoLDEwKSxlPTA7ZTxkO2UrKyl7dmFyIGY9YS5hdHRyaWJ1dGVzW2VdO2MuY29udGFpbnMoW1wiZGF0YS12YWx1ZVwiLFwidmFsdWVcIl0sZi5uYW1lLnRvTG93ZXJDYXNlKCkpfHwoYltmLm5hbWVdPWMudHJ1bmNhdGUoZi52YWx1ZSwxMDApKX1yZXR1cm4gYn0sZ2V0TWV0YVZhbHVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1uP246e2xlbmd0aDphLmxlbmd0aCxwYXR0ZXJuOnRoaXMubWF0Y2hJbnB1dFBhdHRlcm4oYSksY2hlY2tlZDpifX0sbWF0Y2hJbnB1dFBhdHRlcm46ZnVuY3Rpb24oYSl7cmV0dXJuXCJcIj09PWE/XCJlbXB0eVwiOi9eW2EtejAtOSEjJCUmJyorPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pPyQvLnRlc3QoYSk/XHJcblwiZW1haWxcIjovXigwP1sxLTldfFsxMl1bMC05XXwzWzAxXSlbXFwvXFwtXSgwP1sxLTldfDFbMDEyXSlbXFwvXFwtXVxcZHs0fSQvLnRlc3QoYSl8fC9eKFxcZHs0fVtcXC9cXC1dKDA/WzEtOV18MVswMTJdKVtcXC9cXC1dMD9bMS05XXxbMTJdWzAtOV18M1swMV0pJC8udGVzdChhKT9cImRhdGVcIjovXig/Oig/OlxcKz8xXFxzKig/OlsuLV1cXHMqKT8pPyg/OlxcKFxccyooWzItOV0xWzAyLTldfFsyLTldWzAyLThdMXxbMi05XVswMi04XVswMi05XSlcXHMqXFwpfChbMi05XTFbMDItOV18WzItOV1bMDItOF0xfFsyLTldWzAyLThdWzAyLTldKSlcXHMqKD86Wy4tXVxccyopPyk/KFsyLTldMVswMi05XXxbMi05XVswMi05XTF8WzItOV1bMDItOV17Mn0pXFxzKig/OlsuLV1cXHMqKT8oWzAtOV17NH0pKD86XFxzKig/OiN8eFxcLj98ZXh0XFwuP3xleHRlbnNpb24pXFxzKihcXGQrKSk/JC8udGVzdChhKT9cInVzcGhvbmVcIjovXlxccyokLy50ZXN0KGEpP1wid2hpdGVzcGFjZVwiOi9eXFxkKiQvLnRlc3QoYSk/XCJudW1lcmljXCI6L15bYS16QS1aXSokLy50ZXN0KGEpP1xyXG5cImFscGhhXCI6L15bYS16QS1aMC05XSokLy50ZXN0KGEpP1wiYWxwaGFudW1lcmljXCI6XCJjaGFyYWN0ZXJzXCJ9LHJlcG9ydDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxvZy5hbGwoXCJ2XCIpfX07dmFyIEI9ZnVuY3Rpb24oYSxiLGQsYyxmKXt0aGlzLm9uRXJyb3I9YTt0aGlzLm9uRmF1bHQ9Yjt0aGlzLnNlcmlhbGl6ZT1kO2YuZW5hYmxlZCYmdGhpcy53YXRjaFdpbmRvd0Vycm9ycyhjKTtmLnByb21pc2UmJnRoaXMud2F0Y2hQcm9taXNlRXJyb3JzKGMpfTtCLnByb3RvdHlwZT17d2F0Y2hQcm9taXNlRXJyb3JzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7YS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihcInVuaGFuZGxlZHJlamVjdGlvblwiLGZ1bmN0aW9uKGEpe3RyeXthPWF8fHt9O3ZhciBlPWEuZGV0YWlsP2MudHJ5R2V0KGEuZGV0YWlsLFwicmVhc29uXCIpOmMudHJ5R2V0KGEsXCJyZWFzb25cIik7aWYoZSE9PW4mJm51bGwhPT1lJiYhZS5fX3RyYWNranNfc3RhdGVfXyl7aWYoIWMuaXNFcnJvcihlKSl0cnl7dGhyb3cgRXJyb3IoYi5zZXJpYWxpemUoZSkpO1xyXG59Y2F0Y2goZil7ZT1mfWIub25FcnJvcihcInByb21pc2VcIixlKX19Y2F0Y2goZil7Yi5vbkZhdWx0KGYpfX0pOmMucGF0Y2goYSxcIm9udW5oYW5kbGVkcmVqZWN0aW9uXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMpe2Iub25FcnJvcihcInByb21pc2VcIixjKTthLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KX0sd2F0Y2hXaW5kb3dFcnJvcnM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztjLnBhdGNoKGEsXCJvbmVycm9yXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGUsZixnLGwsayl7dHJ5e2lmKGMuaXNFcnJvcihrKSl7Yi5vbkVycm9yKFwid2luZG93XCIsayk7YS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJufWs9a3x8e307dmFyIG09e21lc3NhZ2U6ay5tZXNzYWdlfHxiLnNlcmlhbGl6ZShlKSxuYW1lOmsubmFtZXx8XCJFcnJvclwiLGxpbmU6ay5saW5lfHxwYXJzZUludChnLDEwKXx8bnVsbCxjb2x1bW46ay5jb2x1bW58fHBhcnNlSW50KGwsMTApfHxudWxsLHN0YWNrOmsuc3RhY2t8fFxyXG5udWxsfTtcIltvYmplY3QgRXZlbnRdXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl8fGY/bS5maWxlPWsuZmlsZXx8Yi5zZXJpYWxpemUoZik6bS5maWxlPShlLnRhcmdldHx8e30pLnNyYztiLm9uRXJyb3IoXCJ3aW5kb3dcIixtKX1jYXRjaChuKXtiLm9uRmF1bHQobil9YS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSl9fTt2YXIgQz1mdW5jdGlvbigpe3RoaXMuaGFzSW5zdGFsbGVkPSExO3RoaXMuaGFzRW5hYmxlZD0hMDt0aGlzLndpbmRvdz1nO3RoaXMuZG9jdW1lbnQ9bDt0aGlzLnV0aWw9Yzt0aGlzLmluc3RhbGw9Yy5iaW5kKHRoaXMuaW5zdGFsbCx0aGlzKTt0aGlzLm9uRXJyb3I9Yy5iaW5kKHRoaXMub25FcnJvcix0aGlzKTt0aGlzLm9uRmF1bHQ9Yy5iaW5kKHRoaXMub25GYXVsdCx0aGlzKTt0aGlzLnNlcmlhbGl6ZT1jLmJpbmQodGhpcy5zZXJpYWxpemUsdGhpcyk7dGhpcy5sb2c9bmV3IHgoYyk7dGhpcy5tZXRhZGF0YT1uZXcgRCh0aGlzLnNlcmlhbGl6ZSk7XHJcbnZhciBhPWcmJihnLl90cmFja0pzfHxnLl90cmFja0pTfHxnLl90cmFja2pzKTthJiZ0aGlzLmluc3RhbGwoYSl9O0MucHJvdG90eXBlPXtpbnN0YWxsOmZ1bmN0aW9uKGEpe3RyeXtpZihjLmlzTm9kZSlyZXR1cm4gdGhpcy53YXJuKFwibW9uaXRvcmluZyBkaXNhYmxlZCBpbiBub2RlXCIpLCExO2lmKCFjLmhhcyhhLFwidG9rZW5cIikpcmV0dXJuIHRoaXMud2FybihcIm1pc3NpbmcgdG9rZW5cIiksITE7aWYodGhpcy5oYXNJbnN0YWxsZWQpcmV0dXJuIHRoaXMud2FybihcImFscmVhZHkgaW5zdGFsbGVkXCIpLCExO3RoaXMuY29uZmlnPW5ldyBxKGEpO3RoaXMudHJhbnNtaXR0ZXI9bmV3IHQodGhpcy51dGlsLHRoaXMuY29uZmlnKTt0aGlzLmVudmlyb25tZW50PW5ldyB3KHRoaXMuY29uZmlnKTt0aGlzLmN1c3RvbWVyPW5ldyB2KHRoaXMuY29uZmlnLHRoaXMudXRpbCx0aGlzLmxvZyx0aGlzLndpbmRvdyx0aGlzLmRvY3VtZW50KTtpZighdGhpcy5jb25maWcuY3VycmVudC5lbmFibGVkKXJldHVybiB0aGlzLmhhc0VuYWJsZWQ9XHJcbiExO3RoaXMud2luZG93Q29uc29sZVdhdGNoZXI9bmV3IHIodGhpcy51dGlsLHRoaXMubG9nLHRoaXMub25FcnJvcix0aGlzLm9uRmF1bHQsdGhpcy5zZXJpYWxpemUsdGhpcy53aW5kb3csdGhpcy5jb25maWcuY3VycmVudC5jb25zb2xlKTtpZighdGhpcy51dGlsLmlzQnJvd3NlclN1cHBvcnRlZCgpKXJldHVybiExO3RoaXMuY2FsbGJhY2tXYXRjaGVyPW5ldyB1KHRoaXMuY29uZmlnLmN1cnJlbnQuY2FsbGJhY2ssdGhpcy5vbkVycm9yLHRoaXMub25GYXVsdCk7dGhpcy52aXNpdG9yV2F0Y2hlcj1uZXcgQSh0aGlzLnV0aWwsdGhpcy5sb2csdGhpcy5vbkVycm9yLHRoaXMub25GYXVsdCx0aGlzLmRvY3VtZW50LHRoaXMuY29uZmlnLmN1cnJlbnQudmlzaXRvcik7dGhpcy5uYXZpZ2F0aW9uV2F0Y2hlcj1uZXcgeSh0aGlzLmxvZyx0aGlzLmNvbmZpZy5jdXJyZW50Lm5hdmlnYXRpb24pO3RoaXMubmV0d29ya1dhdGNoZXI9bmV3IHoodGhpcy51dGlsLHRoaXMubG9nLHRoaXMub25FcnJvcixcclxudGhpcy5vbkZhdWx0LHRoaXMud2luZG93LHRoaXMuY29uZmlnLmN1cnJlbnQubmV0d29yayk7dGhpcy53aW5kb3dXYXRjaGVyPW5ldyBCKHRoaXMub25FcnJvcix0aGlzLm9uRmF1bHQsdGhpcy5zZXJpYWxpemUsdGhpcy53aW5kb3csdGhpcy5jb25maWcuY3VycmVudC53aW5kb3cpO3ZhciBiPXRoaXM7Yy5hZnRlckRvY3VtZW50TG9hZChmdW5jdGlvbigpe2IudHJhbnNtaXR0ZXIuc2VuZFVzYWdlKHt0b2tlbjpiLmN1c3RvbWVyLnRva2VuLGNvcnJlbGF0aW9uSWQ6Yi5jdXN0b21lci5jb3JyZWxhdGlvbklkLGFwcGxpY2F0aW9uOmIuY29uZmlnLmN1cnJlbnQuYXBwbGljYXRpb24seDpiLnV0aWwudXVpZCgpfSl9KTtyZXR1cm4gdGhpcy5oYXNJbnN0YWxsZWQ9ITB9Y2F0Y2goZCl7cmV0dXJuIHRoaXMub25GYXVsdChkKSwhMX19LHB1YjpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj17YWRkTWV0YWRhdGE6dGhpcy5tZXRhZGF0YS5hZGRNZXRhZGF0YSxhdHRlbXB0OmZ1bmN0aW9uKGIsXHJcbmUpe3RyeXt2YXIgZj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIGIuYXBwbHkoZXx8dGhpcyxmKX1jYXRjaChnKXt0aHJvdyBhLm9uRXJyb3IoXCJjYXRjaFwiLGcpLGMud3JhcEVycm9yKGcpO319LGNvbmZpZ3VyZTpmdW5jdGlvbihiKXtyZXR1cm4hYS5oYXNJbnN0YWxsZWQmJmEuaGFzRW5hYmxlZD8oYS53YXJuKFwiYWdlbnQgbXVzdCBiZSBpbnN0YWxsZWRcIiksITEpOmEuY29uZmlnLnNldEN1cnJlbnQoYil9LGhhc2g6XCJmYjA5MGY5MjQ5YTE0ZTg0NDBmMzE3ZjU3YmQ4MmVjOGQ2ZWEzMmE0XCIsaXNJbnN0YWxsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5oYXNJbnN0YWxsZWR9LGluc3RhbGw6dGhpcy5pbnN0YWxsLHJlbW92ZU1ldGFkYXRhOnRoaXMubWV0YWRhdGEucmVtb3ZlTWV0YWRhdGEsdHJhY2s6ZnVuY3Rpb24oYil7aWYoIWEuaGFzSW5zdGFsbGVkJiZhLmhhc0VuYWJsZWQpYS53YXJuKFwiYWdlbnQgbXVzdCBiZSBpbnN0YWxsZWRcIik7ZWxzZXt2YXIgZT1cclxuYy5pc0Vycm9yKGIpP2IubWVzc2FnZTphLnNlcmlhbGl6ZShiKTtiPWJ8fHt9O2lmKCFiLnN0YWNrKXRyeXt0aHJvdyBFcnJvcihlKTt9Y2F0Y2goZil7Yj1mfWEub25FcnJvcihcImRpcmVjdFwiLGIpfX0sdmVyc2lvbjpcIjMuMTAuMVwiLHdhdGNoOmZ1bmN0aW9uKGIsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e3ZhciBmPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gYi5hcHBseShlfHx0aGlzLGYpfWNhdGNoKGcpe3Rocm93IGEub25FcnJvcihcImNhdGNoXCIsZyksYy53cmFwRXJyb3IoZyk7fX19LHdhdGNoQWxsOmZ1bmN0aW9uKGEpe3ZhciBiPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxmO2ZvcihmIGluIGEpXCJmdW5jdGlvblwiIT09dHlwZW9mIGFbZl18fGMuY29udGFpbnMoYixmKXx8KGFbZl09dGhpcy53YXRjaChhW2ZdLGEpKTtyZXR1cm4gYX19O25ldyByKGMsYS5sb2csYS5vbkVycm9yLGEub25GYXVsdCxhLnNlcmlhbGl6ZSxcclxuYixxLnByb3RvdHlwZS5kZWZhdWx0cy5jb25zb2xlKTtyZXR1cm4gYn0sb25FcnJvcjpmdW5jdGlvbigpe3ZhciBhLGI9ITE7cmV0dXJuIGZ1bmN0aW9uKGQsZSxmKXtpZih0aGlzLmhhc0luc3RhbGxlZCYmdGhpcy5oYXNFbmFibGVkJiZjLmlzQnJvd3NlclN1cHBvcnRlZCgpKXRyeXtpZihmPWZ8fHtiaW5kU3RhY2s6bnVsbCxiaW5kVGltZTpudWxsLGZvcmNlOiExfSxlJiZjLmlzRXJyb3IoZSl8fChlPXtuYW1lOlwiRXJyb3JcIixtZXNzYWdlOnRoaXMuc2VyaWFsaXplKGUsZi5mb3JjZSl9KSwtMT09PWUubWVzc2FnZS5pbmRleE9mKFwiVHJhY2tKUyBDYXVnaHRcIikpaWYoYiYmLTEhPT1lLm1lc3NhZ2UuaW5kZXhPZihcIlNjcmlwdCBlcnJvclwiKSliPSExO2Vsc2V7dmFyIGg9Yy5kZWZhdWx0c0RlZXAoe30se2FnZW50UGxhdGZvcm06Yy5pc0Jyb3dzZXI/XCJicm93c2VyXCI6XCJ3b3JrZXJcIixiaW5kU3RhY2s6Zi5iaW5kU3RhY2ssYmluZFRpbWU6Zi5iaW5kVGltZSxjb2x1bW46ZS5jb2x1bW58fFxyXG5lLmNvbHVtbk51bWJlcixjb25zb2xlOnRoaXMud2luZG93Q29uc29sZVdhdGNoZXIucmVwb3J0KCksY3VzdG9tZXI6dGhpcy5jdXN0b21lci5yZXBvcnQoKSxlbnRyeTpkLGVudmlyb25tZW50OnRoaXMuZW52aXJvbm1lbnQucmVwb3J0KCksZmlsZTplLmZpbGV8fGUuZmlsZU5hbWUsbGluZTplLmxpbmV8fGUubGluZU51bWJlcixtZXNzYWdlOmUubWVzc2FnZSxtZXRhZGF0YTp0aGlzLm1ldGFkYXRhLnJlcG9ydCgpLG5hdjp0aGlzLm5hdmlnYXRpb25XYXRjaGVyLnJlcG9ydCgpLG5ldHdvcms6dGhpcy5uZXR3b3JrV2F0Y2hlci5yZXBvcnQoKSx1cmw6KGcubG9jYXRpb258fFwiXCIpLnRvU3RyaW5nKCksc3RhY2s6ZS5zdGFjayx0aW1lc3RhbXA6dGhpcy51dGlsLmlzb05vdygpLHZpc2l0b3I6dGhpcy52aXNpdG9yV2F0Y2hlci5yZXBvcnQoKSx2ZXJzaW9uOlwiMy4xMC4xXCJ9KTtpZighZi5mb3JjZSl0cnl7aWYoIXRoaXMuY29uZmlnLmN1cnJlbnQub25FcnJvcihoLGUpKXJldHVybn1jYXRjaChtKXtoLmNvbnNvbGUucHVzaCh7dGltZXN0YW1wOnRoaXMudXRpbC5pc29Ob3coKSxcclxuc2V2ZXJpdHk6XCJlcnJvclwiLG1lc3NhZ2U6bS5tZXNzYWdlfSk7dmFyIGw9dGhpcztzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5vbkVycm9yKFwiY2F0Y2hcIixtLHtmb3JjZTohMH0pfSwwKX1pZih0aGlzLmNvbmZpZy5jdXJyZW50LmRlZHVwZSl7dmFyIGs9KGgubWVzc2FnZStoLnN0YWNrKS5zdWJzdHIoMCwxRTQpO2lmKGs9PT1hKXJldHVybjthPWt9KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3ZhciBiPTA7Yy5mb3JFYWNoKGguY29uc29sZSxmdW5jdGlvbihhKXtiKz0oYS5tZXNzYWdlfHxcIlwiKS5sZW5ndGh9KTtyZXR1cm4gOEU0PD1ifWZvcih2YXIgYj0wO2EoKSYmYjxoLmNvbnNvbGUubGVuZ3RoOyloLmNvbnNvbGVbYl0ubWVzc2FnZT1jLnRydW5jYXRlKGguY29uc29sZVtiXS5tZXNzYWdlLDFFMyksYisrfSkoKTt0aGlzLmxvZy5jbGVhcigpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtiPSExfSk7Yj0hMDt0aGlzLnRyYW5zbWl0dGVyLnNlbmRFcnJvcihoLHRoaXMuY3VzdG9tZXIudG9rZW4pfX1jYXRjaChtKXt0aGlzLm9uRmF1bHQobSl9fX0oKSxcclxub25GYXVsdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnRyYW5zbWl0dGVyfHxuZXcgdDthPWF8fHt9O2E9e3Rva2VuOih0aGlzLmN1c3RvbWVyfHx7fSkudG9rZW4sZmlsZTphLmZpbGV8fGEuZmlsZU5hbWUsbXNnOmEubWVzc2FnZXx8XCJ1bmtub3duXCIsc3RhY2s6KGEuc3RhY2t8fFwidW5rbm93blwiKS5zdWJzdHIoMCwxRTMpLHVybDp0aGlzLndpbmRvdy5sb2NhdGlvbix2OlwiMy4xMC4xXCIsaDpcImZiMDkwZjkyNDlhMTRlODQ0MGYzMTdmNTdiZDgyZWM4ZDZlYTMyYTRcIix4OnRoaXMudXRpbC51dWlkKCl9O2Iuc2VuZFRyYWNrZXJGYXVsdChhKX0sc2VyaWFsaXplOmZ1bmN0aW9uKGEsYil7aWYodGhpcy5oYXNJbnN0YWxsZWQmJnRoaXMuY29uZmlnLmN1cnJlbnQuc2VyaWFsaXplJiYhYil0cnl7cmV0dXJuIHRoaXMuY29uZmlnLmN1cnJlbnQuc2VyaWFsaXplKGEpfWNhdGNoKGMpe3RoaXMub25FcnJvcihcImNhdGNoXCIsYyx7Zm9yY2U6ITB9KX1yZXR1cm4gcS5wcm90b3R5cGUuZGVmYXVsdHMuc2VyaWFsaXplKGEpfSxcclxud2FybjpmdW5jdGlvbihhKXtjLmhhcyhnLFwiY29uc29sZS53YXJuXCIpJiZnLmNvbnNvbGUud2FybihcIlRyYWNrSlM6IFwiK2EpfX07cmV0dXJuKG5ldyBDKS5wdWIoKX0pKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygc2VsZj92b2lkIDA6c2VsZixcInVuZGVmaW5lZFwiPT09dHlwZW9mIGRvY3VtZW50P3ZvaWQgMDpkb2N1bWVudCk7XHJcblxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGluc2VydFVJKCkge1xyXG4gIGNvbnN0IGh0bWwgPSBgXHJcbiAgPGRpdiBpZD1cInRhXCIgc3R5bGU9XCJwb3NpdGlvbjogZml4ZWQ7ei1pbmRleDogOTAwMDAwO2JhY2tncm91bmQtY29sb3I6IHdoaXRlO2JvcmRlcjogc29saWQ7IHJpZ2h0OiAwcHg7d2lkdGg6IDM3MHB4O1xyXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwMHB4OyBcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogdW5zZXQ7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiB1bnNldDtcclxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICB0b3A6IDA7XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaG9wbGEtYnV0dG9uXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxyXG4gICAgICAgICAgICAgICAgICA8aWZyYW1lIHdpZHRoPVwiMzQ1cHhcIiBoZWlnaHQ9XCIxMDAwcHhcIiBkYXRhLW9ubG9naW49XCJsb2dpbl9jYWxsYmFja1wiIHRpdGxlPVwiaG9wbGE6bG9naW5fYnV0dG9uIEhPUExBIFBsdWdpblwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiIGFsbG93ZnVsbHNjcmVlbj1cInRydWVcIiBzY3JvbGxpbmc9XCJub1wiIGFsbG93PVwiZW5jcnlwdGVkLW1lZGlhXCIgc3JjPVwiaHR0cHM6Ly9sb2dpbi5ob3BsYS50by9idXR0b24vYnV0dG9uLmh0bWxcIiBzdHlsZT1cImJvcmRlcjogbm9uZTsgdmlzaWJpbGl0eTogdmlzaWJsZTsgd2lkdGg6IDM0NXB4OyBoZWlnaHQ6IDYxcHg7XCIgY2xhc3M9XCJcIj48L2lmcmFtZT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwhLS0gPGRpdiBpZD1cInRhaGVhZGVyXCIgY2xhc3M9XCJtZW51XCIgc3R5bGU9XCJcclxuICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogeC1sYXJnZTtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDlweDtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDlweDtcclxuICAgICAgICAgICAgICAgICAgXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgaWQ9XCJ2aWV3ZXJcIiBocmVmPVwiI1wiIHN0eWxlPVwiXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGJsYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4gICAgICAgICAgICAgICAgICAgIFwiPlZpZXdlcjwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8YSBpZD1cIm9mZmVyYm90XCIgaHJlZj1cIiNcIiBzdHlsZT1cIlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgXCI+T2ZmZXJCb3Q8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+XHJcbiAgICAgICAgICAgICAgICA8IS0tIE1ETCBUYWIgQ29udGFpbmVyIC0tPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cInRhaGVhZGVyXCIgY2xhc3M9XCJtZGwtdGFicyBtZGwtanMtdGFicyBtZGwtanMtcmlwcGxlLWVmZmVjdFwiIHN0eWxlPVwiaGVpZ2h0OiAxMDAlO1wiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiaW5mby1oZWFkZXJcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7IGNvbG9yOiB3aGl0ZTtiYWNrZ3JvdW5kOiByZ2IoNjMsODEsMTgxKTtsaW5lLWhlaWdodDogMjZweDtwYWRkaW5nOiA1cHggMHB4O3dpZHRoOiAxMDAlO3RleHQtYWxpZ246IGNlbnRlcjsganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJpbmZvLXN1YnNjcmlwdGlvblwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD1cImluZm8td2Vic2l0ZVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj48YSBpZD1cImluZm8tbG9nb3V0XCIgaHJlZj1cIiNcIiBvbmNsaWNrPVwiaG9wbGFfbG9nb3V0KClcIiBzdHlsZT1cInRleHQtZGVjb3JhdGlvbjogbm9uZTtjb2xvcjogd2hpdGU7LXdlYmtpdC1oaWdobGlnaHQ6IG5vbmU7XCI+TG9nb3V0PC9hPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwhLS0gVGFiIEJhcnMgLS0+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJtZW51XCIgY2xhc3M9XCJtZGwtdGFic19fdGFiLWJhclwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjcGFnZTJcIiBjbGFzcz1cIm1kbC10YWJzX190YWIgaXMtYWN0aXZlXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj5BdXRvbWF0ZTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjcGFnZTNcIiBjbGFzcz1cIm1kbC10YWJzX190YWJcIiBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPkNvbnRlbnQ8L2E+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgPCEtLSA8ZGl2IGlkPVwicGFnZTFcIiBjbGFzcz1cIm1kbC10YWJzX19wYW5lbCBpcy1hY3RpdmVcIiBzdHlsZT1cImhlaWdodDogMTAwJTtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aWZyYW1lIGlkPVwidGFmcmFtZVwiIHNyYz1cImh0dHBzOi8vc2VsbC5waG9uZXMudHJhZGUvP21vZGVsPTEycHJvJmFtcDtzdG9yYWdlPTEyOGdiJmFtcDtuZXR3b3JrPXVubG9ja2VkJmFtcDtjb25kaXRpb249dXNlZGxpa2VuZXcmYT0xXCIgc3R5bGU9XCJcclxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICBcIj48L2lmcmFtZT5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwicmVwb3J0YnVnMlwiIGNsYXNzPVwibWRsLWJ1dHRvbiBtZGwtanMtYnV0dG9uIG1kbC1idXR0b24tLXJhaXNlZCBtZGwtanMtcmlwcGxlLWVmZmVjdCBtZGwtYnV0dG9uLS1jb2xvcmVkXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDBweDtcclxuICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDRweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVwb3J0IGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwiYnVnXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1idWcgZmEtdy0xNlwiIHJvbGU9XCJpbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgc3R5bGU9XCJ3aWR0aDogMjJweDtwYWRkaW5nLWxlZnQ6IDNweDttYXJnaW4tYm90dG9tOiAzcHg7XCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNNTExLjk4OCAyODguOWMtLjQ3OCAxNy40My0xNS4yMTcgMzEuMS0zMi42NTMgMzEuMUg0MjR2MTZjMCAyMS44NjQtNC44ODIgNDIuNTg0LTEzLjYgNjEuMTQ1bDYwLjIyOCA2MC4yMjhjMTIuNDk2IDEyLjQ5NyAxMi40OTYgMzIuNzU4IDAgNDUuMjU1LTEyLjQ5OCAxMi40OTctMzIuNzU5IDEyLjQ5Ni00NS4yNTYgMGwtNTQuNzM2LTU0LjczNkMzNDUuODg2IDQ2Ny45NjUgMzE0LjM1MSA0ODAgMjgwIDQ4MFYyMzZjMC02LjYyNy01LjM3My0xMi0xMi0xMmgtMjRjLTYuNjI3IDAtMTIgNS4zNzMtMTIgMTJ2MjQ0Yy0zNC4zNTEgMC02NS44ODYtMTIuMDM1LTkwLjYzNi0zMi4xMDhsLTU0LjczNiA1NC43MzZjLTEyLjQ5OCAxMi40OTctMzIuNzU5IDEyLjQ5Ni00NS4yNTYgMC0xMi40OTYtMTIuNDk3LTEyLjQ5Ni0zMi43NTggMC00NS4yNTVsNjAuMjI4LTYwLjIyOEM5Mi44ODIgMzc4LjU4NCA4OCAzNTcuODY0IDg4IDMzNnYtMTZIMzIuNjY2QzE1LjIzIDMyMCAuNDkxIDMwNi4zMy4wMTMgMjg4LjktLjQ4NCAyNzAuODE2IDE0LjAyOCAyNTYgMzIgMjU2aDU2di01OC43NDVsLTQ2LjYyOC00Ni42MjhjLTEyLjQ5Ni0xMi40OTctMTIuNDk2LTMyLjc1OCAwLTQ1LjI1NSAxMi40OTgtMTIuNDk3IDMyLjc1OC0xMi40OTcgNDUuMjU2IDBMMTQxLjI1NSAxNjBoMjI5LjQ4OWw1NC42MjctNTQuNjI3YzEyLjQ5OC0xMi40OTcgMzIuNzU4LTEyLjQ5NyA0NS4yNTYgMCAxMi40OTYgMTIuNDk3IDEyLjQ5NiAzMi43NTggMCA0NS4yNTVMNDI0IDE5Ny4yNTVWMjU2aDU2YzE3Ljk3MiAwIDMyLjQ4NCAxNC44MTYgMzEuOTg4IDMyLjl6TTI1NyAwYy02MS44NTYgMC0xMTIgNTAuMTQ0LTExMiAxMTJoMjI0QzM2OSA1MC4xNDQgMzE4Ljg1NiAwIDI1NyAwelwiPjwvcGF0aD48L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+IC0tPlxyXG5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInBhZ2UyXCIgY2xhc3M9XCJtZGwtdGFic19fcGFuZWwgaXMtYWN0aXZlXCIgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmU7IGhlaWdodDogY2FsYygxMDAlIC0gODNweCk7IGRpc3BsYXk6IG5vbmU7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiZGVtby1saXN0LWNvbnRyb2wgbWRsLWxpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtXCIgc3R5bGU9XCJoZWlnaHQ6IDEwMHB4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0XCIgdHlwZT1cInRleHRcIiByb3dzPSBcIjNcIiBpZD1cImtleXdvcmRzXCIgPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwia2V5d29yZHNcIj5LZXl3b3JkczwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW1cIiBzdHlsZT1cImhlaWdodDogMTAwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHJvd3M9IFwiM1wiIGlkPVwiemlwY29kZXNcIiA+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwiemlwY29kZXNcIj5aaXBjb2RlczwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJtZGwtbGlzdF9faXRlbVwiIHN0eWxlPVwiaGVpZ2h0OiAxMDBweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcm93cz0gXCIzXCIgaWQ9XCJza2lwd29yZHNcIiA+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwic2tpcHdvcmRzXCI+U2tpcCBXb3JkczwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJtZGwtbGlzdF9faXRlbSB0YXNlcGFyYXRvclwiIHN0eWxlPVwicGFkZGluZy10b3A6IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDQzcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdGluZyBQcmljZSBNaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb24gdGF3c21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9XCIxMDBcIiBpZD1cImxpc3RpbmdfbWluX3ByaWNlXCIgcGxhY2Vob2xkZXI9XCIwXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiB1bnNldDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwibGlzdGluZ19taW5fcHJpY2VcIj48L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDIwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1zZWNvbmRhcnktYWN0aW9uIHRhd3NtYWxsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0XCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPVwiMTAwMFwiIGlkPVwibGlzdGluZ19tYXhfcHJpY2VcIiBwbGFjZWhvbGRlcj1cIjBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwibGlzdGluZ19tYXhfcHJpY2VcIj48L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cInBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE93bmVyIExpc3RpbmdzIE1pblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tc2Vjb25kYXJ5LWFjdGlvbiB0YXdzbWFsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJudW1iZXJcIiB2YWx1ZT1cIjFcIiBpZD1cIm93bmVyX21pbl9saXN0c1wiIHBsYWNlaG9sZGVyPVwiMFwiIHN0eWxlPVwidGV4dC1hbGlnbjogdW5zZXQ7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cIm93bmVyX21pbl9saXN0c1wiPjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMjBweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb24gdGF3c21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9XCIxXCIgaWQ9XCJvd25lcl9tYXhfbGlzdHNcIiBwbGFjZWhvbGRlcj1cIjBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwib3duZXJfbWF4X2xpc3RzXCI+PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+IC0tPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cInBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEJvdCBNb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtcmFkaW8gbWRsLWpzLXJhZGlvIG1kbC1qcy1yaXBwbGUtZWZmZWN0XCIgZm9yPVwibW9kZV9zaW5nbGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBpZD1cIm1vZGVfc2luZ2xlXCIgY2xhc3M9XCJtZGwtcmFkaW9fX2J1dHRvblwiIG5hbWU9XCJib3RfbW9kZVwiIHZhbHVlPVwic2luZ2xlXCIgY2hlY2tlZCBkaXNhYmxlZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLXJhZGlvX19sYWJlbFwiPlNpbmdsZTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC1yYWRpbyBtZGwtanMtcmFkaW8gbWRsLWpzLXJpcHBsZS1lZmZlY3RcIiBmb3I9XCJtb2RlX211bHRpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgaWQ9XCJtb2RlX211bHRpXCIgY2xhc3M9XCJtZGwtcmFkaW9fX2J1dHRvblwiIG5hbWU9XCJib3RfbW9kZVwiIHZhbHVlPVwibXVsdGlcIiBkaXNhYmxlZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLXJhZGlvX19sYWJlbFwiPk11bHRpPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtIHRhc2VwYXJhdG9yXCIgc3R5bGU9XCJwYWRkaW5nLXRvcDogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDNweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0aW5nIE1heCBBZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb24gdGF3c21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwibnVtYmVyXCIgaWQ9XCJsaXN0aW5nX21heF9hZ2VcIiB2YWx1ZT05MCBwbGFjZWhvbGRlcj1cIjBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwibGlzdGluZ19tYXhfYWdlXCI+PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJtZGwtbGlzdF9faXRlbSB0YXNlcGFyYXRvclwiIHN0eWxlPVwicGFkZGluZy10b3A6IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDQzcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdGluZyBQcmljZSBEZWx0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tc2Vjb25kYXJ5LWFjdGlvbiB0YXdzbWFsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsaXN0aW5nX3ByaWNlX2RlbHRhXCIgcGxhY2Vob2xkZXI9XCIwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cImxpc3RpbmdfcHJpY2VfZGVsdGFcIj48L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtIHRhc2VwYXJhdG9yXCIgc3R5bGU9XCJwYWRkaW5nLXRvcDogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDNweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBDdXN0b20gUHJpY2UgRGVsdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb24gdGF3c21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIGlkPVwiY3VzdG9tX3ByaWNlX2RlbHRhXCIgcGxhY2Vob2xkZXI9XCIwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cImN1c3RvbV9wcmljZV9kZWx0YVwiPjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cInBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFByaWNlIFJvdW5kIFVwL0Rvd25cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb24gdGF3c21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwibnVtYmVyXCIgaWQ9XCJyb3VuZHVwZG93blwiIHBsYWNlaG9sZGVyPVwiMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibWRsLXRleHRmaWVsZF9fbGFiZWxcIiBmb3I9XCJyb3VuZHVwZG93blwiPjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cInBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRpbnVlIEFmdGVyIFN0b3JhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtc3dpdGNoIG1kbC1qcy1zd2l0Y2ggbWRsLWpzLXJpcHBsZS1lZmZlY3RcIiBmb3I9XCJzd2l0Y2gtY29udGludWVfYWZ0ZXJfc3RvcmFnZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwic3dpdGNoLWNvbnRpbnVlX2FmdGVyX3N0b3JhZ2VcIiBjbGFzcz1cIm1kbC1zd2l0Y2hfX2lucHV0XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cInBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRpbnVlIEFmdGVyIE5ldHdvcmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtc3dpdGNoIG1kbC1qcy1zd2l0Y2ggbWRsLWpzLXJpcHBsZS1lZmZlY3RcIiBmb3I9XCJzd2l0Y2gtY29udGludWVfYWZ0ZXJfbmV0d29ya1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwic3dpdGNoLWNvbnRpbnVlX2FmdGVyX25ldHdvcmtcIiBjbGFzcz1cIm1kbC1zd2l0Y2hfX2lucHV0XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cInBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFNraXAgU2hpcHBpbmctRW5hYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tc2Vjb25kYXJ5LWFjdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC1zd2l0Y2ggbWRsLWpzLXN3aXRjaCBtZGwtanMtcmlwcGxlLWVmZmVjdFwiIGZvcj1cInN3aXRjaC1za2lwc2hpcHBpbmdlbmFibGVkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJzd2l0Y2gtc2tpcHNoaXBwaW5nZW5hYmxlZFwiIGNsYXNzPVwibWRsLXN3aXRjaF9faW5wdXRcIiBjaGVja2VkIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtIHRhc2VwYXJhdG9yXCIgc3R5bGU9XCJwYWRkaW5nLXRvcDogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDNweDsgZGlzcGxheTogbm9uZTtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5kIFBhcnRuZXIgTWVzc2FnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtc3dpdGNoIG1kbC1qcy1zd2l0Y2ggbWRsLWpzLXJpcHBsZS1lZmZlY3RcIiBmb3I9XCJzd2l0Y2gtc2VuZHBhcnRuZXJtZXNzYWdlc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwic3dpdGNoLXNlbmRwYXJ0bmVybWVzc2FnZXNcIiBjbGFzcz1cIm1kbC1zd2l0Y2hfX2lucHV0XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7IHBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tc2Vjb25kYXJ5LWFjdGlvbiB0YXdzbWFsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJudW1iZXJcIiB2YWx1ZT1cIjVcIiBpZD1cInN0cmVha1wiIHBsYWNlaG9sZGVyPVwiMFwiIHN0eWxlPVwidGV4dC1hbGlnbjogdW5zZXQ7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cInN0cmVha1wiPjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlbiBUaW1lb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1zZWNvbmRhcnktYWN0aW9uIHRhd3NtYWxsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0XCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPVwiMTVcIiBpZD1cInN0cmVha3RpbWVvdXRcIiBwbGFjZWhvbGRlcj1cIjBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwic3RyZWFrdGltZW91dFwiPjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0gdGFzZXBhcmF0b3JcIiBzdHlsZT1cInBhZGRpbmctdG9wOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0M3B4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1heCBDb25jdXJyZW50IENvbnZlcnNhdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXNlY29uZGFyeS1hY3Rpb24gdGF3c21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9XCI1MFwiIGlkPVwibWF4Y29uY3VycmVudGNvbnZlcnNhdGlvbnNcIiBwbGFjZWhvbGRlcj1cIjBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwibWF4Y29uY3VycmVudGNvbnZlcnNhdGlvbnNcIj48L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtIHRhc2VwYXJhdG9yXCIgc3R5bGU9XCJwYWRkaW5nLXRvcDogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDNweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGUgQWZ0ZXIgU2VuZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tc2Vjb25kYXJ5LWFjdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC1zd2l0Y2ggbWRsLWpzLXN3aXRjaCBtZGwtanMtcmlwcGxlLWVmZmVjdFwiIGZvcj1cInN3aXRjaC1kZWxldGVhZnRlcnNlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cInN3aXRjaC1kZWxldGVhZnRlcnNlbmRcIiBjbGFzcz1cIm1kbC1zd2l0Y2hfX2lucHV0XCIgY2hlY2tlZCAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJtZGwtbGlzdF9faXRlbSB0YXNlcGFyYXRvclwiIHN0eWxlPVwicGFkZGluZy10b3A6IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDgxcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b25zX2NvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJwdXJnZV9saXN0aW5nc1wiIGNsYXNzPVwibWRsLWJ1dHRvbiBtZGwtanMtYnV0dG9uIG1kbC1idXR0b24tLXJhaXNlZCBtZGwtanMtcmlwcGxlLWVmZmVjdCBtZGwtYnV0dG9uLS1hY2NlbnQgYmdyZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFB1cmdlIExpc3RpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cInB1cmdlX293bmVyc1wiIGNsYXNzPVwibWRsLWJ1dHRvbiBtZGwtanMtYnV0dG9uIG1kbC1idXR0b24tLXJhaXNlZCBtZGwtanMtcmlwcGxlLWVmZmVjdCBtZGwtYnV0dG9uLS1hY2NlbnQgYmdyZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFB1cmdlIE93bmVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwic3RhdHVzXCIgc3R5bGU9XCJjb2xvcjogd2hpdGU7YmFja2dyb3VuZDogYmxhY2s7bGluZS1oZWlnaHQ6IDI2cHg7cGFkZGluZzogNXB4IDBweDtwb3NpdGlvbjogYWJzb2x1dGU7Ym90dG9tOiAxMzdweDt3aWR0aDogMTAwJTt0ZXh0LWFsaWduOiBjZW50ZXI7bWluLWhlaWdodDogNjFweDthbGlnbi1pdGVtczogY2VudGVyO2Rpc3BsYXk6IGZsZXg7anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwic3RhdHVzdGV4dFwiIHN0eWxlPVwiXHJcbiAgICAgICAgICAgICAgICAgICAgXCI+PC9zcGFuPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInN0YXRzXCIgc3R5bGU9XCJjb2xvcjogd2hpdGU7YmFja2dyb3VuZDogcmdiKDYzLDgxLDE4MSk7bGluZS1oZWlnaHQ6IDI2cHg7cGFkZGluZzogNXB4IDBweDtwb3NpdGlvbjogYWJzb2x1dGU7Ym90dG9tOiA0OXB4O3dpZHRoOiAxMDAlO3RleHQtYWxpZ246IGNlbnRlcjtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Ub2RheSdzIFN0YXRzIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XHJcbiAgICAgICAgICAgICAgICAgICAgXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c3BhbiBpZD1cInN0YXRfc2NyYXBlZFwiPjA8L3NwYW4+IHNjcmFwZWQgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PHNwYW4gaWQ9XCJzdGF0X25ld19saXN0aW5nc1wiPjA8L3NwYW4+IG5ldyA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c3BhbiBpZD1cInN0YXRfc2luZ2xlX2xpc3RpbmdzXCI+MDwvc3Bhbj4gc2luZ2xlPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PHNwYW4gaWQ9XCJzdGF0X211bHRpX2xpc3RpbmdzXCI+MDwvc3Bhbj4gbXVsdGk8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG4gICAgICAgICAgICAgICAgICAgIFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PHNwYW4gaWQ9XCJzdGF0X29mZmVyc1wiPjA8L3NwYW4+IG9mZmVyczwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxzcGFuIGlkPVwic3RhdF9ydW5zXCI+MDwvc3Bhbj4gcnVucyA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c3BhbiBpZD1cInN0YXRfc3RyZWFrc1wiPjA8L3NwYW4+IHN0cmVhazwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxzcGFuIGlkPVwic3RhdF9rb1wiPjA8L3NwYW4+IEtPPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9vdGVyXCIgc3R5bGU9XCJcclxuICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogNXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7IGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wOiBzb2xpZCAxcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wLWNvbG9yOiAjZTBlMGUwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0NHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgIFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UnVuIEZyb208L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJydW5mcm9tXCIgdHlwZT1cInRpbWVcIiBzdHlsZT1cIndpZHRoOiB1bnNldDtmb250LXNpemU6IDE2cHg7Zm9udC1mYW1pbHk6IExhdG8sJnF1b3Q7SGVsdmV0aWNhIE5ldWUmcXVvdDssQXJpYWwsc2Fucy1zZXJpZjtmb250LXdlaWdodDogNDAwO1wiIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB2YWx1ZT1cIjA5OjAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5VbnRpbDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD1cInJ1bnVudGlsXCIgdHlwZT1cInRpbWVcIiBzdHlsZT1cIndpZHRoOiB1bnNldDtmb250LXNpemU6IDE2cHg7Zm9udC1mYW1pbHk6IExhdG8sJnF1b3Q7SGVsdmV0aWNhIE5ldWUmcXVvdDssQXJpYWwsc2Fucy1zZXJpZjtmb250LXdlaWdodDogNDAwO1wiIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB2YWx1ZT1cIjE4OjAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtc3dpdGNoIG1kbC1qcy1zd2l0Y2ggbWRsLWpzLXJpcHBsZS1lZmZlY3RcIiBmb3I9XCJzd2l0Y2gtcnVudW50aWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwic3dpdGNoLXJ1bnVudGlsXCIgY2xhc3M9XCJtZGwtc3dpdGNoX19pbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1zd2l0Y2hfX2xhYmVsXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwicGFnZTNcIiBjbGFzcz1cIm1kbC10YWJzX19wYW5lbFwiIHN0eWxlPVwiXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA4M3B4KTtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuIGF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInBhZ2UybG9hZGluZ1wiIGNsYXNzPVwibWRsLXNwaW5uZXIgbWRsLWpzLXNwaW5uZXIgaXMtYWN0aXZlXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7bGVmdDogNTAlO3RvcDogMzAlOyBkaXNwbGF5Om5vbmU7XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiZGVtby1saXN0LWNvbnRyb2wgbWRsLWxpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtXCIgc3R5bGU9XCJoZWlnaHQ6IDEwMHB4O1wiPiAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHJvd3M9XCIzXCIgaWQ9XCJvcGVuZXJtZXNzYWdlXCIgPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cIm9wZW5lcm1lc3NhZ2VcIj5PcGVuZXIgTWVzc2FnZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJtZGwtbGlzdF9faXRlbVwiIHN0eWxlPVwiaGVpZ2h0OiAxMDBweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcm93cz1cIjNcIiBpZD1cInF1ZXN0aW9uXzFcIiA+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwicXVlc3Rpb25fMVwiPlF1ZXN0aW9uIDE8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW1cIiBzdHlsZT1cImhlaWdodDogMTAwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHJvd3M9XCIzXCIgaWQ9XCJxdWVzdGlvbl8yXCIgPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cInF1ZXN0aW9uXzJcIj5RdWVzdGlvbiAyPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtXCIgc3R5bGU9XCJoZWlnaHQ6IDEwMHB4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0XCIgdHlwZT1cInRleHRcIiByb3dzPVwiM1wiIGlkPVwiZ2JtZXNzYWdlXCIgPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cImdibWVzc2FnZVwiPkdCIE1lc3NhZ2U8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW1cIiBzdHlsZT1cImhlaWdodDogMTAwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHJvd3M9XCIzXCIgaWQ9XCJuZXR3b3JrbWVzc2FnZVwiID48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibWRsLXRleHRmaWVsZF9fbGFiZWxcIiBmb3I9XCJuZXR3b3JrbWVzc2FnZVwiPk5ldHdvcmsgTWVzc2FnZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJtZGwtbGlzdF9faXRlbVwiIHN0eWxlPVwiaGVpZ2h0OiAxMDBweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcm93cz1cIjNcIiBpZD1cInF1ZXN0aW9uXzNcIiA+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwicXVlc3Rpb25fM1wiPlF1ZXN0aW9uIDM8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW1cIiBzdHlsZT1cImhlaWdodDogMTAwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHJvd3M9XCIzXCIgaWQ9XCJxdWVzdGlvbl80XCIgPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cInF1ZXN0aW9uXzRcIj5RdWVzdGlvbiA0PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtXCIgc3R5bGU9XCJoZWlnaHQ6IDEwMHB4O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kbC1saXN0X19pdGVtLXByaW1hcnktY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0XCIgdHlwZT1cInRleHRcIiByb3dzPVwiM1wiIGlkPVwibG93YmFsbF9tZXNzYWdlXCIgPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cImxvd2JhbGxfbWVzc2FnZVwiPkxvd2JhbGw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW1cIiBzdHlsZT1cImhlaWdodDogMTAwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHJvd3M9XCIzXCIgaWQ9XCJvZmZlcm1lc3NhZ2VcIiA+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwib2ZmZXJtZXNzYWdlXCI+T2ZmZXIgTWVzc2FnZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJtZGwtbGlzdF9faXRlbVwiIHN0eWxlPVwiaGVpZ2h0OiAxMDBweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcm93cz1cIjNcIiBpZD1cIm1lZXR1cG1lc3NhZ2VcIiA+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsXCIgZm9yPVwibWVldHVwbWVzc2FnZVwiPk1lZXR1cCBNZXNzYWdlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm1kbC1saXN0X19pdGVtXCIgc3R5bGU9XCJoZWlnaHQ6IDYwcHg7IGRpc3BsYXk6IG5vbmU7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRsLWxpc3RfX2l0ZW0tcHJpbWFyeS1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0XCIgdHlwZT1cInRleHRcIiBpZD1cInBhcnRuZXJtZXNzYWdlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cInBhcnRuZXJtZXNzYWdlXCI+UGFydG5lciBNZXNzYWdlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmFyaWFibGVzXCIgc3R5bGU9XCJwYWRkaW5nLWJvdHRvbTogMTBweDsgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogNTVweDtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHggMTZweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJkaXNwbGF5OiBibG9jaztcIj5BdmFpbGFibGUgVmFyaWFibGVzOjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YXJpYWJsZVwiPltuYW1lXTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YXJpYWJsZVwiPlttb2RlbF08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFyaWFibGVcIj5bbmV0d29ya108L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFyaWFibGVcIj5bbWVtb3J5XTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YXJpYWJsZVwiPltwcmljZV08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFyaWFibGVcIj5bbGlzdGluZ19wcmljZV08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFyaWFibGVcIj5bZGVkdWN0aW9uc108L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFyaWFibGVcIj5bY29uZGl0aW9uXTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz1cInZhcmlhYmxlXCI+W3F1b3RlX2xpbmtdPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhcmlhYmxlXCI+W3BpY2t1cF9saW5rXTwvc3Bhbj4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFyaWFibGVcIj5bcGFydG5lcl9saW5rXTwvc3Bhbj4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFyaWFibGVcIj5bd2Vic2l0ZV08L3NwYW4+IC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZW1wbGF0ZS1hY3Rpb25zXCIgc3R5bGU9XCJcclxuICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDBweDtcclxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICAgIFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cInRlc3RfdGVtcGxhdGVcIiBjbGFzcz1cIm1kbC1idXR0b24gbWRsLWpzLWJ1dHRvbiBtZGwtYnV0dG9uLS1yYWlzZWQgbWRsLWJ1dHRvbi0tY29sb3JlZCBtZGwtanMtcmlwcGxlLWVmZmVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6IDUwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDRweDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgVGVzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwicmVzdG9yZV9kZWZhdWx0c1wiIGNsYXNzPVwibWRsLWJ1dHRvbiBtZGwtanMtYnV0dG9uIG1kbC1idXR0b24tLXJhaXNlZCBtZGwtYnV0dG9uLS1jb2xvcmVkIG1kbC1qcy1yaXBwbGUtZWZmZWN0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogNTAlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDQ0cHg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlc3RvcmUgRGVmYXVsdHNcclxuICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxkaWFsb2cgaWQ9XCJkaWFsb2ctYnVnXCIgY2xhc3M9XCJtZGwtZGlhbG9nXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cIm1kbC1kaWFsb2dfX3RpdGxlXCI+QnVnIFJlcG9ydDwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZGwtZGlhbG9nX19jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImJ1Z2xpc3RpbmdkZXRhaWxzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5CYXNlZCBvbiB0aGUgaW5mbyBhYm92ZS4gVGhlIGJvdCBkZXRlcm1pbmVkIHRoYXQgdGhlIHBob25lIHZhcmlhbnQgaXM6PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYnVndmFyaWFudGRldGFpbHNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcm93cz0gXCIzXCIgaWQ9XCJidWdjb21tZW50XCIgPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiIGZvcj1cImJ1Z2NvbW1lbnRcIj5CdWcgRGV0YWlsczwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWRsLWRpYWxvZ19fYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWRsLWJ1dHRvbiBzZW5kYnVnXCI+U3VibWl0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJtZGwtYnV0dG9uIGNsb3NlXCI+Q2xvc2U8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2RpYWxvZz5cclxuICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG4gIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgaHRtbCk7XHJcbn0iLCJpbXBvcnQgeyBmZXRjaExpc3RpbmdEZXRhaWwgfSBmcm9tIFwiLi9mZXRjaExpc3RpbmdEZXRhaWxcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc1NoaXBwaW5nRW5hYmxlZChsaXN0aW5nSWQpIHtcclxuICBjb25zdCBsaXN0aW5nRGV0YWlsID0gYXdhaXQgZmV0Y2hMaXN0aW5nRGV0YWlsKGxpc3RpbmdJZCk7XHJcbiAgcmV0dXJuIGxpc3RpbmdEZXRhaWwgJiYgbGlzdGluZ0RldGFpbC5mdWxmaWxsbWVudERldGFpbHMgJiYgbGlzdGluZ0RldGFpbC5mdWxmaWxsbWVudERldGFpbHMuc2hpcHBpbmdFbmFibGVkO1xyXG59IiwiaW1wb3J0IHsgc2V0Vmlld2VyU3RhdGUgfSBmcm9tIFwiLi9zZXRWaWV3ZXJTdGF0ZVwiO1xyXG5pbXBvcnQgeyB3YWl0Rm9yTWRsIH0gZnJvbSBcIi4vd2FpdEZvck1kbFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbnB1dHMoKSB7XHJcbiAgbGV0IGlzUnVuVW50aWxMb2FkZWQgPSBmYWxzZTtcclxuICBmb3IgKGNvbnN0IGtleSBpbiBsb2NhbFN0b3JhZ2UpIHtcclxuICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnaW5wdXRfJykpIHtcclxuICAgICAgY29uc3QgaWQgPSBrZXkucmVwbGFjZSgnaW5wdXRfJywgJycpO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xyXG4gICAgICAgICAgaWYgKGlkID09PSAnc3dpdGNoLXJ1bnVudGlsJykge1xyXG4gICAgICAgICAgICBzZXRWaWV3ZXJTdGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgaXNSdW5VbnRpbExvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIHNldFZpZXdlclN0YXRlKHZhbHVlICE9PSAndHJ1ZScpO1xyXG4gICAgICAgICAgICAvLyBlLmNoZWNrZWQgPSB2YWx1ZSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZS5jaGVja2VkID0gdmFsdWUgPT09ICd0cnVlJztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChrZXkuc3RhcnRzV2l0aCgncmFkaW9fJykpIHtcclxuICAgICAgY29uc3QgbmFtZSA9IGtleS5yZXBsYWNlKCdyYWRpb18nLCAnJyk7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgbGV0IGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShuYW1lKTtcclxuICAgICAgaWYgKGUpIHtcclxuICAgICAgICBlID0gZVswXTtcclxuICAgICAgICBpZiAoZS50eXBlID09PSAncmFkaW8nKSB7XHJcbiAgICAgICAgICBjb25zdCBlUmFkaW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2YWx1ZSk7XHJcbiAgICAgICAgICBpZiAoZVJhZGlvKSB7XHJcbiAgICAgICAgICAgIHdhaXRGb3JNZGwoZVJhZGlvKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICBlUmFkaW8ucGFyZW50Tm9kZS5NYXRlcmlhbFJhZGlvLmNoZWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoIWlzUnVuVW50aWxMb2FkZWQpIHtcclxuICAgIHNldFZpZXdlclN0YXRlKHRydWUpO1xyXG4gIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgd3JpdGVUb0Rhc2hCb2FyZCB9IGZyb20gXCIuL3dyaXRlVG9EYXNoQm9hcmRcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3RhdHMoKSB7XHJcbiAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XHJcbiAgY29uc3Qgbm93ID0gYCR7ZC5nZXRGdWxsWWVhcigpfSR7ZC5nZXRNb250aCgpICsgMX0ke2QuZ2V0RGF0ZSgpfWA7XHJcbiAgbGV0IHN0YXRzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYHN0YXRzXyR7bm93fWApO1xyXG4gIGlmIChzdGF0cykge1xyXG4gICAgc3RhdHMgPSBKU09OLnBhcnNlKHN0YXRzKTtcclxuICAgIGNvbnN0IHN0YXRLZXlzID0gWydvZmZlcnMnLCAncGFydG5lcnMnLCAncnVucycsICdzdHJlYWtzJywgJ2tvJywgJ3NjcmFwZWQnLCAnbmV3X2xpc3RpbmdzJywgJ3NpbmdsZV9saXN0aW5ncycsICdtdWx0aV9saXN0aW5ncyddO1xyXG4gICAgY29uc3QgZGFzaGJvYXJkRGF0YUtleXMgPSBbJ29mZmVycycsICdwYXJ0bmVycycsICdydW5zJywgJ3N0cmVha3MnLCAna28nLCAnbmV3X2xpc3RpbmdzJywgJ3NpbmdsZV9saXN0aW5ncycsICdtdWx0aV9saXN0aW5ncyddO1xyXG4gICAgY29uc3Qgb1dyaXRlID0ge307XHJcbiAgICBzdGF0S2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIGlmIChrZXkgaW4gc3RhdHMpIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzdGF0XyR7a2V5fWApLnRleHRDb250ZW50ID0gc3RhdHNba2V5XTtcclxuICAgIH0pO1xyXG4gICAgZGFzaGJvYXJkRGF0YUtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICBpZiAoa2V5IGluIHN0YXRzKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2tvJykge1xyXG4gICAgICAgICAgb1dyaXRlLktPID0gc3RhdHNba2V5XTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb1dyaXRlW2tleV0gPSBzdGF0c1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB3cml0ZVRvRGFzaEJvYXJkKG9Xcml0ZSk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgbG9naW5fY2FsbGJhY2sgfSBmcm9tIFwiLi9vblNlc3Npb25SZWFkeVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvZ291dCgpIHtcclxuICBIT1BMQV9sb2dpbi5ub3R5b3UoZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgIGxvZ2luX2NhbGxiYWNrKHVzZXIpO1xyXG4gICAgLy8gdXNlciBvYmplY3QgaXMgcmV0dXJuZWQgYWZ0ZXIgdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGZpbmlzaGVkIHRoZSBsb2dpbi1mbG93IChhY2NlcHRlZCBwcm9qZWN0IGFuZC9vciBoYXMgdGhlIHJlcXVpcmVkIHNvY2lhbCBuZXR3b3JrcyBsaW5rZWQpLlxyXG4gIH0pO1xyXG59IiwiaW1wb3J0IHsgQ09OU09MRV9NRVNTQUdFIH0gZnJvbSBcIi4vZ2V0Q29uc29sZU1lc3NhZ2VzXCI7XHJcbmltcG9ydCB7IGdldFBhcnRuZXJEZXRhaWxzIH0gZnJvbSBcIi4vZ2V0UGFydG5lckRldGFpbHNcIjtcclxuaW1wb3J0IHsgd2FpdEZvck1kbCB9IGZyb20gXCIuL3dhaXRGb3JNZGxcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvblNlc3Npb25SZWFkeSh1c2VyKSB7XHJcbiAgLy8gY29uc29sZS5sb2coXCJVc2VyIERldGFpbHNcIiwgSE9QTEFfbG9naW4udXNlcik7IFxyXG4gIC8vIGNvbnNvbGUubG9nKFwiWW91IGFyZSBsb2dnZWQgaW4gYXMgXCIsIEhPUExBX2xvZ2luLnVzZXIudWlkKTtcclxuICBzaG93TG9hZGluZyhmYWxzZSk7XHJcbiAgaWYgKHVzZXIuaXNBbm9ueW1vdXMpIHtcclxuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9wbGEtYnV0dG9uJyk7XHJcbiAgICBpZiAoZSkgZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICB9IGVsc2Uge1xyXG4gICAgbG9naW5fY2FsbGJhY2sodXNlcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9naW5fY2FsbGJhY2sodXNlcikge1xyXG4gIGxldCBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvcGxhLWJ1dHRvbicpO1xyXG4gIGlmIChlKSBlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI21lbnUnKTtcclxuICBpZiAoZSkgZS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG5cclxuICBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhICNwYWdlMicpO1xyXG4gIGlmIChlKSBlLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xyXG5cclxuICBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhICNwYWdlMycpO1xyXG4gIGlmIChlKSBlLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xyXG5cclxuICBjb21wb25lbnRIYW5kbGVyLnVwZ3JhZGVEb20oKTtcclxuICBjb25zdCB1aWQgPSB1c2VyICYmIHVzZXIudWlkO1xyXG4gIGlmICh1aWQpIHtcclxuICAgIC8vIFBBUlRORVIgSURcclxuICAgIGdldFBhcnRuZXJJZCh1aWQpLnRoZW4ocGFydG5lcklkID0+IHtcclxuICAgICAgd2luZG93LnRhUGFydG5lcklkID0gcGFydG5lcklkO1xyXG4gICAgICB3aW5kb3cudGFFbWFpbCA9IHVzZXIgJiYgdXNlci5lbWFpbDtcclxuICAgICAgXHJcbiAgICAgIGdldFBhcnRuZXJEZXRhaWxzKHBhcnRuZXJJZCkudGhlbihhc3luYyBkZXRhaWxzID0+IHtcclxuICAgICAgICBpZiAoZGV0YWlscy5lcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihkZXRhaWxzLmVycm9yKTtcclxuICAgICAgICAgIHNob3dTdWJzY3JpcHRpb24oZGV0YWlscywgZmFsc2UpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUQSBVSURcclxuICAgICAgICB3aW5kb3cudGFVSUQgPSB1aWQ7XHJcbiAgXHJcbiAgICAgICAgLy8gdmFyX2RvbWFpblxyXG4gICAgICAgIHdpbmRvdy52YXJfZG9tYWluID0gZGV0YWlscyAmJiBkZXRhaWxzLnBhcnRuZXJfZGV0YWlscyAmJiBkZXRhaWxzLnBhcnRuZXJfZGV0YWlscy53ZWJzaXRlICYmIGRldGFpbHMucGFydG5lcl9kZXRhaWxzLndlYnNpdGUuZG9tYWluO1xyXG4gICAgICAgIGlmICghd2luZG93LnZhcl9kb21haW4pIHdpbmRvdy52YXJfZG9tYWluID0gJyc7XHJcbiAgICAgICAgLy8gVEEgRU1BSUxcclxuICAgICAgICBpZiAoIXdpbmRvdy50YUVtYWlsKSB3aW5kb3cudGFFbWFpbCA9IGRldGFpbHMgJiYgZGV0YWlscy5wYXJ0bmVyX2RldGFpbHMgJiYgZGV0YWlscy5wYXJ0bmVyX2RldGFpbHMuZW1haWw7XHJcbiAgXHJcbiAgICAgICAgLy8gU0VUIFRSQUNLSlMgRU1BSUxcclxuICAgICAgICBpZiAod2luZG93LlRyYWNrSlMgJiYgd2luZG93LnRhRW1haWwpIHtcclxuICAgICAgICAgIHdpbmRvdy5UcmFja0pTICYmIHdpbmRvdy5UcmFja0pTLmNvbmZpZ3VyZSh7XHJcbiAgICAgICAgICAgIHVzZXJJZDogd2luZG93LnRhRW1haWwsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgLy8gU1VCU0NSSVBUSU9OXHJcbiAgICAgICAgc2hvd1N1YnNjcmlwdGlvbihkZXRhaWxzLCB1aWQgIT09IHBhcnRuZXJJZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFoZWFkZXInKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFoZWFkZXInKS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFBhcnRuZXJJZCh1aWQpIHtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly91cy1jZW50cmFsMS10cmFkZS1hcHBsZXMuY2xvdWRmdW5jdGlvbnMubmV0L3BhcnRuZXJzP2lzVGVhbW1lbWJlcj0xJnVpZD0ke3VpZH1gKS50aGVuKHggPT4geC5qc29uKCkpO1xyXG4gIGxldCBwYXJ0bmVySWQgPSByZXMgJiYgcmVzLmlzVGVhbU1lbWJlciAmJiByZXMuaXNUZWFtTWVtYmVyLnBhcnRuZXJJZDtcclxuICBpZiAoIXBhcnRuZXJJZCkgcGFydG5lcklkID0gdWlkO1xyXG4gIHJldHVybiBwYXJ0bmVySWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvbihkZXRhaWxzKSB7XHJcbiAgaWYgKGRldGFpbHMgJiYgZGV0YWlscy5zdWJzY3JpcHRpb25fZGV0YWlscyAmJiBkZXRhaWxzLnN1YnNjcmlwdGlvbl9kZXRhaWxzLmJ1c2luZXNzICYmIGRldGFpbHMuc3Vic2NyaXB0aW9uX2RldGFpbHMuYnVzaW5lc3Muc3RhdHVzID09PSAnYWN0aXZlJykge1xyXG4gICAgcmV0dXJuICdCdXNpbmVzcyc7XHJcbiAgfSBlbHNlIGlmIChkZXRhaWxzICYmIGRldGFpbHMuc3Vic2NyaXB0aW9uX2RldGFpbHMgJiYgZGV0YWlscy5zdWJzY3JpcHRpb25fZGV0YWlscy50cmFkZXIgJiYgZGV0YWlscy5zdWJzY3JpcHRpb25fZGV0YWlscy50cmFkZXIuc3RhdHVzID09PSAnYWN0aXZlJykge1xyXG4gICAgcmV0dXJuICdUcmFkZXInO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dTdWJzY3JpcHRpb24oZGV0YWlscywgaXNUZWFtTWVtYmVyKSB7XHJcbiAgQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCAnJyk7XHJcbiAgbGV0IHN1YnNjcmlwdGlvbiA9IGdldFN1YnNjcmlwdGlvbihkZXRhaWxzKTtcclxuICBpZiAoIXN1YnNjcmlwdGlvbiAmJiBpc1RlYW1NZW1iZXIpIHtcclxuICAgIHN1YnNjcmlwdGlvbiA9ICdUZWFtIE1lbWJlcic7XHJcbiAgfVxyXG4gIGNvbnN0IGVJbmZvSGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2luZm8taGVhZGVyJyk7XHJcbiAgaWYgKGVJbmZvSGVhZGVyKSBlSW5mb0hlYWRlci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG5cclxuICBjb25zdCBodG1sTG9nb3V0ID0gJzxhIGlkPVwiaW5mby1sb2dvdXRcIiBocmVmPVwiI1wiIG9uY2xpY2s9XCJob3BsYV9sb2dvdXQoKVwiIHN0eWxlPVwiY29sb3I6IHdoaXRlOy13ZWJraXQtaGlnaGxpZ2h0OiBub25lO1wiPkxvZ291dDwvYT4nO1xyXG4gIGlmICghc3Vic2NyaXB0aW9uKSB7XHJcbiAgICB3aW5kb3cuaXNBbGxvd2VkID0gZmFsc2U7XHJcbiAgICBpZiAoZUluZm9IZWFkZXIpIGVJbmZvSGVhZGVyLmlubmVySFRNTCA9IGA8c3Bhbj4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vcGhvbmVzLnRyYWRlL2pvaW4tdXMvXCI+U3Vic2NyaWJlIGhlcmU8L2E+IHRvIHVzZSB0aGlzIGJvdCBvciAke2h0bWxMb2dvdXR9PC9zcGFuPmBcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgd2luZG93LmlzQWxsb3dlZCA9IHRydWU7XHJcbiAgaWYgKGVJbmZvSGVhZGVyKSBlSW5mb0hlYWRlci5pbm5lckhUTUwgPSBgPHNwYW4gaWQ9XCJpbmZvLXN1YnNjcmlwdGlvblwiPjwvc3Bhbj5cclxuICAgIDxzcGFuIGlkPVwiaW5mby13ZWJzaXRlXCI+PC9zcGFuPlxyXG4gICAgPHNwYW4+JHtodG1sTG9nb3V0fTwvc3Bhbj5gO1xyXG4gIFxyXG4gIGxldCBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2luZm8tc3Vic2NyaXB0aW9uJyk7XHJcbiAgaWYgKGUpIGUudGV4dENvbnRlbnQgPSBzdWJzY3JpcHRpb247XHJcbiAgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbmZvLXdlYnNpdGUnKTtcclxuICBpZiAoZSkgZS50ZXh0Q29udGVudCA9IHdpbmRvdy52YXJfZG9tYWluO1xyXG5cclxuICBpZiAoc3Vic2NyaXB0aW9uID09PSAnQnVzaW5lc3MnKSB7XHJcbiAgICBsZXQgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RlX211bHRpJyk7XHJcbiAgICBpZiAoZSkge1xyXG4gICAgICBlLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIHdhaXRGb3JNZGwoZSkudGhlbigoZSkgPT4ge1xyXG4gICAgICAgIGUucGFyZW50Tm9kZS5NYXRlcmlhbFJhZGlvLmNoZWNrRGlzYWJsZWQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGVfc2luZ2xlJyk7XHJcbiAgICBpZiAoZSkge1xyXG4gICAgICBlLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIHdhaXRGb3JNZGwoZSkudGhlbigoZSkgPT4ge1xyXG4gICAgICAgIGUucGFyZW50Tm9kZS5NYXRlcmlhbFJhZGlvLmNoZWNrRGlzYWJsZWQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGp1c3RlZFByaWNlRGVsdGEocHJpY2UsIGRlbHRhKSB7XHJcbiAgaWYgKCFwcmljZSkgcmV0dXJuIHByaWNlO1xyXG4gIGlmICghZGVsdGEpIHJldHVybiBwcmljZTtcclxuICBpZiAoZGVsdGEuaW5jbHVkZXMoJyUnKSkge1xyXG4gICAgZGVsdGEgPSBkZWx0YS5yZXBsYWNlKC9bXlxcZFxcLi1dL2csICcnKTsgLy8gUkVNT1ZFIENIQVJBQ1RFUlMgVEhBVCBBUkUgTk9UIC4gT1IgRElHSVRcclxuICAgIGRlbHRhID0gTnVtYmVyKGRlbHRhKTtcclxuICAgIHJldHVybiBwcmljZSArIChwcmljZSAqIChkZWx0YSAvIDEwMCkpXHJcbiAgfSBlbHNlIHtcclxuICAgIGRlbHRhID0gZGVsdGEucmVwbGFjZSgvW15cXGRcXC4tXS9nLCAnJyk7IC8vIFJFTU9WRSBDSEFSQUNURVJTIFRIQVQgQVJFIE5PVCAuIE9SIERJR0lUXHJcbiAgICBkZWx0YSA9IE51bWJlcihkZWx0YSk7XHJcbiAgICByZXR1cm4gcHJpY2UgKyBkZWx0YVxyXG4gIH1cclxufSIsImltcG9ydCB7IHJlbW92ZURlc2NyaXB0aW9uIH0gZnJvbSBcIi4uL3JlbW92ZURlc2NyaXB0aW9uXCI7XHJcbmltcG9ydCB7IGdldFJvdW5kZWRQcmljZSB9IGZyb20gXCIuL2dldFJvdW5kZWRQcmljZVwiO1xyXG5pbXBvcnQgeyBnZXRBZGp1c3RlZFByaWNlRGVsdGEgfSBmcm9tIFwiLi9nZXRBZGp1c3RlZFByaWNlRGVsdGFcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVZhcmlhYmxlcyhtZXNzYWdlLCB2YXJpYW50UXVvdGUsIG93bmVyTmFtZSwgbGlzdGluZ19wcmljZSkge1xyXG4gIC8vIGNvbnNvbGUubG9nKCd3aWxsIHBhcnNlJywgdmFyaWFudFF1b3RlKTtcclxuICBsZXQgX21lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gIGxldCBtb2RlbCA9IHZhcmlhbnRRdW90ZSAmJiB2YXJpYW50UXVvdGUubW9kZWw7IC8vICYmIHZhcmlhbnRRdW90ZS5tb2RlbC5tb2RlbE5hbWU7XHJcbiAgaWYgKCFtb2RlbCkgbW9kZWwgPSAnJztcclxuICBsZXQgbmV0d29yayA9IHZhcmlhbnRRdW90ZSAmJiB2YXJpYW50UXVvdGUubmV0d29yazsgLy8mJiB2YXJpYW50UXVvdGUubmV0d29yay5uZXR3b3JrTmFtZTtcclxuICBpZiAobmV0d29yaykge1xyXG4gICAgaWYgKG5ldHdvcmsudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKCdsb2NrZWQnKSkgbmV0d29yayA9ICdMb2NrZWQnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBuZXR3b3JrID0gJyc7XHJcbiAgfVxyXG4gIGxldCBzdG9yYWdlID0gdmFyaWFudFF1b3RlICYmIHZhcmlhbnRRdW90ZS5zdG9yYWdlOyAvLyAmJiB2YXJpYW50UXVvdGUuc3RvcmFnZS5zdG9yYWdlTmFtZTtcclxuICBpZiAoIXN0b3JhZ2UpIHN0b3JhZ2UgPSAnJztcclxuICBsZXQgcHJpY2UgPSB2YXJpYW50UXVvdGUgJiYgdmFyaWFudFF1b3RlLnByaWNlO1xyXG4gIGlmICghcHJpY2UpIHByaWNlID0gJyc7XHJcbiAgbGV0IGNvbmRpdGlvbiA9ICcnO1xyXG4gIGlmICh2YXJpYW50UXVvdGUgJiYgdmFyaWFudFF1b3RlLmNvbmRpdGlvbikgeyAvLyAmJiB2YXJpYW50UXVvdGUuY29uZGl0aW9uLmNvbmRpdGlvbk5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbmRpdGlvbiA9IHZhcmlhbnRRdW90ZS5jb25kaXRpb24uc3BsaXQoJy0nKVsxXTtcclxuICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uLnRyaW0oKTtcclxuICAgICAgY29uZGl0aW9uID0gcmVtb3ZlRGVzY3JpcHRpb24oY29uZGl0aW9uKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uZGl0aW9uID0gdmFyaWFudFF1b3RlLmNvbmRpdGlvbi5zcGxpdCgnLScpWzBdO1xyXG4gICAgICBjb25kaXRpb24gPSBjb25kaXRpb24udHJpbSgpO1xyXG4gICAgICBjb25kaXRpb24gPSByZW1vdmVEZXNjcmlwdGlvbihjb25kaXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuICBsZXQgZGVkdWN0aW9ucyA9ICdubyBkZWR1Y3Rpb25zJztcclxuICBpZiAodmFyaWFudFF1b3RlICYmIHZhcmlhbnRRdW90ZS5kZWR1Y3Rpb25zICYmIHZhcmlhbnRRdW90ZS5kZWR1Y3Rpb25zLmxlbmd0aCkge1xyXG4gICAgZGVkdWN0aW9ucyA9IHZhcmlhbnRRdW90ZS5kZWR1Y3Rpb25zLmpvaW4oJywgJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjdXN0b21QcmljZURlbHRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2N1c3RvbV9wcmljZV9kZWx0YScpLnZhbHVlIHx8IDA7XHJcbiAgY29uc3QgbGlzdGluZ1ByaWNlRGVsdGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlzdGluZ19wcmljZV9kZWx0YScpLnZhbHVlIHx8IDA7XHJcbiAgLy8gY29uc29sZS5sb2coJ21vZGVsJywgbW9kZWwpO1xyXG4gIC8vIGNvbnNvbGUubG9nKCduZXR3b3JrJywgbmV0d29yayk7XHJcbiAgLy8gY29uc29sZS5sb2coJ3N0b3JhZ2UnLCBzdG9yYWdlKTtcclxuICAvLyBjb25zb2xlLmxvZygncHJpY2UnLCBwcmljZSk7XHJcbiAgLy8gY29uc29sZS5sb2coJ3BhcnRuZXJfbGluaycsIHZhcmlhbnRRdW90ZS5wYXJ0bmVyaWQpO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdjb25kaXRpb24nLCBjb25kaXRpb24pO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdkZWR1Y3Rpb25zJywgZGVkdWN0aW9ucyk7XHJcblxyXG4gIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbbW9kZWxcXF0vZywgbW9kZWwpO1xyXG4gIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbbmV0d29ya1xcXS9nLCBuZXR3b3JrKTtcclxuICBfbWVzc2FnZSA9IF9tZXNzYWdlLnJlcGxhY2UoL1xcW21lbW9yeVxcXS9nLCBzdG9yYWdlKTtcclxuICBfbWVzc2FnZSA9IF9tZXNzYWdlLnJlcGxhY2UoL1xcW25hbWVcXF0vZywgb3duZXJOYW1lLnNwbGl0KCcgJylbMF0pO1xyXG4gIC8vIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbcXVvdGVfbGlua1xcXS9nLCB2YXJpYW50UXVvdGUucXVvdGVfbGluayk7XHJcbiAgLy8gX21lc3NhZ2UgPSBfbWVzc2FnZS5yZXBsYWNlKC9cXFt3ZWJzaXRlXFxdL2csIHdpbmRvdy52YXJfZG9tYWluKTtcclxuXHJcbiAgbGV0IG1hdGNoID0gX21lc3NhZ2UubWF0Y2goL1xcW3ByaWNlXFxzPy1cXHM/KFxcZCspXFxdLyk7XHJcbiAgaWYgKHByaWNlICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcclxuICAgIGNvbnN0IG1pbnVzID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbWludXMnLCBtaW51cyk7XHJcbiAgICBsZXQgbmV3UHJpY2UgPSBwcmljZSAtIHBhcnNlRmxvYXQobWludXMpO1xyXG4gICAgaWYgKG5ld1ByaWNlIDwgMCkgbmV3UHJpY2UgPSAwO1xyXG4gICAgX21lc3NhZ2UgPSBfbWVzc2FnZS5yZXBsYWNlKC9cXFtwcmljZVxccz8tXFxzP1xcZCtcXF0vLCBgJCR7bmV3UHJpY2V9YCk7XHJcbiAgfSBlbHNlIGlmIChwcmljZSAmJiBfbWVzc2FnZS5tYXRjaCgvXFxbcHJpY2VcXF0vKSkge1xyXG4gICAgbGV0IG5ld1ByaWNlID0gcHJpY2U7XHJcbiAgICBpZiAoY3VzdG9tUHJpY2VEZWx0YSkge1xyXG4gICAgICBuZXdQcmljZSA9IGdldEFkanVzdGVkUHJpY2VEZWx0YShwcmljZSwgY3VzdG9tUHJpY2VEZWx0YSk7XHJcbiAgICB9XHJcbiAgICBsZXQgcm91bmR1cGRvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm91bmR1cGRvd24nKS52YWx1ZTtcclxuICAgIGlmIChyb3VuZHVwZG93bikgcm91bmR1cGRvd24gPSBwYXJzZUZsb2F0KHJvdW5kdXBkb3duKTtcclxuICAgIG5ld1ByaWNlID0gZ2V0Um91bmRlZFByaWNlKG5ld1ByaWNlLCByb3VuZHVwZG93bik7XHJcbiAgICBpZiAobmV3UHJpY2UgPCAwKSBuZXdQcmljZSA9IDA7XHJcbiAgICBfbWVzc2FnZSA9IF9tZXNzYWdlLnJlcGxhY2UoL1xcW3ByaWNlXFxdLywgYCQke25ld1ByaWNlfWApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbWF0Y2gnLCBtYXRjaCk7XHJcbiAgICBfbWVzc2FnZSA9IF9tZXNzYWdlLnJlcGxhY2UoL1xcW3ByaWNlXFxzPy1cXHM/XFxkK1xcXS8sICcnKTtcclxuICB9XHJcbiAgbWF0Y2ggPSBfbWVzc2FnZS5tYXRjaCgvXFxbbGlzdGluZ19wcmljZVxccz8tXFxzPyhcXGQrKVxcXS8pO1xyXG4gIGlmICh0eXBlb2YgbGlzdGluZ19wcmljZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xyXG4gICAgY29uc3QgbWludXMgPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdtaW51cycsIG1pbnVzKTtcclxuICAgIGxldCBuZXdQcmljZSA9IGxpc3RpbmdfcHJpY2UgLSBwYXJzZUZsb2F0KG1pbnVzKTtcclxuICAgIGlmIChuZXdQcmljZSA8IDApIG5ld1ByaWNlID0gMDtcclxuICAgIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbbGlzdGluZ19wcmljZVxccz8tXFxzP1xcZCtcXF0vLCBgJCR7bmV3UHJpY2V9YCk7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdGluZ19wcmljZSAhPT0gJ3VuZGVmaW5lZCcgJiYgX21lc3NhZ2UubWF0Y2goL1xcW2xpc3RpbmdfcHJpY2VcXF0vKSkge1xyXG4gICAgbGV0IG5ld0xpc3RpbmdQcmljZSA9IGxpc3RpbmdfcHJpY2U7XHJcbiAgICBpZiAobGlzdGluZ1ByaWNlRGVsdGEpIHtcclxuICAgICAgbmV3TGlzdGluZ1ByaWNlID0gZ2V0QWRqdXN0ZWRQcmljZURlbHRhKG5ld0xpc3RpbmdQcmljZSwgbGlzdGluZ1ByaWNlRGVsdGEpO1xyXG4gICAgfVxyXG4gICAgLy8gbGV0IG1pbnVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjY2VwdGFuY2VkZWR1Y3Rpb24nKS52YWx1ZTtcclxuICAgIC8vIGlmIChtaW51cykgbWludXMgPSBwYXJzZUZsb2F0KG1pbnVzKTtcclxuICAgIC8vIGlmICghbWludXMpIG1pbnVzID0gMDtcclxuICAgIC8vIGxldCBuZXdMaXN0aW5nUHJpY2UgPSBsaXN0aW5nX3ByaWNlICsgbWludXM7XHJcbiAgICBpZiAobmV3TGlzdGluZ1ByaWNlIDwgMCkgbmV3TGlzdGluZ1ByaWNlID0gMDtcclxuICAgIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbbGlzdGluZ19wcmljZVxcXS8sIGAkJHtuZXdMaXN0aW5nUHJpY2V9YCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdtYXRjaCcsIG1hdGNoKTtcclxuICAgIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbbGlzdGluZ19wcmljZVxccz8tXFxzP1xcZCtcXF0vLCAneW91ciBwcmljZScpO1xyXG4gIH1cclxuXHJcbiAgbGV0IHBhcnRuZXJfbGluaztcclxuICBpZiAod2luZG93LnBhcnRuZXJfbGluaykge1xyXG4gICAgcGFydG5lcl9saW5rID0gd2luZG93LnBhcnRuZXJfbGluaztcclxuICB9IGVsc2UgaWYgKHZhcmlhbnRRdW90ZS5wYXJ0bmVyX2xpbmspIHtcclxuICAgIHdpbmRvdy5wYXJ0bmVyX2xpbmsgPSB2YXJpYW50UXVvdGUucGFydG5lcl9saW5rO1xyXG4gICAgcGFydG5lcl9saW5rID0gdmFyaWFudFF1b3RlLnBhcnRuZXJfbGluaztcclxuICB9XHJcblxyXG4gIC8vIGlmIChwYXJ0bmVyX2xpbmspIHtcclxuICAvLyAgIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbcGFydG5lcl9saW5rXFxdL2csIHBhcnRuZXJfbGluayk7XHJcbiAgLy8gfSBlbHNlIHtcclxuICAvLyBfbWVzc2FnZSA9IF9tZXNzYWdlLnJlcGxhY2UoL1xcW3BhcnRuZXJfbGlua1xcXS9nLCAnYXBwbGVzLnRyYWRlJyk7XHJcbiAgLy8gfVxyXG4gIC8vIF9tZXNzYWdlID0gX21lc3NhZ2UucmVwbGFjZSgvXFxbcGFydG5lcl9saW5rXFxdL2csIHdpbmRvdy52YXJfZG9tYWluKTtcclxuXHJcbiAgX21lc3NhZ2UgPSBfbWVzc2FnZS5yZXBsYWNlKC9cXFtjb25kaXRpb25cXF0vZywgY29uZGl0aW9uKTtcclxuICBfbWVzc2FnZSA9IF9tZXNzYWdlLnJlcGxhY2UoL1xcW2RlZHVjdGlvbnNcXF0vZywgZGVkdWN0aW9ucyk7XHJcbiAgcmV0dXJuIF9tZXNzYWdlO1xyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGdldFJvdW5kZWRQcmljZShwcmljZSwgcm91bmRVcERvd24pIHtcclxuICBpZiAoIXJvdW5kVXBEb3duKSByZXR1cm4gcHJpY2U7XHJcbiAgY29uc3QgbXVsdGlwbGllciA9IChyb3VuZFVwRG93biA+IDApID8gTWF0aC5jZWlsKHByaWNlIC8gTWF0aC5hYnMocm91bmRVcERvd24pKSA6IE1hdGguZmxvb3IocHJpY2UgLyBNYXRoLmFicyhyb3VuZFVwRG93bikpO1xyXG4gIHJldHVybiBNYXRoLmFicyhtdWx0aXBsaWVyICogcm91bmRVcERvd24pO1xyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHByZWZpeChlKSB7XHJcbiAgY29uc3Qgc3ltYm9sID0gJy0nO1xyXG4gIGNvbnN0IGlkID0gZS50YXJnZXQuaWQ7XHJcbiAgaWYgKGlkKSB7XHJcbiAgICBpZiAoZS50YXJnZXQudHlwZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgbGV0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICAgIGlmICh2YWx1ZSAhPT0gJzAnICYmICF2YWx1ZS5zdGFydHNXaXRoKHN5bWJvbCkpIHtcclxuICAgICAgICBlLnRhcmdldC52YWx1ZSA9IGAke3N5bWJvbH0ke3ZhbHVlfWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgc2tpcHMgfSBmcm9tIFwiLi9za2lwc1wiO1xyXG5pbXBvcnQgeyBzdGF0cyB9IGZyb20gXCIuL3N0YXRzXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaXNPd25lck51bUxpc3RpbmdzSW5SYW5nZShpZCwgb3duZXJpZCwgb3duZXJuYW1lLCB0aXRsZSkge1xyXG4gIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgYENoZWNraW5nIHF1YWxpZnlpbmcgbGlzdGluZ3Mgb2YgJHtvd25lcm5hbWV9ICgke293bmVyaWR9KS5gKTtcclxuICBjb25zdCBhT3RoZXJpUGhvbmVMaXN0aW5ncyA9IGF3YWl0IHNraXBzKCkuZ2V0T3RoZXJJcGhvbmVMaXN0aW5ncyhpZCwgb3duZXJpZCwgb3duZXJuYW1lKTtcclxuICBjb25zdCBudW1MaXN0aW5ncyA9IGFPdGhlcmlQaG9uZUxpc3RpbmdzICYmIGFPdGhlcmlQaG9uZUxpc3RpbmdzLmxlbmd0aDtcclxuICBpZiAobnVtTGlzdGluZ3MpIHtcclxuICAgIC8vIGxldCByYW5nZU1pbiA9IE51bWJlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb3duZXJfbWluX2xpc3RzJykudmFsdWUpIHx8IDE7XHJcbiAgICAvLyBsZXQgcmFuZ2VNYXggPSBOdW1iZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI293bmVyX21heF9saXN0cycpLnZhbHVlKSB8fCAxO1xyXG4gICAgXHJcbiAgICBjb25zdCBpc1NpbmdsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPWJvdF9tb2RlXTpjaGVja2VkJykudmFsdWUgPT09ICdzaW5nbGUnO1xyXG4gICAgY29uc3QgbW9kZSA9IGlzU2luZ2xlID8gJ1NpbmdsZScgOiAnTXVsdGknO1xyXG4gICAgY29uc29sZS5sb2coYE1vZGUgJHttb2RlfS4gJHtvd25lcm5hbWV9IGhhcyAke251bUxpc3RpbmdzfSBxdWFsaWZ5aW5nIGxpc3RpbmdzLiBBbGwgbGlzdGluZ3Mgd2lsbCBiZSBhZGRlZCB0byAke21vZGV9IFNraXAgTGlzdGApO1xyXG4gICAgaWYgKG51bUxpc3RpbmdzIDw9IDIpIHtcclxuICAgICAgc3RhdHMoKS5hZGRTaW5nbGVMaXN0aW5ncygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhdHMoKS5hZGRNdWx0aUxpc3RpbmdzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzU2luZ2xlKSB7XHJcbiAgICAgIGlmIChudW1MaXN0aW5ncyA8PSAyKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ01PREU6IFNJTkdMRS4gSU4gUkFOR0UnLCBudW1MaXN0aW5ncyk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIFNJTkdMRSBNQVggMiBMSVNUSU5HU1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgeyAvLyBNVUxUSVxyXG4gICAgICBpZiAobnVtTGlzdGluZ3MgPj0gMykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdNT0RFOiBNVUxUSS4gSU4gUkFOR0UnLCBudW1MaXN0aW5ncyk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgQ09OU09MRV9NRVNTQUdFKCdoYXNfbGlzdGluZ3MnLCB7XHJcbiAgICAgIG93bmVyX2xpc3RzOiBudW1MaXN0aW5ncyxcclxuICAgICAgbGlzdGluZ19pZDogaWQsXHJcbiAgICAgIG93bmVyX25hbWU6IG93bmVybmFtZSxcclxuICAgICAgbGlzdGluZ19uYW1lOiB0aXRsZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUludEZyb21JbnRlcnZhbChtaW4sIG1heCkgeyAvLyBtaW4gYW5kIG1heCBpbmNsdWRlZCBcclxuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICsgbWluKVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGhhc1VucGFyc2FibGVWYXJpYWJsZXMobWVzc2FnZSwgdmFyaWFudCkge1xyXG4gIGxldCBoYXNVbnBhcnNlZCA9IGZhbHNlO1xyXG4gIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdbbW9kZWxdJykgJiYgIXZhcmlhbnQubW9kZWwpIHtcclxuICAgIGNvbnNvbGUubG9nKCdGYWlsZWQuIE5vIG1vZGVsJywgbWVzc2FnZSwgdmFyaWFudCk7XHJcbiAgICBoYXNVbnBhcnNlZCA9IHRydWU7XHJcbiAgfVxyXG4gIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdbbmV0d29ya10nKSAmJiAhdmFyaWFudC5uZXR3b3JrKSB7XHJcbiAgICBjb25zb2xlLmxvZygnRmFpbGVkLiBOZXR3b3JrJywgbWVzc2FnZSwgdmFyaWFudCk7XHJcbiAgICBoYXNVbnBhcnNlZCA9IHRydWU7XHJcbiAgfVxyXG4gIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdbbWVtb3J5XScpICYmICF2YXJpYW50LnN0b3JhZ2UpIHtcclxuICAgIGNvbnNvbGUubG9nKCdGYWlsZWQuIE5vIG1lbW9yeScsIG1lc3NhZ2UsIHZhcmlhbnQpO1xyXG4gICAgaGFzVW5wYXJzZWQgPSB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gaGFzVW5wYXJzZWQ7XHJcbn0iLCJpbXBvcnQgeyBhcGlPZmZlclVwIH0gZnJvbSBcIi4vYXBpT2ZmZXJVcFwiO1xyXG5pbXBvcnQgeyBkZWJ1Z19kaXNhYmxlTWVzc2FnZXMsIG1lc3NhZ2VEZWxheSB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgZ2V0UXVvdGUgfSBmcm9tIFwiLi9nZXRRdW90ZVwiO1xyXG5pbXBvcnQgeyBnZXRWYXJpYW50IH0gZnJvbSBcIi4vZ2V0VmFyaWFudFwiO1xyXG5pbXBvcnQgeyBoYXNVbnBhcnNhYmxlVmFyaWFibGVzIH0gZnJvbSBcIi4vaGFzVW5wYXJzYWJsZVZhcmlhYmxlc1wiO1xyXG5pbXBvcnQgeyBwYXJzZVZhcmlhYmxlcyB9IGZyb20gXCIuL3BhcnNlVmFyaWFibGVzXCI7XHJcbmltcG9ydCB7IHJhbmRvbUludEZyb21JbnRlcnZhbCB9IGZyb20gXCIuL3JhbmRvbUludEZyb21JbnRlcnZhbFwiO1xyXG5pbXBvcnQgeyBzZW5kQm90TG9nIH0gZnJvbSBcIi4vc2VuZEJvdExvZ1wiO1xyXG5pbXBvcnQgeyBza2lwcyB9IGZyb20gXCIuL3NraXBzXCI7XHJcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4vc2xlZXBcIjtcclxuaW1wb3J0IHsgc3RhdHMgfSBmcm9tIFwiLi9zdGF0c1wiO1xyXG5pbXBvcnQgeyB0ZW1wbGF0ZXMgfSBmcm9tIFwiLi90ZW1wbGF0ZXNcIjtcclxuLy8gaW1wb3J0IHsgdXBkYXRlSWZyYW1lVmFyaWFudCB9IGZyb20gXCIuL3VwZGF0ZUlmcmFtZVZhcmlhbnRcIjtcclxuaW1wb3J0IHsgd2FpdEZvclNlY29uZHMgfSBmcm9tIFwiLi93YWl0Rm9yU2Vjb25kc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGxpc3RpbmdEYXRhKSB7XHJcbiAgbGV0IGlzTWVzc2FnZVNlbnQgPSBmYWxzZTtcclxuICBpZiAoIXdpbmRvdy5pc1J1bikge1xyXG4gICAgY29uc29sZS5sb2coJ2JvdCBzdG9wcGVkLicpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBjb25zdCBpZCA9IGxpc3RpbmdEYXRhLmlkO1xyXG4gIGNvbnN0IHRpdGxlID0gbGlzdGluZ0RhdGEudGl0bGU7XHJcbiAgY29uc3Qgb3duZXJJZCA9IGxpc3RpbmdEYXRhLm93bmVyLmlkO1xyXG4gIGNvbnN0IG93bmVyTmFtZSA9IGxpc3RpbmdEYXRhLm93bmVyLnByb2ZpbGUubmFtZTtcclxuXHJcbiAgLy8gY29uc29sZS5sb2coJ0dldHRpbmcgdmFyaWFudCBpbmZvIGZvciBtZXNzYWdpbmcuJyk7XHJcbiAgY29uc3QgdmFyaWFudCA9IGF3YWl0IGdldFZhcmlhbnQoaWQpO1xyXG4gIGNvbnNvbGUubG9nKCd2YXJpYW50JywgdmFyaWFudCk7XHJcbiAgaWYgKHZhcmlhbnQuc2tpcCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1NraXBwZWQgbGlzdGluZy4nKTtcclxuICAgIGF3YWl0IHNraXBzKCkuc2F2ZVRvU2tpcExpc3RpbmcoaWQpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gYXdhaXQgdXBkYXRlSWZyYW1lVmFyaWFudCh2YXJpYW50KTtcclxuICAvLyBjb25zdCB2YXJpYW50UXVvdGUgPSBhd2FpdCBnZXRRdW90ZV9PTEQoaWQpO1xyXG4gIGNvbnN0IHZhcmlhbnRRdW90ZSA9IGF3YWl0IGdldFF1b3RlKHZhcmlhbnQsIGlkKTtcclxuICBjb25zb2xlLmxvZygndmFyaWFudFF1b3RlJywgdmFyaWFudFF1b3RlKTtcclxuXHJcbiAgbGV0IGFsbG1lc3NhZ2UgPSAnJztcclxuICBsZXQgdGVtcGxhdGVzVXNlZCA9ICcnO1xyXG4gIGxldCBwb3N0TXNnSWQ7XHJcblxyXG4gIC8vIE9QRU5FUiBNRVNTQUdFXHJcbiAgbGV0IG1lc3NhZ2UgPSB0ZW1wbGF0ZXMoKS5vcGVuZXJtZXNzYWdlO1xyXG4gIGlmIChtZXNzYWdlKSB7XHJcbiAgICBpZiAoIWhhc1VucGFyc2FibGVWYXJpYWJsZXMobWVzc2FnZSwgdmFyaWFudCkpIHtcclxuICAgICAgbWVzc2FnZSA9IHBhcnNlVmFyaWFibGVzKG1lc3NhZ2UsIHZhcmlhbnRRdW90ZSwgb3duZXJOYW1lLCB2YXJpYW50Lmxpc3RpbmdfcHJpY2UpO1xyXG4gICAgICAvLyBTRU5EIE9QRU5FUlxyXG4gICAgICBjb25zdCBfcG9zdGlkID0gYXdhaXQgYXBpT2ZmZXJVcCgpLnNlbmRNZXNzYWdlKGlkLCBtZXNzYWdlLCB0aXRsZSwgb3duZXJJZCwgb3duZXJOYW1lKTtcclxuICAgICAgaXNNZXNzYWdlU2VudCA9IHRydWU7XHJcbiAgICAgIGlmICghcG9zdE1zZ0lkKSBwb3N0TXNnSWQgPSBfcG9zdGlkO1xyXG4gICAgICBDT05TT0xFX01FU1NBR0UoJ21lc3NhZ2Vfc2VudCcsIHtcclxuICAgICAgICBtZXNzYWdlX3NlbnQ6IG1lc3NhZ2UsXHJcbiAgICAgICAgbGlzdGluZ19wcmljZTogdmFyaWFudC5saXN0aW5nX3ByaWNlLFxyXG4gICAgICAgIGxpc3RpbmdfaWQ6IGlkLFxyXG4gICAgICAgIGxpc3RpbmdfbmFtZTogdGl0bGUsXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCB0c1dhaXQgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWVzc2FnZURlbGF5WzBdLCBtZXNzYWdlRGVsYXlbMV0pICogMTAwMDtcclxuICAgICAgY29uc3QgZnV0dXJlVHMgPSAobmV3IERhdGUoKS5nZXRUaW1lKCkpICsgdHNXYWl0O1xyXG4gICAgICBDT05TT0xFX01FU1NBR0UoJ3RpbWVvdXQnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogJ01lc3NhZ2UgU2VudCcsXHJcbiAgICAgICAgaGg6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdISCcpLFxyXG4gICAgICAgIG1tOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnbW0nKSxcclxuICAgICAgICBzczogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ3NzJylcclxuICAgICAgfSk7XHJcbiAgICAgIGF3YWl0IHNsZWVwKHRzV2FpdCk7XHJcbiAgICAgIC8vIGF3YWl0IHdhaXRGb3JTZWNvbmRzKHJhbmRvbUludEZyb21JbnRlcnZhbChtZXNzYWdlRGVsYXlbMF0sIG1lc3NhZ2VEZWxheVsxXSksICdPcGVuZXIgbWVzc2FnZSBzZW50LicpO1xyXG4gICAgICBpZiAoYWxsbWVzc2FnZSkgYWxsbWVzc2FnZSArPSAnXFxuJztcclxuICAgICAgYWxsbWVzc2FnZSArPSBtZXNzYWdlO1xyXG4gICAgICBpZiAodGVtcGxhdGVzVXNlZCkgdGVtcGxhdGVzVXNlZCArPSAnLCAnO1xyXG4gICAgICB0ZW1wbGF0ZXNVc2VkICs9ICdvcGVuZXJtZXNzYWdlJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFFVRVNUSU9OIDFcclxuICBtZXNzYWdlID0gdGVtcGxhdGVzKCkucXVlc3Rpb25fMTtcclxuICBpZiAobWVzc2FnZSkge1xyXG4gICAgaWYgKCFoYXNVbnBhcnNhYmxlVmFyaWFibGVzKG1lc3NhZ2UsIHZhcmlhbnQpKSB7XHJcbiAgICAgIG1lc3NhZ2UgPSBwYXJzZVZhcmlhYmxlcyhtZXNzYWdlLCB2YXJpYW50UXVvdGUsIG93bmVyTmFtZSwgdmFyaWFudC5saXN0aW5nX3ByaWNlKTtcclxuICAgICAgLy8gU0VORCBPUEVORVJcclxuICAgICAgY29uc3QgX3Bvc3RpZCA9IGF3YWl0IGFwaU9mZmVyVXAoKS5zZW5kTWVzc2FnZShpZCwgbWVzc2FnZSwgdGl0bGUsIG93bmVySWQsIG93bmVyTmFtZSk7XHJcbiAgICAgIGlzTWVzc2FnZVNlbnQgPSB0cnVlO1xyXG4gICAgICBpZiAoIXBvc3RNc2dJZCkgcG9zdE1zZ0lkID0gX3Bvc3RpZDtcclxuICAgICAgQ09OU09MRV9NRVNTQUdFKCdtZXNzYWdlX3NlbnQnLCB7XHJcbiAgICAgICAgbWVzc2FnZV9zZW50OiBtZXNzYWdlLFxyXG4gICAgICAgIGxpc3RpbmdfcHJpY2U6IHZhcmlhbnQubGlzdGluZ19wcmljZSxcclxuICAgICAgICBsaXN0aW5nX2lkOiBpZCxcclxuICAgICAgICBsaXN0aW5nX25hbWU6IHRpdGxlLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHRzV2FpdCA9IHJhbmRvbUludEZyb21JbnRlcnZhbChtZXNzYWdlRGVsYXlbMF0sIG1lc3NhZ2VEZWxheVsxXSkgKiAxMDAwO1xyXG4gICAgICBjb25zdCBmdXR1cmVUcyA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSkgKyB0c1dhaXQ7XHJcbiAgICAgIENPTlNPTEVfTUVTU0FHRSgndGltZW91dCcsIHtcclxuICAgICAgICBtZXNzYWdlOiAnTWVzc2FnZSBTZW50JyxcclxuICAgICAgICBoaDogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ0hIJyksXHJcbiAgICAgICAgbW06IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdtbScpLFxyXG4gICAgICAgIHNzOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnc3MnKVxyXG4gICAgICB9KTtcclxuICAgICAgYXdhaXQgc2xlZXAodHNXYWl0KTtcclxuICAgICAgLy8gaWYgKCFkZWJ1Z19kaXNhYmxlTWVzc2FnZXMpIGF3YWl0IHdhaXRGb3JTZWNvbmRzKHJhbmRvbUludEZyb21JbnRlcnZhbChtZXNzYWdlRGVsYXlbMF0sIG1lc3NhZ2VEZWxheVsxXSksICdRdWVzdGlvbiAjMSBzZW50LicpO1xyXG4gICAgICBpZiAoYWxsbWVzc2FnZSkgYWxsbWVzc2FnZSArPSAnXFxuJztcclxuICAgICAgYWxsbWVzc2FnZSArPSBtZXNzYWdlO1xyXG4gICAgICBpZiAodGVtcGxhdGVzVXNlZCkgdGVtcGxhdGVzVXNlZCArPSAnLCAnO1xyXG4gICAgICB0ZW1wbGF0ZXNVc2VkICs9ICdxdWVzdGlvbl8xJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFFVRVNUSU9OIDJcclxuICBtZXNzYWdlID0gdGVtcGxhdGVzKCkucXVlc3Rpb25fMjtcclxuICBpZiAobWVzc2FnZSkge1xyXG4gICAgaWYgKCFoYXNVbnBhcnNhYmxlVmFyaWFibGVzKG1lc3NhZ2UsIHZhcmlhbnQpKSB7XHJcbiAgICAgIG1lc3NhZ2UgPSBwYXJzZVZhcmlhYmxlcyhtZXNzYWdlLCB2YXJpYW50UXVvdGUsIG93bmVyTmFtZSwgdmFyaWFudC5saXN0aW5nX3ByaWNlKTtcclxuICAgICAgLy8gU0VORCBPUEVORVJcclxuICAgICAgY29uc3QgX3Bvc3RpZCA9IGF3YWl0IGFwaU9mZmVyVXAoKS5zZW5kTWVzc2FnZShpZCwgbWVzc2FnZSwgdGl0bGUsIG93bmVySWQsIG93bmVyTmFtZSk7XHJcbiAgICAgIGlzTWVzc2FnZVNlbnQgPSB0cnVlO1xyXG4gICAgICBpZiAoIXBvc3RNc2dJZCkgcG9zdE1zZ0lkID0gX3Bvc3RpZDtcclxuICAgICAgQ09OU09MRV9NRVNTQUdFKCdtZXNzYWdlX3NlbnQnLCB7XHJcbiAgICAgICAgbWVzc2FnZV9zZW50OiBtZXNzYWdlLFxyXG4gICAgICAgIGxpc3RpbmdfcHJpY2U6IHZhcmlhbnQubGlzdGluZ19wcmljZSxcclxuICAgICAgICBsaXN0aW5nX2lkOiBpZCxcclxuICAgICAgICBsaXN0aW5nX25hbWU6IHRpdGxlLFxyXG4gICAgICB9KTtcclxuICAgICAgY29uc3QgdHNXYWl0ID0gcmFuZG9tSW50RnJvbUludGVydmFsKG1lc3NhZ2VEZWxheVswXSwgbWVzc2FnZURlbGF5WzFdKSAqIDEwMDA7XHJcbiAgICAgIGNvbnN0IGZ1dHVyZVRzID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSArIHRzV2FpdDtcclxuICAgICAgQ09OU09MRV9NRVNTQUdFKCd0aW1lb3V0Jywge1xyXG4gICAgICAgIG1lc3NhZ2U6ICdNZXNzYWdlIFNlbnQnLFxyXG4gICAgICAgIGhoOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnSEgnKSxcclxuICAgICAgICBtbTogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ21tJyksXHJcbiAgICAgICAgc3M6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdzcycpXHJcbiAgICAgIH0pO1xyXG4gICAgICBhd2FpdCBzbGVlcCh0c1dhaXQpO1xyXG4gICAgICAvLyBpZiAoIWRlYnVnX2Rpc2FibGVNZXNzYWdlcykgYXdhaXQgd2FpdEZvclNlY29uZHMocmFuZG9tSW50RnJvbUludGVydmFsKG1lc3NhZ2VEZWxheVswXSwgbWVzc2FnZURlbGF5WzFdKSwgJ1F1ZXN0aW9uICMyIHNlbnQuJyk7XHJcbiAgICAgIGlmIChhbGxtZXNzYWdlKSBhbGxtZXNzYWdlICs9ICdcXG4nO1xyXG4gICAgICBhbGxtZXNzYWdlICs9IG1lc3NhZ2U7XHJcbiAgICAgIGlmICh0ZW1wbGF0ZXNVc2VkKSB0ZW1wbGF0ZXNVc2VkICs9ICcsICc7XHJcbiAgICAgIHRlbXBsYXRlc1VzZWQgKz0gJ3F1ZXN0aW9uXzInO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IHNlbnRTdG9yYWdlTWVzc2FnZSA9IGZhbHNlO1xyXG4gIGxldCBzZW50TmV0d29ya01lc3NhZ2UgPSBmYWxzZTtcclxuICBsZXQgc3RvcFNlbmRpbmcgPSBmYWxzZTtcclxuXHJcbiAgLy8gU1RPUkFHRSBNRVNTQUdFXHJcbiAgaWYgKCF2YXJpYW50LnN0b3JhZ2UpIHtcclxuICAgIHNlbnRTdG9yYWdlTWVzc2FnZSA9IHRydWU7XHJcbiAgICBtZXNzYWdlID0gdGVtcGxhdGVzKCkuZ2JNZXNzYWdlO1xyXG4gICAgbWVzc2FnZSA9IHBhcnNlVmFyaWFibGVzKG1lc3NhZ2UsIHZhcmlhbnRRdW90ZSwgb3duZXJOYW1lLCB2YXJpYW50Lmxpc3RpbmdfcHJpY2UpO1xyXG4gICAgLy8gU0VORCBHQiBNRVNTQUdFXHJcbiAgICBjb25zdCBfcG9zdGlkID0gYXdhaXQgYXBpT2ZmZXJVcCgpLnNlbmRNZXNzYWdlKGlkLCBtZXNzYWdlLCB0aXRsZSwgb3duZXJJZCwgb3duZXJOYW1lKTtcclxuICAgIGlzTWVzc2FnZVNlbnQgPSB0cnVlO1xyXG4gICAgaWYgKCFwb3N0TXNnSWQpIHBvc3RNc2dJZCA9IF9wb3N0aWQ7XHJcbiAgICBDT05TT0xFX01FU1NBR0UoJ21lc3NhZ2Vfc2VudCcsIHtcclxuICAgICAgbWVzc2FnZV9zZW50OiBtZXNzYWdlLFxyXG4gICAgICBsaXN0aW5nX3ByaWNlOiB2YXJpYW50Lmxpc3RpbmdfcHJpY2UsXHJcbiAgICAgIGxpc3RpbmdfaWQ6IGlkLFxyXG4gICAgICBsaXN0aW5nX25hbWU6IHRpdGxlLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCB0c1dhaXQgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWVzc2FnZURlbGF5WzBdLCBtZXNzYWdlRGVsYXlbMV0pICogMTAwMDtcclxuICAgIGNvbnN0IGZ1dHVyZVRzID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSArIHRzV2FpdDtcclxuICAgIENPTlNPTEVfTUVTU0FHRSgndGltZW91dCcsIHtcclxuICAgICAgbWVzc2FnZTogJ01lc3NhZ2UgU2VudCcsXHJcbiAgICAgIGhoOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnSEgnKSxcclxuICAgICAgbW06IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdtbScpLFxyXG4gICAgICBzczogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ3NzJylcclxuICAgIH0pO1xyXG4gICAgYXdhaXQgc2xlZXAodHNXYWl0KTtcclxuICAgIC8vIGlmICghZGVidWdfZGlzYWJsZU1lc3NhZ2VzKSBhd2FpdCB3YWl0Rm9yU2Vjb25kcyhyYW5kb21JbnRGcm9tSW50ZXJ2YWwobWVzc2FnZURlbGF5WzBdLCBtZXNzYWdlRGVsYXlbMV0pLCAnR0IgbWVzc2FnZSBzZW50LicpO1xyXG4gICAgaWYgKGFsbG1lc3NhZ2UpIGFsbG1lc3NhZ2UgKz0gJ1xcbic7XHJcbiAgICBhbGxtZXNzYWdlICs9IG1lc3NhZ2U7XHJcbiAgICBpZiAodGVtcGxhdGVzVXNlZCkgdGVtcGxhdGVzVXNlZCArPSAnLCAnO1xyXG4gICAgdGVtcGxhdGVzVXNlZCArPSAnZ2JNZXNzYWdlJztcclxuICB9XHJcbiAgXHJcbiAgLy8gU1RPUkFHRSBTVE9QIENIRUNLXHJcbiAgaWYgKHNlbnRTdG9yYWdlTWVzc2FnZSAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N3aXRjaC1jb250aW51ZV9hZnRlcl9zdG9yYWdlJykuY2hlY2tlZCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1NUT1BQRUQgU0VORElORyBNRVNTQUdFIFRPIFVTRVIgQkVDQVVTRSBPRiBNSVNTSU5HIFNUT1JBR0UuJyk7XHJcbiAgICBzdG9wU2VuZGluZyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBORVRXT1JLIE1FU1NBR0VcclxuICBpZiAoIXN0b3BTZW5kaW5nICYmICF2YXJpYW50Lm5ldHdvcmspIHtcclxuICAgIHNlbnROZXR3b3JrTWVzc2FnZSA9IHRydWU7XHJcbiAgICBtZXNzYWdlID0gdGVtcGxhdGVzKCkubmV0d29ya01lc3NhZ2U7XHJcbiAgICBtZXNzYWdlID0gcGFyc2VWYXJpYWJsZXMobWVzc2FnZSwgdmFyaWFudFF1b3RlLCBvd25lck5hbWUsIHZhcmlhbnQubGlzdGluZ19wcmljZSk7XHJcbiAgICAvLyBTRU5EIE5FVFdPUksgTUVTU0FHRVxyXG4gICAgY29uc3QgX3Bvc3RpZCA9IGF3YWl0IGFwaU9mZmVyVXAoKS5zZW5kTWVzc2FnZShpZCwgbWVzc2FnZSwgdGl0bGUsIG93bmVySWQsIG93bmVyTmFtZSk7XHJcbiAgICBpc01lc3NhZ2VTZW50ID0gdHJ1ZTtcclxuICAgIGlmICghcG9zdE1zZ0lkKSBwb3N0TXNnSWQgPSBfcG9zdGlkO1xyXG4gICAgQ09OU09MRV9NRVNTQUdFKCdtZXNzYWdlX3NlbnQnLCB7XHJcbiAgICAgIG1lc3NhZ2Vfc2VudDogbWVzc2FnZSxcclxuICAgICAgbGlzdGluZ19wcmljZTogdmFyaWFudC5saXN0aW5nX3ByaWNlLFxyXG4gICAgICBsaXN0aW5nX2lkOiBpZCxcclxuICAgICAgbGlzdGluZ19uYW1lOiB0aXRsZSxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgdHNXYWl0ID0gcmFuZG9tSW50RnJvbUludGVydmFsKG1lc3NhZ2VEZWxheVswXSwgbWVzc2FnZURlbGF5WzFdKSAqIDEwMDA7XHJcbiAgICBjb25zdCBmdXR1cmVUcyA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSkgKyB0c1dhaXQ7XHJcbiAgICBDT05TT0xFX01FU1NBR0UoJ3RpbWVvdXQnLCB7XHJcbiAgICAgIG1lc3NhZ2U6ICdNZXNzYWdlIFNlbnQnLFxyXG4gICAgICBoaDogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ0hIJyksXHJcbiAgICAgIG1tOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnbW0nKSxcclxuICAgICAgc3M6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdzcycpXHJcbiAgICB9KTtcclxuICAgIGF3YWl0IHNsZWVwKHRzV2FpdCk7XHJcbiAgICAvLyBpZiAoIWRlYnVnX2Rpc2FibGVNZXNzYWdlcykgYXdhaXQgd2FpdEZvclNlY29uZHMocmFuZG9tSW50RnJvbUludGVydmFsKG1lc3NhZ2VEZWxheVswXSwgbWVzc2FnZURlbGF5WzFdKSwgJ05ldHdvcmsgbWVzc2FnZSBzZW50LicpO1xyXG4gICAgaWYgKGFsbG1lc3NhZ2UpIGFsbG1lc3NhZ2UgKz0gJ1xcbic7XHJcbiAgICBhbGxtZXNzYWdlICs9IG1lc3NhZ2U7XHJcbiAgICBpZiAodGVtcGxhdGVzVXNlZCkgdGVtcGxhdGVzVXNlZCArPSAnLCAnO1xyXG4gICAgdGVtcGxhdGVzVXNlZCArPSAnbmV0d29ya01lc3NhZ2UnO1xyXG4gIH1cclxuXHJcbiAgLy8gTkVUV09SSyBTVE9QIENIRUNLXHJcbiAgaWYgKHNlbnROZXR3b3JrTWVzc2FnZSAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N3aXRjaC1jb250aW51ZV9hZnRlcl9uZXR3b3JrJykuY2hlY2tlZCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1NUT1BQRUQgU0VORElORyBNRVNTQUdFIFRPIFVTRVIgQkVDQVVTRSBPRiBNSVNTSU5HIE5FVFdPUksuJyk7XHJcbiAgICBzdG9wU2VuZGluZyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBsZXQgbG9nTXNnU2VudDtcclxuICBpZiAodmFyaWFudFF1b3RlLnByaWNlID4gdmFyaWFudC5saXN0aW5nX3ByaWNlKSB7XHJcbiAgICBsb2dNc2dTZW50ID0gJ09mZmVyIG1lc3NhZ2Ugc2VudC4nO1xyXG4gICAgbWVzc2FnZSA9IHRlbXBsYXRlcygpLm9mZmVyTWVzc2FnZTtcclxuICB9IGVsc2Uge1xyXG4gICAgbG9nTXNnU2VudCA9ICdMb3diYWxsIG1lc3NhZ2Ugc2VudC4nO1xyXG4gICAgbWVzc2FnZSA9IHRlbXBsYXRlcygpLmxvd2JhbGxfbWVzc2FnZTtcclxuICB9XHJcbiAgbWVzc2FnZSA9IHBhcnNlVmFyaWFibGVzKG1lc3NhZ2UsIHZhcmlhbnRRdW90ZSwgb3duZXJOYW1lLCB2YXJpYW50Lmxpc3RpbmdfcHJpY2UpO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdtZXNzYWdlMicsIG1lc3NhZ2UpO1xyXG4gIGlmICghc3RvcFNlbmRpbmcgJiYgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFoYXNVbnBhcnNhYmxlVmFyaWFibGVzKG1lc3NhZ2UsIHZhcmlhbnQpKSB7XHJcbiAgICAgIGlmIChhbGxtZXNzYWdlKSBhbGxtZXNzYWdlICs9ICdcXG4nO1xyXG4gICAgICAvLyBBQ0NFUFQvT0ZGRVIgTUVTU0FHRVxyXG4gICAgICBjb25zdCBfcG9zdGlkID0gYXdhaXQgYXBpT2ZmZXJVcCgpLnNlbmRNZXNzYWdlKGlkLCBtZXNzYWdlLCB0aXRsZSwgb3duZXJJZCwgb3duZXJOYW1lKTtcclxuICAgICAgaXNNZXNzYWdlU2VudCA9IHRydWU7XHJcbiAgICAgIGlmICghcG9zdE1zZ0lkKSBwb3N0TXNnSWQgPSBfcG9zdGlkO1xyXG4gICAgICBDT05TT0xFX01FU1NBR0UoJ21lc3NhZ2Vfc2VudCcsIHtcclxuICAgICAgICBtZXNzYWdlX3NlbnQ6IG1lc3NhZ2UsXHJcbiAgICAgICAgbGlzdGluZ19wcmljZTogdmFyaWFudC5saXN0aW5nX3ByaWNlLFxyXG4gICAgICAgIGxpc3RpbmdfaWQ6IGlkLFxyXG4gICAgICAgIGxpc3RpbmdfbmFtZTogdGl0bGUsXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCB0c1dhaXQgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWVzc2FnZURlbGF5WzBdLCBtZXNzYWdlRGVsYXlbMV0pICogMTAwMDtcclxuICAgICAgY29uc3QgZnV0dXJlVHMgPSAobmV3IERhdGUoKS5nZXRUaW1lKCkpICsgdHNXYWl0O1xyXG4gICAgICBDT05TT0xFX01FU1NBR0UoJ3RpbWVvdXQnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogJ01lc3NhZ2UgU2VudCcsXHJcbiAgICAgICAgaGg6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdISCcpLFxyXG4gICAgICAgIG1tOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnbW0nKSxcclxuICAgICAgICBzczogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ3NzJylcclxuICAgICAgfSk7XHJcbiAgICAgIGF3YWl0IHNsZWVwKHRzV2FpdCk7XHJcbiAgICAgIC8vIGF3YWl0IHNsZWVwKHJhbmRvbUludEZyb21JbnRlcnZhbChtZXNzYWdlRGVsYXlbMF0sIG1lc3NhZ2VEZWxheVsxXSkgKiAxMDAwKTtcclxuICAgICAgLy8gaWYgKCFkZWJ1Z19kaXNhYmxlTWVzc2FnZXMpIGF3YWl0IHdhaXRGb3JTZWNvbmRzKHJhbmRvbUludEZyb21JbnRlcnZhbChtZXNzYWdlRGVsYXlbMF0sIG1lc3NhZ2VEZWxheVsxXSksIGxvZ01zZ1NlbnQpO1xyXG4gICAgICBhbGxtZXNzYWdlICs9IG1lc3NhZ2U7XHJcbiAgICAgIGlmICh0ZW1wbGF0ZXNVc2VkKSB0ZW1wbGF0ZXNVc2VkICs9ICcsICc7XHJcbiAgICAgIHRlbXBsYXRlc1VzZWQgKz0gJ2FjY2VwdC9vZmZlck1lc3NhZ2UnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTUVFVFVQIE1FU1NBR0VcclxuICBtZXNzYWdlID0gdGVtcGxhdGVzKCkubWVldHVwTWVzc2FnZTtcclxuICBtZXNzYWdlID0gcGFyc2VWYXJpYWJsZXMobWVzc2FnZSwgdmFyaWFudFF1b3RlLCBvd25lck5hbWUsIHZhcmlhbnQubGlzdGluZ19wcmljZSk7XHJcbiAgaWYgKCFzdG9wU2VuZGluZyAmJiBtZXNzYWdlKSB7XHJcbiAgICBpZiAoIWhhc1VucGFyc2FibGVWYXJpYWJsZXMobWVzc2FnZSwgdmFyaWFudCkpIHtcclxuICAgICAgLy8gU0VORCBNRUVUVVAgTUVTU0FHRVxyXG4gICAgICBjb25zdCBfcG9zdGlkID0gYXdhaXQgYXBpT2ZmZXJVcCgpLnNlbmRNZXNzYWdlKGlkLCBtZXNzYWdlLCB0aXRsZSwgb3duZXJJZCwgb3duZXJOYW1lKTtcclxuICAgICAgaXNNZXNzYWdlU2VudCA9IHRydWU7XHJcbiAgICAgIGlmICghcG9zdE1zZ0lkKSBwb3N0TXNnSWQgPSBfcG9zdGlkO1xyXG4gICAgICBDT05TT0xFX01FU1NBR0UoJ21lc3NhZ2Vfc2VudCcsIHtcclxuICAgICAgICBtZXNzYWdlX3NlbnQ6IG1lc3NhZ2UsXHJcbiAgICAgICAgbGlzdGluZ19wcmljZTogdmFyaWFudC5saXN0aW5nX3ByaWNlLFxyXG4gICAgICAgIGxpc3RpbmdfaWQ6IGlkLFxyXG4gICAgICAgIGxpc3RpbmdfbmFtZTogdGl0bGUsXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCB0c1dhaXQgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWVzc2FnZURlbGF5WzBdLCBtZXNzYWdlRGVsYXlbMV0pICogMTAwMDtcclxuICAgICAgY29uc3QgZnV0dXJlVHMgPSAobmV3IERhdGUoKS5nZXRUaW1lKCkpICsgdHNXYWl0O1xyXG4gICAgICBDT05TT0xFX01FU1NBR0UoJ3RpbWVvdXQnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogJ01lc3NhZ2UgU2VudCcsXHJcbiAgICAgICAgaGg6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdISCcpLFxyXG4gICAgICAgIG1tOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnbW0nKSxcclxuICAgICAgICBzczogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ3NzJylcclxuICAgICAgfSk7XHJcbiAgICAgIGF3YWl0IHNsZWVwKHRzV2FpdCk7XHJcbiAgICAgIC8vIGF3YWl0IHNsZWVwKHJhbmRvbUludEZyb21JbnRlcnZhbChtZXNzYWdlRGVsYXlbMF0sIG1lc3NhZ2VEZWxheVsxXSkgKiAxMDAwKTtcclxuICAgICAgLy8gaWYgKCFkZWJ1Z19kaXNhYmxlTWVzc2FnZXMpIGF3YWl0IHdhaXRGb3JTZWNvbmRzKHJhbmRvbUludEZyb21JbnRlcnZhbChtZXNzYWdlRGVsYXlbMF0sIG1lc3NhZ2VEZWxheVsxXSksIFwiTWVldHVwIG1lc3NhZ2Ugc2VudC5cIik7XHJcbiAgICAgIGlmIChhbGxtZXNzYWdlKSBhbGxtZXNzYWdlICs9ICdcXG4nO1xyXG4gICAgICBhbGxtZXNzYWdlICs9IG1lc3NhZ2U7XHJcbiAgICAgIGlmICh0ZW1wbGF0ZXNVc2VkKSB0ZW1wbGF0ZXNVc2VkICs9ICcsICc7XHJcbiAgICAgIHRlbXBsYXRlc1VzZWQgKz0gJ21lZXR1cE1lc3NhZ2UnO1xyXG4gICAgfVxyXG4gIH1cclxuICAvLyBjb25zb2xlLmxvZygnbWVzc2FnZXMgc2VudCcsIGFsbG1lc3NhZ2UpO1xyXG5cclxuICAvLyBERUxFVEUgQ09OVkVSU0FUSU9OXHJcbiAgaWYgKHBvc3RNc2dJZCkge1xyXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzd2l0Y2gtZGVsZXRlYWZ0ZXJzZW5kJykuY2hlY2tlZCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnRGVsZXRpbmcgY29udmVyc2F0aW9uJywgcG9zdE1zZ0lkKTtcclxuICAgICAgYXdhaXQgYXBpT2ZmZXJVcCgpLmRlbGV0ZU1lc3NhZ2UocG9zdE1zZ0lkKTtcclxuICAgICAgY29uc29sZS5sb2coJ0NvbnZlcnNhdGlvbiBoYXMgYmVlbiBkZWxldGVkOicsIHBvc3RNc2dJZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3aW5kb3cubWVzc2FnZXNTZW50ICs9IDE7XHJcbiAgc3RhdHMoKS5hZGRPZmZlcigpO1xyXG4gIHN0YXRzKCkuYWRkU3RyZWFrKCk7XHJcbiAgLy8gaWYgKHNob3dBbGVydHMpIGFsZXJ0KGFsbG1lc3NhZ2UpO1xyXG4gIGF3YWl0IHNlbmRCb3RMb2coe1xyXG4gICAgdWlkOiBvd25lcklkLCBvd25lck5hbWUsIGxpc3RpbmdpZDogaWQsIG1lc3NhZ2U6IGFsbG1lc3NhZ2UsIHRlbXBsYXRlTmFtZTogdGVtcGxhdGVzVXNlZFxyXG4gIH0pO1xyXG4gIHJldHVybiBpc01lc3NhZ2VTZW50ID8gYWxsbWVzc2FnZSA6IGZhbHNlO1xyXG59IiwiaW1wb3J0IHsgZGlzYWJsZUxvZ3MgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgZ2V0VXNlckVtYWlsIH0gZnJvbSBcIi4vZ2V0VXNlckVtYWlsXCI7XHJcbmltcG9ydCB7IGhhbmRsZUZldGNoRXJyb3JzIH0gZnJvbSBcIi4vaGFuZGxlRmV0Y2hFcnJvcnNcIjtcclxuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiLi9zbGVlcFwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRCb3RMb2cobykge1xyXG4gIGlmIChkaXNhYmxlTG9ncykgcmV0dXJuO1xyXG4gIGNvbnN0IHtcclxuICAgIHVpZCwgb3duZXJOYW1lLCBsaXN0aW5naWQsIG1lc3NhZ2UsIHRlbXBsYXRlTmFtZVxyXG4gIH0gPSBvO1xyXG4gIGNvbnN0IGQgPSBuZXcgRGF0ZSgpO1xyXG4gIC8vIGNvbnN0IHRzID0gZC5nZXRUaW1lKCkudG9TdHJpbmcoKTtcclxuICBjb25zdCBkYXRlID0gZC50b0dNVFN0cmluZygpO1xyXG5cclxuICBjb25zdCBvV3JpdGUgPSB7XHJcbiAgICBEYXRlOiBkYXRlLFxyXG4gICAgVXNlcklEOiB1aWQsXHJcbiAgICBOYW1lOiBvd25lck5hbWUsXHJcbiAgICBMaXN0aW5nSUQ6IGxpc3RpbmdpZCxcclxuICAgICdNZXNzYWdlIFNlbnQnOiBtZXNzYWdlLFxyXG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlTmFtZSxcclxuICAgIHRhYklkOiB3aW5kb3cudGFiSWQsXHJcbiAgICBleHRlbnNpb25fdmVyc2lvbjogd2luZG93LmV4dGVuc2lvbl92ZXJzaW9uXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZW1haWwgPSBnZXRVc2VyRW1haWwoKTtcclxuICBpZiAoZW1haWwpIG9Xcml0ZS5lbWFpbCA9IGVtYWlsO1xyXG4gIGFzeW5jIGZ1bmN0aW9uIGZldGNoQXBpKGlUcmllcykge1xyXG4gICAgcmV0dXJuIGZldGNoKCdodHRwczovL3NoZWV0cy5ob3BsYS50b29scy8/SFQ9OWVjNjk4OWNhZjA3ZDEzMDVjNmMzODY4ODA4NDBmOGEmbW9kZT1sb2cnLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShvV3JpdGUpXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihhc3luYyByZXMgPT4gaGFuZGxlRmV0Y2hFcnJvcnMocmVzKSlcclxuICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgLmNhdGNoKGFzeW5jIGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRmV0Y2ggRmFpbGVkIChzZW5kQm90TG9nKScsIGVyciwgaVRyaWVzKTtcclxuICAgICAgICBpZiAoaVRyaWVzICYmIGlUcmllcyA+IDYpIHJldHVybiAnJztcclxuICAgICAgICBhd2FpdCBzbGVlcCgxMDAwMCk7XHJcbiAgICAgICAgaWYgKCFpVHJpZXMpIGlUcmllcyA9IDA7XHJcbiAgICAgICAgaVRyaWVzICs9IDE7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoQXBpKGlUcmllcyk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gZmV0Y2hBcGkoKVxyXG4gICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIEZhaWxlZCAoc2VuZEJvdExvZykpJywgZXJyKTtcclxuICAgICAgLy8gcmV0dXJuIHNlbmRCb3RMb2cobyk7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH0pOztcclxufSIsImltcG9ydCB7IENPTlNPTEVfTUVTU0FHRSB9IGZyb20gXCIuL2dldENvbnNvbGVNZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gXCIuL3NsZWVwXCI7XHJcbmltcG9ydCB7IHN0YXRzIH0gZnJvbSBcIi4vc3RhdHNcIjtcclxuaW1wb3J0IHsgd2FpdEZvclNlY29uZHMgfSBmcm9tIFwiLi93YWl0Rm9yU2Vjb25kc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0cmVha1RpbWVvdXRDaGVjaygpIHtcclxuICBjb25zdCBzdHJlYWtNYXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RyZWFrJykudmFsdWU7XHJcbiAgY29uc3Qgc3RyZWFrdGltZW91dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdHJlYWt0aW1lb3V0JykudmFsdWU7XHJcbiAgaWYgKHN0cmVha01heCAmJiBzdHJlYWt0aW1lb3V0KSB7XHJcbiAgICAvLyBpZiAod2luZG93LmlTdHJlYWtzICUgc3RyZWFrTWF4ID09PSAwKSB7XHJcbiAgICBpZiAod2luZG93LmlTdHJlYWtzID49IHN0cmVha01heCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhgU3RyZWFrIHRpbWVvdXQhIFdhaXQgJHtzdHJlYWt0aW1lb3V0fSBtaW5zLmApO1xyXG4gICAgICBjb25zdCBmdXR1cmVUcyA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSkgKyAoc3RyZWFrdGltZW91dCAqIDYwICogMTAwMCk7XHJcbiAgICAgIENPTlNPTEVfTUVTU0FHRSgndGltZW91dCcsIHtcclxuICAgICAgICBtZXNzYWdlOiAnU3RyZWFrJywgXHJcbiAgICAgICAgaGg6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdISCcpLFxyXG4gICAgICAgIG1tOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnbW0nKSxcclxuICAgICAgICBzczogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ3NzJylcclxuICAgICAgfSk7XHJcbiAgICAgIGF3YWl0IHNsZWVwKHN0cmVha3RpbWVvdXQgKiA2MCAqIDEwMDApO1xyXG4gICAgICAvLyBhd2FpdCB3YWl0Rm9yU2Vjb25kcyhzdHJlYWt0aW1lb3V0ICogNjAsIGBTdHJlYWsgdGltZW91dCEgV2FpdCAke3N0cmVha3RpbWVvdXR9IG1pbnMuYCk7XHJcbiAgICAgIHN0YXRzKCkucmVzZXRDdXJyZW50U3RyZWFrKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgYWRkQWxsVXNlckxpc3RpbmdzVG9Ta2lwTGlzdCB9IGZyb20gXCIuL2FkZEFsbFVzZXJMaXN0aW5nc1RvU2tpcExpc3RcIjtcclxuaW1wb3J0IHsgYXBpT2ZmZXJVcCB9IGZyb20gXCIuL2FwaU9mZmVyVXBcIjtcclxuaW1wb3J0IHsgbGlzdGluZ3NQZXJLZXl3b3JkLCB1c2VyRGVsYXkgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgZmV0Y2hMaXN0aW5nRGV0YWlsIH0gZnJvbSBcIi4vZmV0Y2hMaXN0aW5nRGV0YWlsXCI7XHJcbmltcG9ydCB7IGZpbHRlckxpc3RpbmdzV2l0aEtleXdvcmQgfSBmcm9tIFwiLi9maWx0ZXJMaXN0aW5nc1dpdGhLZXl3b3JkXCI7XHJcbmltcG9ydCB7IGZpbHRlck91dERlbGV0ZWRMaXN0aW5ncyB9IGZyb20gXCIuL2ZpbHRlck91dERlbGV0ZWRMaXN0aW5nc1wiO1xyXG5pbXBvcnQgeyBmaWx0ZXJPdXRMaXN0aW5nc0luU2tpcExpc3QgfSBmcm9tIFwiLi9maWx0ZXJPdXRMaXN0aW5nc0luU2tpcExpc3RcIjtcclxuaW1wb3J0IHsgZmlsdGVyT3V0TGlzdGluZ3NOb3RJblByaWNlUmFuZ2UgfSBmcm9tIFwiLi9maWx0ZXJPdXRMaXN0aW5nc05vdEluUHJpY2VSYW5nZVwiO1xyXG5pbXBvcnQgeyBmaWx0ZXJPdXRMaXN0aW5nc1NoaXBwaW5nRW5hYmxlZCB9IGZyb20gXCIuL2ZpbHRlck91dExpc3RpbmdzU2hpcHBpbmdFbmFibGVkXCI7XHJcbmltcG9ydCB7IGZpbHRlck91dExpc3RpbmdUaXRsZXNXaXRoU2tpcFdvcmRzIH0gZnJvbSBcIi4vZmlsdGVyT3V0TGlzdGluZ1RpdGxlc1dpdGhTa2lwV29yZHNcIjtcclxuaW1wb3J0IHsgQ09OU09MRV9NRVNTQUdFLCBnZXRDb25zb2xlTWVzc2FnZXMgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgZ2V0TW9kZWxNYXRjaCB9IGZyb20gXCIuL2dldE1vZGVsTWF0Y2hcIjtcclxuaW1wb3J0IHsgaXNPd25lck51bUxpc3RpbmdzSW5SYW5nZSB9IGZyb20gXCIuL2lzT3duZXJOdW1MaXN0aW5nc0luUmFuZ2VcIjtcclxuaW1wb3J0IHsgcmFuZG9tSW50RnJvbUludGVydmFsIH0gZnJvbSBcIi4vcmFuZG9tSW50RnJvbUludGVydmFsXCI7XHJcbmltcG9ydCB7IHNlbmRNZXNzYWdlIH0gZnJvbSBcIi4vc2VuZE1lc3NhZ2VcIjtcclxuLy8gaW1wb3J0IHsgc2VuZFBhcnRuZXJNZXNzYWdlIH0gZnJvbSBcIi4vc2VuZFBhcnRuZXJNZXNzYWdlXCI7XHJcbi8vIGltcG9ydCB7IHNob3dMYXN0Q29uc29sZUxvZyB9IGZyb20gXCIuL3Nob3dMYXN0Q29uc29sZUxvZ1wiO1xyXG5pbXBvcnQgeyBza2lwcyB9IGZyb20gXCIuL3NraXBzXCI7XHJcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4vc2xlZXBcIjtcclxuaW1wb3J0IHsgc3RhdHMgfSBmcm9tIFwiLi9zdGF0c1wiO1xyXG5pbXBvcnQgeyBzdHJlYWtUaW1lb3V0Q2hlY2sgfSBmcm9tIFwiLi9zdHJlYWtUaW1lb3V0Q2hlY2tcIjtcclxuaW1wb3J0IHsgdGV4dENvbnRhaW5zU2tpcFdvcmQgfSBmcm9tIFwiLi90ZXh0Q29udGFpbnNTa2lwV29yZFwiO1xyXG5pbXBvcnQgeyB3YWl0RG9jdW1lbnRSZWFkeSB9IGZyb20gXCIuL3dhaXREb2N1bWVudFJlYWR5XCI7XHJcbmltcG9ydCB7IHdhaXRGb3JTZWNvbmRzIH0gZnJvbSBcIi4vd2FpdEZvclNlY29uZHNcIjtcclxuaW1wb3J0IHsgX2FwaVNlbmRCdWcgfSBmcm9tIFwiLi9fYXBpU2VuZEJ1Z1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NLZXl3b3JkKGtleXdvcmQsIHppcGNvZGUpIHtcclxuICBpZiAoIXdpbmRvdy5pc0FsbG93ZWQpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBhcmUgbm90IGFsbG93ZWQgdG8gdXNlIHRoaXMgYm90ISB4KCcpO1xyXG4gICAgcmV0dXJuICdub3QtYWxsb3dlZCc7XHJcbiAgfVxyXG4gIC8vIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcygnL2l0ZW0vZGV0YWlsJykpIHtcclxuICAvLyAgIGNvbnNvbGUubG9nKCdHb2luZyB0byBwcmV2aW91cyBwYWdlLicpO1xyXG4gIC8vICAgaWYgKHNob3dBbGVydHMpIGFsZXJ0KFwicHJvY2Vzc0tleXdvcmQgcmVzdWx0IGNvZGUgYnV0IGlzIGluIGl0ZW0gcGFnZS5cIik7XHJcbiAgLy8gICBnb2JhY2soKTtcclxuICAvLyAgIGNvbnNvbGUubG9nKCdXQUlUSU5HIEZPUiBET0NVTUVOVCBUTyBCRSBSRUFEWS4nKTtcclxuICAvLyAgIGF3YWl0IHdhaXREb2N1bWVudFJlYWR5KCk7XHJcbiAgLy8gICBjb25zb2xlLmxvZygnV0FJVElORyBGT1IgL3NlYXJjaCBpbiB1cmwuJyk7XHJcbiAgLy8gICBhd2FpdCB3YWl0Rm9yVXJsRnJhZ21lbnQoJy9zZWFyY2gnKTtcclxuICAvLyAgIGNvbnNvbGUubG9nKCdXQUlUSU5HIEZPUiBSRVNVTFRTJyk7XHJcbiAgLy8gICBhd2FpdCB3YWl0RG9jdW1lbnRSZWFkeSgpO1xyXG4gIC8vICAgYXdhaXQgd2FpdEZvckVsZW1lbnQocXVlcnlJdGVtKTtcclxuICAvLyAgIGNvbnNvbGUubG9nKCdSZXN1bHRzIGhhcyBiZWVuIGxvYWRlZC4nKTtcclxuICAvLyB9XHJcbiAgLy8gY29uc29sZS5sb2coJ1dBSVRJTkcgRk9SIERPQ1VNRU5UIFRPIEJFIFJFQURZLicpO1xyXG4gIGF3YWl0IGdldENvbnNvbGVNZXNzYWdlcygpO1xyXG4gIGF3YWl0IHdhaXREb2N1bWVudFJlYWR5KCk7XHJcbiAgLy8gY29uc29sZS5sb2coJ0RPQ1VNRU5UIFJFQURZLicpO1xyXG4gIC8vIGNvbnN0IGFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYVtocmVmXj1cIi9pdGVtL2RldGFpbFwiXScpO1xyXG4gIENPTlNPTEVfTUVTU0FHRSgnZmV0Y2hpbmdfbGlzdGluZ3MnLCB7XHJcbiAgICBrZXl3b3JkLFxyXG4gICAgemlwY29kZVxyXG4gIH0pO1xyXG4gIGxldCBhTGlzdGluZ3MgPSBhd2FpdCBhcGlPZmZlclVwKCkuZmV0Y2hMaXN0aW5ncyhrZXl3b3JkLCB6aXBjb2RlKTtcclxuICAvLyBjb25zb2xlLmxvZyhhTGlzdGluZ3MubGVuZ3RoLCAnbGlzdGluZ3MgZm9yJywga2V5d29yZCwgJ2hhcyBiZWVuIGZldGNoZWQuJyk7XHJcbiAgQ09OU09MRV9NRVNTQUdFKCdmZXRjaF9saXN0aW5ncycsIHtcclxuICAgIG51bV9saXN0aW5nczogYUxpc3RpbmdzLmxlbmd0aCxcclxuICAgIGtleXdvcmQsXHJcbiAgICB6aXBjb2RlXHJcbiAgfSk7XHJcbiAgXHJcbiAgaWYgKGFMaXN0aW5ncyAmJiBBcnJheS5pc0FycmF5KGFMaXN0aW5ncykpIHN0YXRzKCkuYWRkVG90YWxMaXN0aW5nc1NjcmFwZWQoYUxpc3RpbmdzKTtcclxuICAvLyBsZXQgcm5kSW50ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcclxuICBhTGlzdGluZ3MgPSBmaWx0ZXJMaXN0aW5nc1dpdGhLZXl3b3JkKGFMaXN0aW5ncyk7XHJcbiAgYUxpc3RpbmdzID0gZmlsdGVyT3V0TGlzdGluZ1RpdGxlc1dpdGhTa2lwV29yZHMoYUxpc3RpbmdzKTtcclxuICBhTGlzdGluZ3MgPSBmaWx0ZXJPdXRMaXN0aW5nc05vdEluUHJpY2VSYW5nZShhTGlzdGluZ3MpO1xyXG4gIGFMaXN0aW5ncyA9IGF3YWl0IGZpbHRlck91dExpc3RpbmdzU2hpcHBpbmdFbmFibGVkKGFMaXN0aW5ncyk7XHJcbiAgYUxpc3RpbmdzID0gYXdhaXQgZmlsdGVyT3V0RGVsZXRlZExpc3RpbmdzKGFMaXN0aW5ncyk7XHJcbiAgLy8gYUxpc3RpbmdzID0gYXdhaXQgZmlsdGVyT3V0TGlzdGluZ3NJblNraXBMaXN0KGFMaXN0aW5ncyk7XHJcbiAgY29uc3QgbWF4ID0gYUxpc3RpbmdzLmxlbmd0aDtcclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XHJcbiAgICAvLyAjIExJU1RJTkdTIFBFUiBLRVlXT1JEIENIRUNLXHJcbiAgICBpZiAoIXdpbmRvdy5saXN0aW5nc0NoZWNrZWQpIHdpbmRvdy5saXN0aW5nc0NoZWNrZWQgPSAwO1xyXG4gICAgd2luZG93Lmxpc3RpbmdzQ2hlY2tlZCArPSAxO1xyXG4gICAgaWYgKHdpbmRvdy5saXN0aW5nc0NoZWNrZWQgPiBsaXN0aW5nc1BlcktleXdvcmQpIHtcclxuICAgICAgd2luZG93Lmxpc3RpbmdzQ2hlY2tlZCA9IDA7XHJcbiAgICAgIHJldHVybiAnbGlzdGluZ3NQZXJLZXl3b3JkIHJlYWNoZWQuJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBCT1QgU1RPUCBDSEVDS1xyXG4gICAgaWYgKCF3aW5kb3cuaXNSdW4pIHtcclxuICAgICAgY29uc29sZS5sb2coJ0JvdCBzdG9wcGVkLicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBpZCA9IGdldElkKGluZGV4KTtcclxuICAgIGNvbnN0IGlkID0gYUxpc3RpbmdzW2luZGV4XSAmJiBhTGlzdGluZ3NbaW5kZXhdLnRpbGUgJiYgYUxpc3RpbmdzW2luZGV4XS50aWxlLmlkO1xyXG4gICAgY29uc3QgdGl0bGUgPSBhTGlzdGluZ3NbaW5kZXhdICYmIGFMaXN0aW5nc1tpbmRleF0udGlsZSAmJiBhTGlzdGluZ3NbaW5kZXhdLnRpbGUudGl0bGU7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbGlzdGluZyBpZCcsIGlkKTtcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignbGlzdGluZyBoYXMgbm8gaWQnKTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICAvLyBTS0lQIExJU1RJTkcgSURTLlxyXG4gICAgaWYgKGF3YWl0IHNraXBzKCkuaXNTa2lwTGlzdGluZyhpZCkpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ0xJU1RJTkcgU0tJUFBFRCAtIGFscmVhZHkgaW4gc2tpcCBsaXN0LicsIGlkKTtcclxuICAgICAgQ09OU09MRV9NRVNTQUdFKCdza2lwX2xpc3RpbmcnLCB7XHJcbiAgICAgICAgbGlzdGluZ19pZDogaWQsXHJcbiAgICAgICAgbGlzdGluZ19uYW1lOiB0aXRsZVxyXG4gICAgICB9KTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEdFVCBMSVNUSU5HIERFVEFJTFMuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnRmV0Y2hpbmcgbGlzdGluZyBkZXRhaWxzLicsIGlkKTtcclxuICAgIGNvbnN0IGxpc3RpbmdEYXRhID0gYXdhaXQgZmV0Y2hMaXN0aW5nRGV0YWlsKGlkKTtcclxuXHJcbiAgICAvLyBTS0lQIFdPUkQgQ0hFQ0tcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gbGlzdGluZ0RhdGEuZGVzY3JpcHRpb247XHJcbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcclxuICAgICAgbGV0IHNraXBXb3JkRm91bmQgPSB0ZXh0Q29udGFpbnNTa2lwV29yZChkZXNjcmlwdGlvbik7XHJcbiAgICAgIGlmIChza2lwV29yZEZvdW5kKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0xJU1RJTkcgREVTQ1JJUFRJT04gQ09OVEFJTlMgU0tJUCBXT1JEIScsIHNraXBXb3JkRm91bmQpO1xyXG4gICAgICAgIENPTlNPTEVfTUVTU0FHRSgnc2tpcHdvcmRfZm91bmQnLCB7XHJcbiAgICAgICAgICBsaXN0aW5nX25hbWU6IHRpdGxlLFxyXG4gICAgICAgICAgbGlzdGluZ19pZDogaWRcclxuICAgICAgICB9KTtcclxuICAgICAgICBhd2FpdCBza2lwcygpLnNhdmVUb1NraXBMaXN0aW5nKGlkKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRzKCkuYWRkTmV3TGlzdGluZ3MoKTtcclxuXHJcbiAgICAvLyBNRVNTQUdFRCBPV05FUiBDSEVDS1xyXG4gICAgY29uc3Qgb3duZXJpZCA9IGxpc3RpbmdEYXRhICYmIGxpc3RpbmdEYXRhLm93bmVyICYmIGxpc3RpbmdEYXRhLm93bmVyLmlkXHJcbiAgICBjb25zdCBvd25lcm5hbWUgPSBsaXN0aW5nRGF0YSAmJiBsaXN0aW5nRGF0YS5vd25lciAmJiBsaXN0aW5nRGF0YS5vd25lci5wcm9maWxlICYmIGxpc3RpbmdEYXRhLm93bmVyLnByb2ZpbGUubmFtZTtcclxuICAgIGlmICghb3duZXJpZCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZ2V0IG93bmVyaWQgb2YgbGlzdGluZyAke2lkfSFgKTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU0tJUCBNRVNTQUdFRCBVU0VSUy5cclxuICAgIGNvbnN0IGlzT3duZXJNZXNzYWdlZCA9IGF3YWl0IHNraXBzKCkuaXNTa2lwTWVzc2FnZWRVc2VyKG93bmVyaWQpO1xyXG4gICAgaWYgKGlzT3duZXJNZXNzYWdlZCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnVXNlciBpcyBhbHJlYWR5IG1lc3NhZ2VkLicsIG93bmVyaWQpO1xyXG4gICAgICBhd2FpdCBhZGRBbGxVc2VyTGlzdGluZ3NUb1NraXBMaXN0KG93bmVyaWQsIG93bmVybmFtZSk7XHJcbiAgICAgIENPTlNPTEVfTUVTU0FHRSgnYWxyZWFkeV9tZXNzYWdlZCcsIHtcclxuICAgICAgICBvd25lcl9pZDogb3duZXJpZCxcclxuICAgICAgICBvd25lcl9uYW1lOiBvd25lcm5hbWUsXHJcbiAgICAgICAgbGlzdGluZ19pZDogaWQsXHJcbiAgICAgICAgbGlzdGluZ19uYW1lOiB0aXRsZVxyXG4gICAgICB9KTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT1dORVJfTElTVFMgQ0hFQ0tcclxuICAgIGNvbnN0IGlzTGlzdGluZ3NDb3VudEluUmFuZ2UgPSBhd2FpdCBpc093bmVyTnVtTGlzdGluZ3NJblJhbmdlKGlkLCBvd25lcmlkLCBvd25lcm5hbWUsIHRpdGxlKVxyXG4gICAgaWYgKCFpc0xpc3RpbmdzQ291bnRJblJhbmdlKSB7XHJcbiAgICAgIC8vIFNBVkUgVVNFUiBMSVNUSU5HUyBUTyBTS0lQIExJU1RcclxuICAgICAgYXdhaXQgYWRkQWxsVXNlckxpc3RpbmdzVG9Ta2lwTGlzdChvd25lcmlkLCBvd25lcm5hbWUpO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtZXNzYWdlU2VudCA9IGF3YWl0IHNlbmRNZXNzYWdlKGxpc3RpbmdEYXRhKTtcclxuICAgIGlmIChtZXNzYWdlU2VudCkge1xyXG4gICAgICBjb25zdCBsaXN0aW5nX3ByaWNlID0gbGlzdGluZ0RhdGEucHJpY2U7XHJcbiAgICAgIENPTlNPTEVfTUVTU0FHRSgnbWVzc2FnZV9zZW50Jywge1xyXG4gICAgICAgIG1lc3NhZ2Vfc2VudDogbWVzc2FnZVNlbnQsXHJcbiAgICAgICAgbGlzdGluZ19wcmljZSxcclxuICAgICAgICBsaXN0aW5nX2lkOiBpZCxcclxuICAgICAgICBsaXN0aW5nX25hbWU6IHRpdGxlXHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBTQVZFIFVTRVIgTElTVElOR1MgVE8gU0tJUCBMSVNUXHJcbiAgICAgIGF3YWl0IGFkZEFsbFVzZXJMaXN0aW5nc1RvU2tpcExpc3Qob3duZXJpZCwgb3duZXJuYW1lKTtcclxuICAgICAgLy8gU0FWRSBUTyBNRVNTQUdFRCBVU0VSIExJU1RcclxuICAgICAgYXdhaXQgc2tpcHMoKS5zYXZlVG9NZXNzYWdlZFVzZXJzKG93bmVyaWQpO1xyXG4gICAgICAvLyBIQUxUXHJcbiAgICAgIGNvbnN0IG1zV2FpdCA9IChyYW5kb21JbnRGcm9tSW50ZXJ2YWwodXNlckRlbGF5WzBdLCB1c2VyRGVsYXlbMV0pICogMTAwMCk7XHJcbiAgICAgIGNvbnN0IGZ1dHVyZVRzID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSArIG1zV2FpdDtcclxuICAgICAgQ09OU09MRV9NRVNTQUdFKCd0aW1lb3V0Jywge1xyXG4gICAgICAgIG1lc3NhZ2U6IGBGaW5pc2hlZCBzZW5kaW5nIGFsbCBtZXNzYWdlcyB0byAke293bmVybmFtZX0gKCR7b3duZXJpZH0pLmAsIFxyXG4gICAgICAgIGhoOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnSEgnKSxcclxuICAgICAgICBtbTogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ21tJyksXHJcbiAgICAgICAgc3M6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdzcycpXHJcbiAgICAgIH0pO1xyXG4gICAgICBhd2FpdCBzbGVlcChtc1dhaXQpO1xyXG4gICAgICAvLyBhd2FpdCB3YWl0Rm9yU2Vjb25kcyhyYW5kb21JbnRGcm9tSW50ZXJ2YWwodXNlckRlbGF5WzBdLCB1c2VyRGVsYXlbMV0pLCAnRmluaXNoZWQgc2VuZGluZyBhbGwgbWVzc2FnZXMgdG8gdXNlci4nKTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBzdHJlYWtUaW1lb3V0Q2hlY2soKTtcclxuICB9XHJcblxyXG4gIGNvbnNvbGUubG9nKCdubyBtb3JlIG5ldyByZXN1bHRzIGF2YWlsYWJsZScpO1xyXG4gIHJldHVybiAnbm8gbW9yZSByZXN1bHRzJztcclxufSIsImV4cG9ydCBmdW5jdGlvbiB3YWl0RG9jdW1lbnRSZWFkeSgpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAoZnVuY3Rpb24gd2FpdEZvckZvbygpIHtcclxuICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHJldHVybiByZXNvbHZlKCk7XHJcbiAgICAgIHNldFRpbWVvdXQod2FpdEZvckZvbywgMzApO1xyXG4gICAgfSkoKTtcclxuICB9KTtcclxufSIsImltcG9ydCB7IENPTlNPTEVfTUVTU0FHRSB9IGZyb20gXCIuL2dldENvbnNvbGVNZXNzYWdlc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckxpc3RpbmdzV2l0aEtleXdvcmQoYUxpc3RpbmdzKSB7XHJcbiAgY29uc3Qga2V5d29yZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI2tleXdvcmRzJykudmFsdWU7XHJcbiAgY29uc3QgbGVuZ3RoQmVmb3JlID0gYUxpc3RpbmdzLmxlbmd0aDtcclxuICBhTGlzdGluZ3MgPSBhTGlzdGluZ3MuZmlsdGVyKGxpc3RpbmcgPT4ge1xyXG4gICAgY29uc3QgdGl0bGUgPSBsaXN0aW5nLnRpbGUgJiYgbGlzdGluZy50aWxlLnRpdGxlO1xyXG4gICAgaWYgKCF0aXRsZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgXHJcbiAgICBjb25zdCBhbGxLZXl3b3JkcyA9IGtleXdvcmRzLnNwbGl0KCcsJykubWFwKHggPT4geC50cmltKCkpLmpvaW4oJ3wnKTtcclxuICAgIGNvbnN0IHJneCA9IG5ldyBSZWdFeHAoYWxsS2V5d29yZHMsICdpJyk7XHJcbiAgICByZXR1cm4gISF0aXRsZS5tYXRjaChyZ3gpO1xyXG4gIH0pO1xyXG4gIGNvbnN0IGxlbmd0aEFmdGVyID0gYUxpc3RpbmdzLmxlbmd0aDtcclxuICBpZiAobGVuZ3RoQWZ0ZXIgIT09IGxlbmd0aEJlZm9yZSkge1xyXG4gICAgQ09OU09MRV9NRVNTQUdFKCdza2lwX25vX2tleXdvcmQnLCB7XHJcbiAgICAgIG51bV9saXN0aW5nczogKGxlbmd0aEJlZm9yZSAtIGxlbmd0aEFmdGVyKVxyXG4gICAgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgRmlsdGVyZWQgJHtsZW5ndGhBZnRlcn0gb3V0IG9mICR7bGVuZ3RoQmVmb3JlfSBsaXN0aW5ncyB0aGF0IGhhcyBrZXl3b3JkIGluIHRpdGxlLmApO1xyXG4gIH1cclxuICByZXR1cm4gYUxpc3RpbmdzO1xyXG59IiwiaW1wb3J0IHsgQ09OU09MRV9NRVNTQUdFIH0gZnJvbSBcIi4vZ2V0Q29uc29sZU1lc3NhZ2VzXCI7XHJcbmltcG9ydCB7IHRleHRDb250YWluc1NraXBXb3JkIH0gZnJvbSBcIi4vdGV4dENvbnRhaW5zU2tpcFdvcmRcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPdXRMaXN0aW5nVGl0bGVzV2l0aFNraXBXb3JkcyhhTGlzdGluZ3MpIHtcclxuICBjb25zdCBsZW5ndGhCZWZvcmUgPSBhTGlzdGluZ3MubGVuZ3RoO1xyXG4gIGFMaXN0aW5ncyA9IGFMaXN0aW5ncy5maWx0ZXIobGlzdGluZyA9PiB7XHJcbiAgICBjb25zdCB0aXRsZSA9IGxpc3RpbmcudGlsZSAmJiBsaXN0aW5nLnRpbGUudGl0bGU7XHJcbiAgICByZXR1cm4gIXRleHRDb250YWluc1NraXBXb3JkKHRpdGxlKTtcclxuICB9KTtcclxuICBjb25zdCBsZW5ndGhBZnRlciA9IGFMaXN0aW5ncy5sZW5ndGg7XHJcbiAgaWYgKGxlbmd0aEFmdGVyICE9PSBsZW5ndGhCZWZvcmUpIHtcclxuICAgIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgYFNraXBwZWQgJHtsZW5ndGhCZWZvcmUgLSBsZW5ndGhBZnRlcn0gY29udGFpbmluZyBza2lwIHdvcmQuYCk7XHJcbiAgfVxyXG4gIHJldHVybiBhTGlzdGluZ3M7XHJcbn0iLCJpbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgc2tpcHMgfSBmcm9tIFwiLi9za2lwc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbHRlck91dExpc3RpbmdzU2hpcHBpbmdFbmFibGVkKGFMaXN0aW5ncykge1xyXG4gIGNvbnN0IGFkZFRvU2tpcExpc3QgPSBbXTtcclxuICBjb25zdCBsZW5ndGhCZWZvcmUgPSBhTGlzdGluZ3MubGVuZ3RoO1xyXG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N3aXRjaC1za2lwc2hpcHBpbmdlbmFibGVkJykuY2hlY2tlZCkgcmV0dXJuO1xyXG4gIGFMaXN0aW5ncyA9IGFMaXN0aW5ncy5maWx0ZXIobGlzdGluZyA9PiB7XHJcbiAgICBjb25zdCBzaGlwcGluZ0VuYWJsZWQgPSBsaXN0aW5nLnRpbGUgJiYgbGlzdGluZy50aWxlLmZ1bGZpbGxtZW50RGV0YWlscyAmJiBsaXN0aW5nLnRpbGUuZnVsZmlsbG1lbnREZXRhaWxzLnNoaXBwaW5nRW5hYmxlZDtcclxuICAgIGNvbnN0IGlkID0gbGlzdGluZy50aWxlICYmIGxpc3RpbmcudGlsZS5pZDtcclxuICAgIGlmIChzaGlwcGluZ0VuYWJsZWQgJiYgaWQpIGFkZFRvU2tpcExpc3QucHVzaChpZCk7XHJcbiAgICByZXR1cm4gIXNoaXBwaW5nRW5hYmxlZDtcclxuICB9KTtcclxuICBjb25zdCBsZW5ndGhBZnRlciA9IGFMaXN0aW5ncy5sZW5ndGg7XHJcbiAgaWYgKGxlbmd0aEFmdGVyICE9PSBsZW5ndGhCZWZvcmUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGBGaWx0ZXJlZCBvdXQgJHtsZW5ndGhCZWZvcmUgLSBsZW5ndGhBZnRlcn0gb2YgJHtsZW5ndGhCZWZvcmV9IHNoaXBwaW5nIGVuYWJsZWQgbGlzdGluZ3MuYCk7XHJcbiAgICBDT05TT0xFX01FU1NBR0UoJ3NoaXBwaW5nX2VuYWJsZWQnLCB7XHJcbiAgICAgIG51bV9saXN0aW5nczogKGxlbmd0aEJlZm9yZSAtIGxlbmd0aEFmdGVyKVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGlmIChhZGRUb1NraXBMaXN0Lmxlbmd0aCkgYXdhaXQgc2tpcHMoKS5zYXZlVG9Ta2lwTGlzdGluZ0JhdGNoKGFkZFRvU2tpcExpc3QpO1xyXG4gIHJldHVybiBhTGlzdGluZ3M7XHJcbn0iLCJpbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgc2tpcHMgfSBmcm9tIFwiLi9za2lwc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbHRlck91dERlbGV0ZWRMaXN0aW5ncyhhTGlzdGluZ3MpIHtcclxuICBjb25zdCBhZGRUb1NraXBMaXN0ID0gW107XHJcbiAgY29uc3QgbGVuZ3RoQmVmb3JlID0gYUxpc3RpbmdzLmxlbmd0aDtcclxuICBhTGlzdGluZ3MgPSBhTGlzdGluZ3MuZmlsdGVyKGxpc3RpbmcgPT4ge1xyXG4gICAgY29uc3Qgc3RhdGUgPSBsaXN0aW5nLnRpbGUgJiYgbGlzdGluZy50aWxlLnN0YXRlO1xyXG4gICAgY29uc3QgaWQgPSBsaXN0aW5nLnRpbGUgJiYgbGlzdGluZy50aWxlLmlkO1xyXG4gICAgaWYgKHN0YXRlID09PSAnREVMRVRFRCcpIHtcclxuICAgICAgYWRkVG9Ta2lwTGlzdC5wdXNoKGlkKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSk7XHJcbiAgY29uc3QgbGVuZ3RoQWZ0ZXIgPSBhTGlzdGluZ3MubGVuZ3RoO1xyXG4gIGlmIChsZW5ndGhBZnRlciAhPT0gbGVuZ3RoQmVmb3JlKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgRmlsdGVyZWQgb3V0ICR7bGVuZ3RoQmVmb3JlIC0gbGVuZ3RoQWZ0ZXJ9IG9mICR7bGVuZ3RoQmVmb3JlfSBkZWxldGVkIGxpc3RpbmdzLmApO1xyXG4gICAgQ09OU09MRV9NRVNTQUdFKCdkZWxldGVkX2xpc3RpbmdzJywge1xyXG4gICAgICBudW1fbGlzdGluZ3M6IChsZW5ndGhCZWZvcmUgLSBsZW5ndGhBZnRlcilcclxuICAgIH0pO1xyXG4gIH1cclxuICBpZiAoYWRkVG9Ta2lwTGlzdC5sZW5ndGgpIGF3YWl0IHNraXBzKCkuc2F2ZVRvU2tpcExpc3RpbmdCYXRjaChhZGRUb1NraXBMaXN0KTtcclxuICByZXR1cm4gYUxpc3RpbmdzO1xyXG59IiwiaW1wb3J0IHsgaGFuZGxlRmV0Y2hFcnJvcnMgfSBmcm9tIFwiLi9oYW5kbGVGZXRjaEVycm9yc1wiO1xyXG5pbXBvcnQgc2VuZERlYnVnTG9nIGZyb20gXCIuL3NlbmREZWJ1Z0xvZ1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NXcml0ZVF1ZXVlKCkge1xyXG4gIGlmICghd2luZG93LndyaXRlUXVldWUpIHdpbmRvdy53cml0ZVF1ZXVlID0gW107XHJcbiAgY29uc3QgcXVldWUgPSBbLi4ud2luZG93LndyaXRlUXVldWVdO1xyXG4gIHdpbmRvdy53cml0ZVF1ZXVlID0gW107XHJcbiAgZm9yIChjb25zdCBvV3JpdGUgb2YgcXVldWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL3NoZWV0cy5ob3BsYS50b29scy8/SFQ9MWMxMGE0M2RjOGRjOGIyMjA1OTMwZTg3MjVlOWZhZmUmZGF0YV9rZXk9a2V5Jywge1xyXG4gICAgICAvLyBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9kMjcxLTQ5LTE0OC0xMzAtOC5uZ3Jvay5pby90cmFkZS1hcHBsZXMvdXMtY2VudHJhbDEvbWFya3BsYWNlYm90c3RhdHMnLCB7XHJcbiAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL3VzLWNlbnRyYWwxLXRyYWRlLWFwcGxlcy5jbG91ZGZ1bmN0aW9ucy5uZXQvbWFya3BsYWNlYm90c3RhdHMnLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShvV3JpdGUpXHJcbiAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIGlmIChyZXNwb25zZSAhPT0gJ29rJykge1xyXG4gICAgICAgIHNlbmREZWJ1Z0xvZyh7IGVycm9yOiAnRmFpbGVkIHRvIHdyaXRlIHRvIGRhc2hib2FyZCcsIGRhdGE6IG9Xcml0ZSwgc2hlZXRzQXBpUmVzcG9uc2U6IHJlc3BvbnNlfSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgc2VuZERlYnVnTG9nKHsgZXJyb3I6ICdGYWlsZWQgdG8gd3JpdGUgdG8gZGFzaGJvYXJkMycsIGRhdGE6IG9Xcml0ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIHByb2Nlc3NXcml0ZVF1ZXVlKCk7XHJcbiAgfSwgMjAwMCk7XHJcblxyXG59IiwiaW1wb3J0IHsgaGFuZGxlRmV0Y2hFcnJvcnMgfSBmcm9tIFwiLi9oYW5kbGVGZXRjaEVycm9yc1wiO1xyXG5pbXBvcnQgc2VuZERlYnVnTG9nIGZyb20gXCIuL3NlbmREZWJ1Z0xvZ1wiO1xyXG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gXCIuL3NsZWVwXCI7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXREZWZhdWx0U2V0dGluZ3MoKSB7XHJcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vc2hlZXRzLmhvcGxhLnRvb2xzLz9IVD0xYTYzMjRlYTQ1NmMyNzM0NjIzMGRmMGE3MDQ1OGNjOSZmb3JtYXQ9anNvbiZzaGVldF9uYW1lPVNldHRpbmdzJylcclxuICAgIC50aGVuKGFzeW5jIHJlcyA9PiBoYW5kbGVGZXRjaEVycm9ycyhyZXMpKVxyXG4gICAgLnRoZW4oeCA9PiB4LnRleHQoKSk7XHJcbiAgaWYgKHJlcyAmJiAhcmVzLmluY2x1ZGVzKCdrZXl3b3JkcycpKSB7XHJcbiAgICByZXR1cm4gZ2V0RGVmYXVsdENvbnRlbnQoKTtcclxuICB9XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcyk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgYXdhaXQgc2VuZERlYnVnTG9nKHsgZXJyb3I6ICdGYWlsZWQgdG8gZ2V0RGVmYXVsdFNldHRpbmdzLiBzaGVldHMuaG9wbGEudG9vbHMgYXBpIHJlc3BvbnNlLicsIHJlcyB9KTtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldERlZmF1bHRDb250ZW50KCkge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL3NoZWV0cy5ob3BsYS50b29scy8/SFQ9MWE2MzI0ZWE0NTZjMjczNDYyMzBkZjBhNzA0NThjYzkmZm9ybWF0PWpzb24mc2hlZXRfbmFtZT1Db250ZW50JylcclxuICAgIC50aGVuKGFzeW5jIHJlcyA9PiBoYW5kbGVGZXRjaEVycm9ycyhyZXMpKVxyXG4gICAgLnRoZW4oeCA9PiB4LnRleHQoKSk7XHJcbiAgaWYgKHJlcyAmJiAhcmVzLmluY2x1ZGVzKCdvcGVuZXInKSkge1xyXG4gICAgcmV0dXJuIGdldERlZmF1bHRDb250ZW50KCk7XHJcbiAgfVxyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGF3YWl0IHNlbmREZWJ1Z0xvZyh7IGVycm9yOiAnRmFpbGVkIHRvIGdldERlZmF1bHRDb250ZW50LiBzaGVldHMuaG9wbGEudG9vbHMgYXBpIHJlc3BvbnNlLicsIHJlcyB9KTtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlRGVmYXVsdHMoKSB7XHJcbiAgZnVuY3Rpb24gdHJpZ2dlckNoYW5nZShlKSB7XHJcbiAgICBpZiAoXCJjcmVhdGVFdmVudFwiIGluIGRvY3VtZW50KSB7XHJcbiAgICAgIGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiSFRNTEV2ZW50c1wiKTtcclxuICAgICAgZXZ0LmluaXRFdmVudChcImNoYW5nZVwiLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgIGUuZGlzcGF0Y2hFdmVudChldnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZS5maXJlRXZlbnQoXCJvbmNoYW5nZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZS5wYXJlbnRFbGVtZW50ICYmIGUucGFyZW50RWxlbWVudC5NYXRlcmlhbFRleHRmaWVsZCkge1xyXG4gICAgICBlLnBhcmVudEVsZW1lbnQuTWF0ZXJpYWxUZXh0ZmllbGQuY2hhbmdlKGUudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZTJsb2FkaW5nJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgZ2V0RGVmYXVsdFNldHRpbmdzKClcclxuICAgIC50aGVuKHggPT4ge1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZTJsb2FkaW5nJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgaWYgKHgucmVzdWx0ICYmIEFycmF5LmlzQXJyYXkoeC5yZXN1bHQpICYmIHgucmVzdWx0Lmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IG9EZWZhdWx0cyA9IHt9O1xyXG4gICAgICAgIHgucmVzdWx0LmZvckVhY2gocm93ID0+IHtcclxuICAgICAgICAgIG9EZWZhdWx0c1tyb3dbJ2lucHV0X25hbWUnXV0gPSByb3dbJ3ZhbHVlJ107XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qga2V5d29yZHMgPSBvRGVmYXVsdHNbJ2tleXdvcmRzJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgemlwY29kZXMgPSBvRGVmYXVsdHNbJ3ppcGNvZGVzJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3Qgc2tpcFdvcmRzID0gb0RlZmF1bHRzWydza2lwX3dvcmRzJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgbGlzdGluZ01pblByaWNlID0gb0RlZmF1bHRzWydsaXN0aW5nX21pbl9wcmljZSddIHx8ICcnO1xyXG4gICAgICAgIGNvbnN0IGxpc3RpbmdNYXhQcmljZSA9IG9EZWZhdWx0c1snbGlzdGluZ19tYXhfcHJpY2UnXSB8fCAnJztcclxuICAgICAgICBjb25zdCBsaXN0aW5nTWF4QWdlID0gb0RlZmF1bHRzWydsaXN0aW5nX21heF9hZ2UnXSB8fCAnJztcclxuICAgICAgICBjb25zdCBsaXN0aW5nUHJpY2VEZWx0YSA9IG9EZWZhdWx0c1snbGlzdGluZ19wcmljZV9kZWx0YSddIHx8ICcnO1xyXG4gICAgICAgIGNvbnN0IHByaWNlUm91bmRpbmcgPSBvRGVmYXVsdHNbJ3ByaWNlX3JvdW5kaW5nJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgY3VzdG9tUHJpY2VEZWx0YSA9IG9EZWZhdWx0c1snY3VzdG9tX3ByaWNlX2RlbHRhJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgY29udGludWVBZnRlclN0b3JhZ2UgPSBvRGVmYXVsdHNbJ2NvbnRpbnVlX2FmdGVyX3N0b3JhZ2UnXSB8fCAnJztcclxuICAgICAgICBjb25zdCBjb250aW51ZUFmdGVyTmV0d29yayA9IG9EZWZhdWx0c1snY29udGludWVfYWZ0ZXJfbmV0d29yayddIHx8ICcnO1xyXG5cclxuICAgICAgICBsZXQgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrZXl3b3JkcycpO1xyXG4gICAgICAgIGUudmFsdWUgPSBrZXl3b3JkcztcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjemlwY29kZXMnKTtcclxuICAgICAgICBlLnZhbHVlID0gemlwY29kZXM7XHJcbiAgICAgICAgdHJpZ2dlckNoYW5nZShlKTtcclxuICAgICAgICBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NraXB3b3JkcycpO1xyXG4gICAgICAgIGUudmFsdWUgPSBza2lwV29yZHM7XHJcbiAgICAgICAgdHJpZ2dlckNoYW5nZShlKTtcclxuICAgICAgICBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3RpbmdfbWluX3ByaWNlJyk7XHJcbiAgICAgICAgZS52YWx1ZSA9IGxpc3RpbmdNaW5QcmljZTtcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlzdGluZ19tYXhfcHJpY2UnKTtcclxuICAgICAgICBlLnZhbHVlID0gbGlzdGluZ01heFByaWNlO1xyXG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoZSk7XHJcbiAgICAgICAgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaXN0aW5nX21heF9hZ2UnKTtcclxuICAgICAgICBlLnZhbHVlID0gbGlzdGluZ01heEFnZTtcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlzdGluZ19wcmljZV9kZWx0YScpO1xyXG4gICAgICAgIGUudmFsdWUgPSBsaXN0aW5nUHJpY2VEZWx0YTtcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3VzdG9tX3ByaWNlX2RlbHRhJyk7XHJcbiAgICAgICAgZS52YWx1ZSA9IGN1c3RvbVByaWNlRGVsdGE7XHJcbiAgICAgICAgdHJpZ2dlckNoYW5nZShlKTtcclxuICAgICAgICBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JvdW5kdXBkb3duJyk7XHJcbiAgICAgICAgZS52YWx1ZSA9IHByaWNlUm91bmRpbmc7XHJcbiAgICAgICAgdHJpZ2dlckNoYW5nZShlKTtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzd2l0Y2gtY29udGludWVfYWZ0ZXJfc3RvcmFnZScpO1xyXG4gICAgICAgIHdhaXRGb3JNZGwoZSkudGhlbihlID0+IHtcclxuICAgICAgICAgIGlmIChjb250aW51ZUFmdGVyU3RvcmFnZSA9PT0gJ1RSVUUnKSB7XHJcbiAgICAgICAgICAgIGUucGFyZW50Tm9kZS5NYXRlcmlhbFN3aXRjaC5vbigpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZS5wYXJlbnROb2RlLk1hdGVyaWFsU3dpdGNoLm9mZigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3dpdGNoLWNvbnRpbnVlX2FmdGVyX25ldHdvcmsnKTtcclxuICAgICAgICB3YWl0Rm9yTWRsKGUpLnRoZW4oZSA9PiB7XHJcbiAgICAgICAgICBpZiAoY29udGludWVBZnRlck5ldHdvcmsgPT09ICdUUlVFJykge1xyXG4gICAgICAgICAgICBlLnBhcmVudE5vZGUuTWF0ZXJpYWxTd2l0Y2gub24oKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGUucGFyZW50Tm9kZS5NYXRlcmlhbFN3aXRjaC5vZmYoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQnLCBlcnIpO1xyXG4gICAgICByZXR1cm4gc2xlZXAoMTAwMDApLnRoZW4oKCkgPT4gcmVzdG9yZURlZmF1bHRzKCkpO1xyXG4gICAgICAvLyByZXR1cm4gcmVzdG9yZURlZmF1bHRzKCk7XHJcbiAgICB9KTs7XHJcbiAgZ2V0RGVmYXVsdENvbnRlbnQoKVxyXG4gICAgLnRoZW4oeCA9PiB7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWdlMmxvYWRpbmcnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICBpZiAoeC5yZXN1bHQgJiYgQXJyYXkuaXNBcnJheSh4LnJlc3VsdCkgJiYgeC5yZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3Qgb0RlZmF1bHRzID0ge307XHJcbiAgICAgICAgeC5yZXN1bHQuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgb0RlZmF1bHRzW3Jvd1snaW5wdXRfbmFtZSddXSA9IHJvd1sndmFsdWUnXTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3BlbmVybWVzc2FnZSA9IG9EZWZhdWx0c1snb3BlbmVyJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgcXVlc3Rpb25fMSA9IG9EZWZhdWx0c1sncXVlc3Rpb25fMSddIHx8ICcnO1xyXG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uXzIgPSBvRGVmYXVsdHNbJ3F1ZXN0aW9uXzInXSB8fCAnJztcclxuICAgICAgICBjb25zdCBzdG9yYWdlTWVzc2FnZSA9IG9EZWZhdWx0c1snc3RvcmFnZV9tZXNzYWdlJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgbmV0d29ya01lc3NhZ2UgPSBvRGVmYXVsdHNbJ25ldHdvcmtfbWVzc2FnZSddIHx8ICcnO1xyXG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uXzMgPSBvRGVmYXVsdHNbJ3F1ZXN0aW9uXzMnXSB8fCAnJztcclxuICAgICAgICBjb25zdCBxdWVzdGlvbl80ID0gb0RlZmF1bHRzWydxdWVzdGlvbl80J10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgbG93YmFsbE1lc3NhZ2UgPSBvRGVmYXVsdHNbJ2xvd2JhbGwnXSB8fCAnJztcclxuICAgICAgICBjb25zdCBvZmZlcm1lc3NhZ2UgPSBvRGVmYXVsdHNbJ29mZmVyJ10gfHwgJyc7XHJcbiAgICAgICAgY29uc3QgbWVldHVwTWVzc2FnZSA9IG9EZWZhdWx0c1snbWVldHVwJ10gfHwgJyc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb3BlbmVybWVzc2FnZScpO1xyXG4gICAgICAgIGUudmFsdWUgPSBvcGVuZXJtZXNzYWdlO1xyXG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoZSk7XHJcbiAgICAgICAgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdWVzdGlvbl8xJyk7XHJcbiAgICAgICAgZS52YWx1ZSA9IHF1ZXN0aW9uXzE7XHJcbiAgICAgICAgdHJpZ2dlckNoYW5nZShlKTtcclxuICAgICAgICBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3F1ZXN0aW9uXzInKTtcclxuICAgICAgICBlLnZhbHVlID0gcXVlc3Rpb25fMjtcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2JtZXNzYWdlJyk7XHJcbiAgICAgICAgZS52YWx1ZSA9IHN0b3JhZ2VNZXNzYWdlO1xyXG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoZSk7XHJcbiAgICAgICAgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXR3b3JrbWVzc2FnZScpO1xyXG4gICAgICAgIGUudmFsdWUgPSBuZXR3b3JrTWVzc2FnZTtcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcXVlc3Rpb25fMycpO1xyXG4gICAgICAgIGUudmFsdWUgPSBxdWVzdGlvbl8zO1xyXG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoZSk7XHJcbiAgICAgICAgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNxdWVzdGlvbl80Jyk7XHJcbiAgICAgICAgZS52YWx1ZSA9IHF1ZXN0aW9uXzQ7XHJcbiAgICAgICAgdHJpZ2dlckNoYW5nZShlKTtcclxuICAgICAgICBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvd2JhbGxfbWVzc2FnZScpO1xyXG4gICAgICAgIGUudmFsdWUgPSBsb3diYWxsTWVzc2FnZTtcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb2ZmZXJtZXNzYWdlJyk7XHJcbiAgICAgICAgZS52YWx1ZSA9IG9mZmVybWVzc2FnZTtcclxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKGUpO1xyXG4gICAgICAgIGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVldHVwbWVzc2FnZScpO1xyXG4gICAgICAgIGUudmFsdWUgPSBtZWV0dXBNZXNzYWdlO1xyXG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoZSk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignRmV0Y2ggRmFpbGVkJywgZXJyKTtcclxuICAgICAgcmV0dXJuIHNsZWVwKDEwMDAwKS50aGVuKCgpID0+IHJlc3RvcmVEZWZhdWx0cygpKTtcclxuICAgICAgLy8gcmV0dXJuIHJlc3RvcmVEZWZhdWx0cygpO1xyXG4gICAgfSk7O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gd2FpdEZvck1kbChlUmFkaW8pIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAoZnVuY3Rpb24gd2FpdEZvckZvbygpIHtcclxuICAgICAgaWYgKGVSYWRpby5wYXJlbnROb2RlLk1hdGVyaWFsUmFkaW8gfHwgZVJhZGlvLnBhcmVudE5vZGUuTWF0ZXJpYWxTd2l0Y2gpIHJldHVybiByZXNvbHZlKGVSYWRpbyk7XHJcbiAgICAgIHNldFRpbWVvdXQod2FpdEZvckZvbywgMzApO1xyXG4gICAgfSkoKTtcclxuICB9KTtcclxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlbmREZWJ1Z0xvZyhkYXRhKSB7XHJcbiAgcmV0dXJuIGZldGNoKGBodHRwczovL3dlYmhvb2suaG9wbGEud29ya2Vycy5kZXY/cHJvamVjdD1PZmZlclVwQm90YCwge1xyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgIG1vZGU6ICduby1jb3JzJ1xyXG4gIH0pO1xyXG59IiwiaW1wb3J0IHsgbG9hZFZhcmlhbnRQcmVzZXQgfSBmcm9tIFwiLi9sb2FkVmFyaWFudFByZXNldFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFZpZXdlclN0YXRlKGVuYWJsZSkge1xyXG4gIGlmICghZW5hYmxlICYmICF3aW5kb3cudmlld2VybW9kZSkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhICNtZW51IGFbaHJlZj1cIiNwYWdlMlwiXScpLmNsaWNrKCk7XHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI21lbnUgYVtocmVmPVwiI3BhZ2UxXCJdJykuc3R5bGUuY29sb3IgPSAnZ2FpbnNib3JvJztcclxuICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YSAjbWVudSBhW2hyZWY9XCIjcGFnZTFcIl0nKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xyXG4gICAgd2luZG93LmlzVmlld01vZGUgPSBmYWxzZTtcclxuICAgIC8vIHZpZXdfcGFnZTIoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhIGEjdmlld2VyJykuc3R5bGUuY29sb3IgPSAnYmxhY2snO1xyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhIGEjdmlld2VyJykuc3R5bGUucG9pbnRlckV2ZW50cyA9ICd1bnNldCc7XHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI21lbnUgYVtocmVmPVwiI3BhZ2UxXCJdJykuc3R5bGUuY29sb3IgPSAndW5zZXQnO1xyXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhICNtZW51IGFbaHJlZj1cIiNwYWdlMVwiXScpLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAndW5zZXQnO1xyXG4gICAgd2luZG93LmlzVmlld01vZGUgPSB0cnVlO1xyXG4gICAgLy8gbG9hZFZhcmlhbnRQcmVzZXQoKTtcclxuICB9XHJcblxyXG4gIGlmICh3aW5kb3cudmlld2VybW9kZSkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtZW51XCIpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21lbnUgW2hyZWY9JyNwYWdlMiddXCIpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21lbnUgW2hyZWY9JyNwYWdlMyddXCIpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHNob3dMYXN0Q29uc29sZUxvZyhtc2cpIHtcclxuICBpZiAod2luZG93LmlzS08pIHJldHVybjtcclxuICAvLyBpZiAoIW1zZykgcmV0dXJuO1xyXG4gIGlmICghbXNnLm1hdGNoKSByZXR1cm47XHJcbiAgaWYgKCF3aW5kb3cubmF2aWdhdG9yLm9uTGluZSAmJiAhbXNnLm1hdGNoKC9vZmZsaW5lLykpIHJldHVybjtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhdHVzdGV4dCcpLnRleHRDb250ZW50ID0gbXNnO1xyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHNob3dMb2FkaW5nKHNob3cpIHtcclxuICBsZXQgZUxvYWRpbmdPdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvYWRpbmdvdmVybGF5Jyk7XHJcbiAgaWYgKCFlTG9hZGluZ092ZXJsYXkpIHtcclxuICAgIGluamVjdChzaG93KTtcclxuICB9IGVsc2Uge1xyXG4gICAgZUxvYWRpbmdPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gJ2ZsZXgnIDogJ25vbmUnO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5qZWN0KHNob3cpIHtcclxuICBjb25zdCBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhJyk7XHJcbiAgaWYgKGUpIHtcclxuICAgIGUuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJyxgPGRpdiBpZD1cImxvYWRpbmdvdmVybGF5XCIgc3R5bGU9XCJkaXNwbGF5OiAke3Nob3cgPyAnZmxleCcgOiAnbm9uZSd9O1wiIGNsYXNzPSdsb2FkaW5nLW9uZSc+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPSdsb2FkaW5nLXR3byc+XHJcbiAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMDAwIDEwMDBcIlxyXG4gICAgICAgICAgICAgICAgICBjbGFzcz0nc3ZnJz5cclxuICAgICAgICAgICAgICAgICAgPGNpcmNsZSByPVwiODBcIiBjeD1cIjUwMFwiIGN5PVwiOTBcIiBjbGFzcz0nY2lyY2xlLW9uZScgLz5cclxuICAgICAgICAgICAgICAgICAgPGNpcmNsZSByPVwiODBcIiBjeD1cIjUwMFwiIGN5PVwiOTEwXCIgY2xhc3M9J2NpcmNsZS1vbmUnIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxjaXJjbGUgcj1cIjgwXCIgY3g9XCI5MFwiIGN5PVwiNTAwXCIgY2xhc3M9J2NpcmNsZS1vbmUnIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxjaXJjbGUgcj1cIjgwXCIgY3g9XCI5MTBcIiBjeT1cIjUwMFwiIGNsYXNzPSdjaXJjbGUtb25lJyAvPlxyXG4gICAgICAgICAgICAgICAgICA8Y2lyY2xlIHI9XCI4MFwiIGN4PVwiMjEyXCIgY3k9XCIyMTJcIiBjbGFzcz0nY2lyY2xlLW9uZScgLz5cclxuICAgICAgICAgICAgICAgICAgPGNpcmNsZSByPVwiODBcIiBjeD1cIjc4OFwiIGN5PVwiMjEyXCIgY2xhc3M9J2NpcmNsZS1vbmUnIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxjaXJjbGUgcj1cIjgwXCIgY3g9XCIyMTJcIiBjeT1cIjc4OFwiIGNsYXNzPSdjaXJjbGUtb25lJyAvPlxyXG4gICAgICAgICAgICAgICAgICA8Y2lyY2xlIHI9XCI4MFwiIGN4PVwiNzg4XCIgY3k9XCI3ODhcIiBjbGFzcz0nY2lyY2xlLW9uZScgLz5cclxuICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPHNwYW4gc3R5bGU9XCJwb3NpdGlvbjogZml4ZWQ7IHBhZGRpbmctdG9wOiAxNjVweDtcIj5Mb2FkaW5nLiBQbGVhc2Ugd2FpdC4uLjwvc3Bhbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgKTtcclxuXHJcbiAgICBkb2N1bWVudC5oZWFkLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxzdHlsZT5cclxuICAgICAgLyogTG9hZGluZyBPdmVybGF5IC0gU1RBUlQgKi9cclxuICAgICAgLmxvYWRpbmctb25lIHtcclxuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcclxuICAgICAgICB0b3A6IDBweDtcclxuICAgICAgICBsZWZ0OiAwcHg7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIHotaW5kZXg6IDIxNDc0ODM2NDc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5sb2FkaW5nLXR3byB7XHJcbiAgICAgICAgb3JkZXI6IDE7XHJcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcclxuICAgICAgICBmbGV4OiAwIDAgYXV0bztcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGFyb3VuZDtcclxuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IDIwMDBtcztcclxuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XHJcbiAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XHJcbiAgICAgICAgd2lkdGg6IDEyMHB4O1xyXG4gICAgICAgIGhlaWdodDogMTIwcHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5jaXJjbGUtb25lIHtcclxuICAgICAgICBmaWxsOiB2YXIoLS1ibGFjayk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5zdmcge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICBmaWxsOiB2YXIoLS1ibGFjayk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEBrZXlmcmFtZXMgYXJvdW5kIHtcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgMTAwJSB7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBMb2FkaW5nIE92ZXJsYXkgLSBFTkQgKi9cclxuICAgIDwvc3R5bGU+YCk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGdldEFnZUluRGF5cyhwb3N0RGF0ZSkge1xyXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgY29uc3QgZHBvc3REYXRlID0gbmV3IERhdGUocG9zdERhdGUpO1xyXG4gIHJldHVybiBNYXRoLmZsb29yKChub3cgLSBkcG9zdERhdGUpIC8gKDEwMDAqNjAqNjAqMjQpKTtcclxufSIsImltcG9ydCB7IGFwaU9mZmVyVXAgfSBmcm9tIFwiLi9hcGlPZmZlclVwXCI7XHJcbmltcG9ydCB7IGZldGNoTGlzdGluZ0RldGFpbCB9IGZyb20gXCIuL2ZldGNoTGlzdGluZ0RldGFpbFwiO1xyXG5pbXBvcnQgeyBpc1ByaWNlSW5SYW5nZSB9IGZyb20gXCIuL2ZpbHRlck91dExpc3RpbmdzTm90SW5QcmljZVJhbmdlXCI7XHJcbmltcG9ydCB7IGdldEFnZUluRGF5cyB9IGZyb20gXCIuL2dldEFnZVwiO1xyXG5pbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgZ2V0TW9kZWxNYXRjaCB9IGZyb20gXCIuL2dldE1vZGVsTWF0Y2hcIjtcclxuaW1wb3J0IHsgaGFuZGxlRmV0Y2hFcnJvcnMgfSBmcm9tIFwiLi9oYW5kbGVGZXRjaEVycm9yc1wiO1xyXG5pbXBvcnQgeyBpc1NoaXBwaW5nRW5hYmxlZCB9IGZyb20gXCIuL2lzU2hpcHBpbmdFbmFibGVkXCI7XHJcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4vc2xlZXBcIjtcclxuaW1wb3J0IHsgdGV4dENvbnRhaW5zU2tpcFdvcmQgfSBmcm9tIFwiLi90ZXh0Q29udGFpbnNTa2lwV29yZFwiO1xyXG5pbXBvcnQgeyBfYXBpU2VuZEJ1ZyB9IGZyb20gXCIuL19hcGlTZW5kQnVnXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2tpcHMoKSB7XHJcbiAgYXN5bmMgZnVuY3Rpb24gc2F2ZUlkVG9Mb2dCYXRjaChsaXN0bmFtZSwgYUlkcywgbG9jYWxDaGVjaykge1xyXG4gICAgLy8gY29uc3QgdXJsID0gYGh0dHA6Ly9sb2NhbGhvc3Q6NTAwMS90cmFkZS1hcHBsZXMvdXMtY2VudHJhbDEvb2ZmZXJ1cGJvdD9iYXRjaD0xJmxpc3RuYW1lPSR7bGlzdG5hbWV9YDtcclxuICAgIGxldCB1cmwgPSBgaHR0cHM6Ly91cy1jZW50cmFsMS10cmFkZS1hcHBsZXMuY2xvdWRmdW5jdGlvbnMubmV0L29mZmVydXBib3Q/YmF0Y2g9MSZsaXN0bmFtZT0ke2xpc3RuYW1lfWA7XHJcbiAgICBpZiAobG9jYWxDaGVjaykgdXJsICs9IGAmbG9jYWxjaGVjaz0ke3dpbmRvdy50YVBhcnRuZXJJZH1gO1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBcGkoaVRyaWVzKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaCh1cmwsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShhSWRzKVxyXG4gICAgICB9KVxyXG4gICAgICAgIC50aGVuKGFzeW5jIHJlcyA9PiBoYW5kbGVGZXRjaEVycm9ycyhyZXMpKVxyXG4gICAgICAgIC50aGVuKHggPT4geC50ZXh0KCkpXHJcbiAgICAgICAgLmNhdGNoKGFzeW5jIGVyciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQgKHNhdmVJZFRvTG9nQmF0Y2gpJywgZXJyLCBpVHJpZXMpO1xyXG4gICAgICAgICAgaWYgKGlUcmllcyAmJiBpVHJpZXMgPiA2KSByZXR1cm4gJyc7XHJcbiAgICAgICAgICBhd2FpdCBzbGVlcCgxMDAwMCk7XHJcbiAgICAgICAgICBpZiAoIWlUcmllcykgaVRyaWVzID0gMDtcclxuICAgICAgICAgIGlUcmllcyArPSAxO1xyXG4gICAgICAgICAgcmV0dXJuIGZldGNoQXBpKGlUcmllcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaEFwaSgpXHJcbiAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IHJlc0pzb24gPSBKU09OLnBhcnNlKHJlcyk7XHJcbiAgICAgICAgICBpZiAoIXJlc0pzb24uc3VjY2VzcyB8fCByZXNKc29uLnN1Y2Nlc3MgIT09ICdhZGRlZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9hcGlTZW5kQnVnKHtcclxuICAgICAgICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byBjb3B5IGlkcyBmcm9tIHN0b3JhZ2UgdG8gZGInLCBsaXN0bmFtZSwgYUlkcywgcmVzcG9uc2U6IHJlc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICByZXR1cm4gX2FwaVNlbmRCdWcoe1xyXG4gICAgICAgICAgICBlcnJvcjogJ0ZhaWxlZCBjb3B5IGlkcyBmcm9tIHN0b3JhZ2UgdG8gZGInLCBsaXN0bmFtZSwgYUlkcywgcmVzcG9uc2U6IHJlc1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG4gIGFzeW5jIGZ1bmN0aW9uIHNhdmVJZFRvTG9nKGxpc3RuYW1lLCBpZCwgbG9jYWxDaGVjaykge1xyXG4gICAgbGV0IHVybCA9IGBodHRwczovL3VzLWNlbnRyYWwxLXRyYWRlLWFwcGxlcy5jbG91ZGZ1bmN0aW9ucy5uZXQvb2ZmZXJ1cGJvdD9saXN0bmFtZT0ke2xpc3RuYW1lfSZpZD0ke2lkfSZlbWFpbD0ke3dpbmRvdy50YUVtYWlsfWA7XHJcbiAgICAvLyBsZXQgdXJsID0gYGh0dHBzOi8vNWU5MS0xODAtMTk1LTI0NS0xODMubmdyb2suaW8vdHJhZGUtYXBwbGVzL3VzLWNlbnRyYWwxL29mZmVydXBib3Q/bGlzdG5hbWU9JHtsaXN0bmFtZX0maWQ9JHtpZH0mZW1haWw9JHt3aW5kb3cudGFFbWFpbH1gO1xyXG4gICAgaWYgKGxvY2FsQ2hlY2spIHVybCArPSBgJmxvY2FsY2hlY2s9JHt3aW5kb3cudGFQYXJ0bmVySWR9YDtcclxuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoQXBpKGlUcmllcykge1xyXG4gICAgICByZXR1cm4gZmV0Y2godXJsLCB7IG1ldGhvZDogJ1BPU1QnIH0pXHJcbiAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAuY2F0Y2goYXN5bmMgZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIEZhaWxlZCAoc2F2ZUlkVG9Mb2cpJywgZXJyLCBpVHJpZXMpO1xyXG4gICAgICAgICAgaWYgKGlUcmllcyAmJiBpVHJpZXMgPiA2KSByZXR1cm4gJyc7XHJcbiAgICAgICAgICBhd2FpdCBzbGVlcCgxMDAwMCk7XHJcbiAgICAgICAgICBpZiAoIWlUcmllcykgaVRyaWVzID0gMDtcclxuICAgICAgICAgIGlUcmllcyArPSAxO1xyXG4gICAgICAgICAgcmV0dXJuIGZldGNoQXBpKGlUcmllcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaEFwaSgpXHJcbiAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IHJlc0pzb24gPSBKU09OLnBhcnNlKHJlcyk7XHJcbiAgICAgICAgICBpZiAoIXJlc0pzb24uc3VjY2VzcyB8fCByZXNKc29uLnN1Y2Nlc3MgIT09ICdhZGRlZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9hcGlTZW5kQnVnKHtcclxuICAgICAgICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byBzYXZlIHRvIGxvZycsIGxpc3RuYW1lLCBpZCwgcmVzcG9uc2U6IHJlc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICByZXR1cm4gX2FwaVNlbmRCdWcoe1xyXG4gICAgICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byBzYXZlIHRvIGxvZycsIGxpc3RuYW1lLCBpZCwgcmVzcG9uc2U6IHJlc1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG4gIGFzeW5jIGZ1bmN0aW9uIHN5bmNMb2dUb0RiKGxpc3RuYW1lLCBkYmxpc3RuYW1lKSB7XHJcbiAgICBsZXQgcmVhZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxpc3RuYW1lKTtcclxuICAgIGlmIChyZWFkKSB7XHJcbiAgICAgIHJlYWQgPSBKU09OLnBhcnNlKHJlYWQpO1xyXG4gICAgICBpZiAocmVhZCAmJiBBcnJheS5pc0FycmF5KHJlYWQpICYmIHJlYWQubGVuZ3RoKSB7XHJcbiAgICAgICAgYXdhaXQgc2F2ZUlkVG9Mb2dCYXRjaChkYmxpc3RuYW1lLCByZWFkKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShsaXN0bmFtZSwgJ1tdJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgYXN5bmMgZnVuY3Rpb24gaXNJZEluTG9nKGxpc3RuYW1lLCBpZCwgbm9leHBpcnksIGxvY2FsQ2hlY2spIHtcclxuICAgIGxldCB1cmwgPSBgaHR0cHM6Ly91cy1jZW50cmFsMS10cmFkZS1hcHBsZXMuY2xvdWRmdW5jdGlvbnMubmV0L29mZmVydXBib3Q/aXNleGlzdD0ke2lkfSZsaXN0bmFtZT0ke2xpc3RuYW1lfWA7XHJcbiAgICAvLyBsZXQgdXJsID0gYGh0dHBzOi8vNWU5MS0xODAtMTk1LTI0NS0xODMubmdyb2suaW8vdHJhZGUtYXBwbGVzL3VzLWNlbnRyYWwxL29mZmVydXBib3Q/aXNleGlzdD0ke2lkfSZsaXN0bmFtZT0ke2xpc3RuYW1lfWA7XHJcbiAgICBpZiAobm9leHBpcnkpIHtcclxuICAgICAgdXJsICs9IGAmbm9leHBpcnk9MWA7XHJcbiAgICB9XHJcbiAgICBpZiAobG9jYWxDaGVjaykge1xyXG4gICAgICB1cmwgKz0gYCZsb2NhbGNoZWNrPSR7d2luZG93LnRhUGFydG5lcklkfWA7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zdCB1cmwgPSBgaHR0cDovL2xvY2FsaG9zdDo1MDAxL3RyYWRlLWFwcGxlcy91cy1jZW50cmFsMS9vZmZlcnVwYm90P2lzZXhpc3Q9JHtpZH0mbGlzdG5hbWU9JHtsaXN0bmFtZX1gO1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBcGkoaVRyaWVzKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaCh1cmwpXHJcbiAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IGhhbmRsZUZldGNoRXJyb3JzKHJlcykpXHJcbiAgICAgICAgLnRoZW4oeCA9PiB4LnRleHQoKSlcclxuICAgICAgICAuY2F0Y2goYXN5bmMgZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIEZhaWxlZCAoaXNJZEluTG9nKScsIGVyciwgaVRyaWVzKTtcclxuICAgICAgICAgIGlmIChpVHJpZXMgJiYgaVRyaWVzID4gNikgcmV0dXJuICcnO1xyXG4gICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMDApO1xyXG4gICAgICAgICAgaWYgKCFpVHJpZXMpIGlUcmllcyA9IDA7XHJcbiAgICAgICAgICBpVHJpZXMgKz0gMTtcclxuICAgICAgICAgIHJldHVybiBmZXRjaEFwaShpVHJpZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNJbkxvZyA9IGF3YWl0IGZldGNoQXBpKClcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcmVzSnNvbiA9IEpTT04ucGFyc2UocmVzKTtcclxuICAgICAgICAgIGlmICgnc3VjY2VzcycgaW4gcmVzSnNvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzSnNvbi5zdWNjZXNzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgX2FwaVNlbmRCdWcoe1xyXG4gICAgICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byBjaGVjayBsb2dzJywgbGlzdG5hbWUsIGlkLCByZXNwb25zZTogcmVzXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBfYXBpU2VuZEJ1Zyh7XHJcbiAgICAgICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGNoZWNrIGxvZ3MnLCBsaXN0bmFtZSwgaWQsIHJlc3BvbnNlOiByZXNcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICByZXR1cm4gaXNJbkxvZztcclxuICB9XHJcbiAgYXN5bmMgZnVuY3Rpb24gZ2V0T3RoZXJJcGhvbmVMaXN0aW5ncyhjdXJyZW50TGlzdGluZ0lkLCB1aWQsIG93bmVybmFtZSkge1xyXG4gICAgaWYgKCF1aWQpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ0ZldGNoaW5nIG90aGVyIGlQaG9uZSBsaXN0aW5ncyBvZiB1c2VyLicsIHVpZCk7XHJcbiAgICAgIGNvbnN0IGxpc3RpbmdEZXRhaWwgPSBhd2FpdCBmZXRjaExpc3RpbmdEZXRhaWwoY3VycmVudExpc3RpbmdJZCk7XHJcbiAgICAgIGlmICghbGlzdGluZ0RldGFpbCB8fCAhbGlzdGluZ0RldGFpbC5vd25lcikge1xyXG4gICAgICAgIF9hcGlTZW5kQnVnKHsgZXJyb3I6ICdnZXRPdGhlcklwaG9uZUxpc3RpbmdzIGZhaWxlZC4gTm8gbGlzdGluZyBvd25lciByZXR1cm5lZC4nIH0pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB1aWQgPSBsaXN0aW5nRGV0YWlsLm93bmVyLmlkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb3RoZXJMaXN0aW5ncyA9IFtdO1xyXG4gICAgLy8gQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCBgRmV0Y2hpbmcgb3RoZXIgbGlzdGluZ3Mgb2YgdXNlciAoJHt1aWR9KS5gKTtcclxuICAgIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgYEZldGNoaW5nIG90aGVyIGxpc3RpbmdzIG9mICR7b3duZXJuYW1lfSAoJHt1aWR9KWApO1xyXG4gICAgY29uc3QgbGlzdGluZ3MgPSBhd2FpdCBhcGlPZmZlclVwKCkuZ2V0VXNlckxpc3RpbmdzKHVpZCk7XHJcblxyXG4gICAgY29uc3Qga2V5d29yZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI2tleXdvcmRzJykudmFsdWU7XHJcbiAgICBjb25zdCBhbGxLZXl3b3JkcyA9IGtleXdvcmRzLnNwbGl0KCcsJykubWFwKHggPT4geC50cmltKCkpLmpvaW4oJ3wnKTtcclxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBsaXN0aW5ncykge1xyXG4gICAgICBpZiAoaXRlbS5pZCAhPT0gY3VycmVudExpc3RpbmdJZCAmJiBpdGVtLmxpc3RpbmdJZCAhPT0gY3VycmVudExpc3RpbmdJZCAmJiBpdGVtLnRpdGxlKSB7XHJcbiAgICAgICAgY29uc3QgdGl0bGUgPSBpdGVtLnRpdGxlO1xyXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gaXRlbS5kZXNjcmlwdGlvbjtcclxuICAgICAgICBjb25zdCBwb3N0RGF0ZSA9IGl0ZW0ucG9zdERhdGU7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSBOdW1iZXIoaXRlbS5wcmljZSk7XHJcbiAgICAgICAgY29uc3Qgcmd4ID0gbmV3IFJlZ0V4cChhbGxLZXl3b3JkcywgJ2knKTtcclxuXHJcbiAgICAgICAgaWYgKHBvc3REYXRlKSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygncG9zdERhdGUnLCBwb3N0RGF0ZSk7XHJcbiAgICAgICAgICBjb25zdCBlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3RpbmdfbWF4X2FnZScpO1xyXG4gICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF4QWdlID0gZS52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgYWdlSW5EYXlzID0gZ2V0QWdlSW5EYXlzKHBvc3REYXRlKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FnZUluRGF5cycsIGFnZUluRGF5cyk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhZ2VJbkRheXMgPiBtYXhBZ2UnLCBhZ2VJbkRheXMgPiBtYXhBZ2UpO1xyXG4gICAgICAgICAgICBpZiAoYWdlSW5EYXlzID4gbWF4QWdlKSB7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1NLSVBQRUQgT0xEIExJU1RJTkcuJyk7XHJcbiAgICAgICAgICAgICAgQ09OU09MRV9NRVNTQUdFKCdza2lwX29sZF9saXN0aW5nJywge1xyXG4gICAgICAgICAgICAgICAgYWdlOiBhZ2VJbkRheXMsXHJcbiAgICAgICAgICAgICAgICBsaXN0aW5nX2lkOiBpdGVtLmlkLFxyXG4gICAgICAgICAgICAgICAgbGlzdGluZ19uYW1lOiBpdGVtLnRpdGxlLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpc1NraXBwZWQgPSBhd2FpdCBza2lwcygpLmlzU2tpcExpc3RpbmcoaXRlbS5saXN0aW5nSWQpO1xyXG4gICAgICAgIGlmIChpc1NraXBwZWQpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdpc3NraXBwZWQnKTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoYXNLZXl3b3JkSW5UaXRsZSA9IHRpdGxlLm1hdGNoKHJneCk7XHJcbiAgICAgICAgaWYgKCFoYXNLZXl3b3JkSW5UaXRsZSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBoYXNTa2lwV29yZCA9IHRleHRDb250YWluc1NraXBXb3JkKHRpdGxlKTtcclxuICAgICAgICBpZiAoIWhhc1NraXBXb3JkICYmIGRlc2NyaXB0aW9uKSBoYXNTa2lwV29yZCA9IHRleHRDb250YWluc1NraXBXb3JkKGRlc2NyaXB0aW9uKTtcclxuICAgICAgICBpZiAoaGFzU2tpcFdvcmQpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdoYXMgc2tpcCB3b3JkJyk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByaWNlSW5SYW5nZSA9IGlzUHJpY2VJblJhbmdlKHByaWNlKTtcclxuICAgICAgICBpZiAoIXByaWNlSW5SYW5nZSkge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ3ByaWNlIG5vdCBpbiByYW5nZScpO1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGNvbnN0IHNoaXBwaW5nRW5hYmxlZCA9IGl0ZW0uZnVsZmlsbG1lbnREZXRhaWxzICYmIGl0ZW0uZnVsZmlsbG1lbnREZXRhaWxzLnNoaXBwaW5nRW5hYmxlZDsgLy8gQlVHR0VELlxyXG4gICAgICAgIGNvbnN0IHNoaXBwaW5nRW5hYmxlZCA9IGF3YWl0IGlzU2hpcHBpbmdFbmFibGVkKGl0ZW0ubGlzdGluZ0lkKTtcclxuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N3aXRjaC1za2lwc2hpcHBpbmdlbmFibGVkJykuY2hlY2tlZCkge1xyXG4gICAgICAgICAgaWYgKHNoaXBwaW5nRW5hYmxlZCAmJiBpdGVtLmxpc3RpbmdJZCkge1xyXG4gICAgICAgICAgICBhd2FpdCBza2lwcygpLnNhdmVUb1NraXBMaXN0aW5nKGl0ZW0ubGlzdGluZ0lkKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG90aGVyTGlzdGluZ3MucHVzaChpdGVtLmlkKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KG90aGVyTGlzdGluZ3MpXTtcclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIHNhdmVUb1BhcnRuZXJNZXNzYWdlZDogb3duZXJpZCA9PiB7XHJcbiAgICAgIHJldHVybiBzYXZlSWRUb0xvZygncGFydG5lcm1lc3NhZ2UnLCBvd25lcmlkKTtcclxuICAgIH0sXHJcbiAgICBzYXZlVG9NZXNzYWdlZFVzZXJzOiBvd25lcmlkID0+IHNhdmVJZFRvTG9nKCd1c2VycycsIG93bmVyaWQsIHRydWUpLFxyXG4gICAgc2F2ZVRvU2tpcExpc3Rpbmc6IGxpc3RpbmdpZCA9PiB7XHJcbiAgICAgIGNvbnN0IGlzU2luZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW25hbWU9Ym90X21vZGVdOmNoZWNrZWQnKS52YWx1ZSA9PT0gJ3NpbmdsZSc7XHJcbiAgICAgIGxldCBsaXN0TmFtZSA9ICdsaXN0aW5ncyc7IC8vIEhBRCBUTyBSRVVTRSBUTyBTS0lQIEVYSVNUSU5HIExJU1RJTkdTLlxyXG4gICAgICBpZighaXNTaW5nbGUpIHtcclxuICAgICAgICBsaXN0TmFtZSA9ICdsaXN0aW5nc19tdWx0aSc7XHJcbiAgICAgIH1cclxuICAgICAgc2F2ZUlkVG9Mb2cobGlzdE5hbWUsIGxpc3RpbmdpZCwgdHJ1ZSlcclxuICAgIH0sXHJcbiAgICBzYXZlVG9Ta2lwTGlzdGluZ0JhdGNoOiBhTGlzdGluZ2lkcyA9PiB7XHJcbiAgICAgIGNvbnN0IGlzU2luZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW25hbWU9Ym90X21vZGVdOmNoZWNrZWQnKS52YWx1ZSA9PT0gJ3NpbmdsZSc7XHJcbiAgICAgIGxldCBsaXN0TmFtZSA9ICdsaXN0aW5ncyc7XHJcbiAgICAgIGlmKCFpc1NpbmdsZSkge1xyXG4gICAgICAgIGxpc3ROYW1lID0gJ2xpc3RpbmdzX211bHRpJztcclxuICAgICAgfVxyXG4gICAgICBzYXZlSWRUb0xvZ0JhdGNoKGxpc3ROYW1lLCBhTGlzdGluZ2lkcywgdHJ1ZSlcclxuICAgIH0sXHJcbiAgICBpc1NraXBMaXN0aW5nOiBhc3luYyBfaWQgPT4ge1xyXG4gICAgICBjb25zdCBpc1NpbmdsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPWJvdF9tb2RlXTpjaGVja2VkJykudmFsdWUgPT09ICdzaW5nbGUnO1xyXG4gICAgICBsZXQgbGlzdE5hbWUgPSAnbGlzdGluZ3MnO1xyXG4gICAgICBpZighaXNTaW5nbGUpIHtcclxuICAgICAgICBsaXN0TmFtZSA9ICdsaXN0aW5nc19tdWx0aSc7XHJcbiAgICAgIH1cclxuICAgICAgYXdhaXQgc3luY0xvZ1RvRGIoJ3NraXBfbGlzdGluZ3MnLCBsaXN0TmFtZSk7XHJcbiAgICAgIHJldHVybiBpc0lkSW5Mb2cobGlzdE5hbWUsIF9pZCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0T3RoZXJJcGhvbmVMaXN0aW5nczogZ2V0T3RoZXJJcGhvbmVMaXN0aW5ncyxcclxuICAgIGlzU2tpcE1lc3NhZ2VkVXNlcjogYXN5bmMgX2lkID0+IHsgLy8gVVNFRCBGT1IgQ0hFQ0sgSUYgQUxSRUFEWSBTRU5UIFBBUlRORVIgTUVTU0FHRVxyXG4gICAgICBhd2FpdCBzeW5jTG9nVG9EYignc2tpcF9tZXNzYWdlZHVzZXJzJywgJ3VzZXJzJyk7XHJcbiAgICAgIHJldHVybiBpc0lkSW5Mb2coJ3VzZXJzJywgX2lkLCAnJywgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgaXNTa2lwUGFydG5lck1lc3NhZ2U6IGFzeW5jIF9pZCA9PiB7XHJcbiAgICAgIGF3YWl0IHN5bmNMb2dUb0RiKCdza2lwX3BhcnRuZXJtZXNzYWdlZCcsICdwYXJ0bmVybWVzc2FnZScpO1xyXG4gICAgICByZXR1cm4gaXNJZEluTG9nKCdwYXJ0bmVybWVzc2FnZScsIF9pZCwgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gc2xlZXAobXMpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XHJcbn0iLCJpbXBvcnQgeyBsb2dnZWRpbkNoZWNrIH0gZnJvbSBcIi4vbG9nZ2VkaW5DaGVja1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhblJ1bigpIHtcclxuICBpZiAoIWxvZ2dlZGluQ2hlY2soKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICBsZXQgcnVuRnJvbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNydW5mcm9tJykudmFsdWU7XHJcbiAgbGV0IHJ1blVudGlsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3J1bnVudGlsJykudmFsdWU7XHJcbiAgaWYgKHJ1blVudGlsICYmIHJ1bkZyb20pIHtcclxuICAgIHJ1bkZyb20gPSBydW5Gcm9tLnNwbGl0KCc6Jyk7XHJcbiAgICBydW5VbnRpbCA9IHJ1blVudGlsLnNwbGl0KCc6Jyk7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgZEZyb20gPSBuZXcgRGF0ZSgpO1xyXG4gICAgZEZyb20uc2V0SG91cnMocnVuRnJvbVswXSwgcnVuRnJvbVsxXSk7XHJcbiAgICBjb25zdCBkVW50aWwgPSBuZXcgRGF0ZSgpO1xyXG4gICAgZFVudGlsLnNldEhvdXJzKHJ1blVudGlsWzBdLCBydW5VbnRpbFsxXSk7XHJcblxyXG4gICAgaWYgKGRGcm9tID4gZFVudGlsKSBkVW50aWwuc2V0RGF0ZShkVW50aWwuZ2V0RGF0ZSgpICsgMSk7XHJcbiAgICBpZiAobm93ID49IGRGcm9tICYmIG5vdyA8PSBkVW50aWwpIHtcclxuICAgICAgLy8gYWxlcnQoJ1J1biBVbnRpbCBoYXMgYWxyZWFkeSBwYXNzZWQuJyk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgYWxlcnQoJ05vIHNjaGVkdWxlIHNldCEgQm90IHdpbGwgbm90IHJ1bi4nKTtcclxuICByZXR1cm4gZmFsc2U7XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gbG9nZ2VkaW5DaGVjaygpIHtcclxuICBjb25zdCBsb2dpbkJ1dHRvbiA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykpLmZpbmQoZWwgPT4gZWwudGV4dENvbnRlbnQgPT09ICdMb2cgaW4nKTtcclxuICBpZiAobG9naW5CdXR0b24pIHtcclxuICAgIGFsZXJ0KFwiWW91IGFyZSBub3QgbG9nZ2VkIGluISBZb3UgaGF2ZSB0byBsb2dpbiB0byBvZmZlcnVwIGZpcnN0LlwiKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgLy8gaWYgKHdpbmRvdy50YUVtYWlsKSB7XHJcbiAgLy8gICBjb25zdCBvZmZlcnVwRW1haWwgPSBnZXRVc2VyRW1haWwoKTtcclxuICAvLyAgIGlmIChvZmZlcnVwRW1haWwgIT09IHdpbmRvdy50YUVtYWlsKSB7XHJcbiAgLy8gICAgIGNvbnN0IG1zZyA9IGBZb3UgYXJlIGN1cnJlbnRseSBsb2dnZWQtaW4gYXMgJHtvZmZlcnVwRW1haWx9IGluIG9mZmVydXAuIFlvdSBtdXN0IGxvZ2luIGluIG9mZmVydXAgdXNpbmcgeW91ciBwYXJ0bmVyIGVtYWlsICR7d2luZG93LnRhRW1haWx9YDtcclxuICAvLyAgICAgc2hvd0xhc3RDb25zb2xlTG9nKG1zZyk7XHJcbiAgLy8gICAgIGFsZXJ0KGBZb3UgYXJlIGN1cnJlbnRseSBsb2dnZWQtaW4gYXMgJHtvZmZlcnVwRW1haWx9IGluIG9mZmVydXAuIFlvdSBtdXN0IGxvZy1pbiBpbiBvZmZlcnVwIHVzaW5nIHlvdXIgcGFydG5lciBlbWFpbCAke3dpbmRvdy50YUVtYWlsfWApO1xyXG4gIC8vICAgICByZXR1cm4gZmFsc2U7XHJcbiAgLy8gICB9XHJcbiAgLy8gfVxyXG4gIHJldHVybiB0cnVlO1xyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGdldEtleXdvcmQoKSB7XHJcbiAgLy8gR0VUIFNUT1JFRCBaSVAgSU5ERVhcclxuICBsZXQgbGFzdFppcElkeCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYXN0WmlwSWR4JykgfHwgMDtcclxuICBsYXN0WmlwSWR4ID0gcGFyc2VJbnQobGFzdFppcElkeCwgMTApO1xyXG5cclxuICAvLyBHRVQgU1RPUkVEIEtFWVdPUkQgSU5ERVhcclxuICBsZXQgbGFzdEt3SWR4ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhc3RLd0lkeCcpO1xyXG4gIGlmICghbGFzdEt3SWR4KSB7XHJcbiAgICBsYXN0S3dJZHggPSAwO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsYXN0S3dJZHggPSBwYXJzZUludChsYXN0S3dJZHgsIDEwKSArIDE7XHJcbiAgfVxyXG4gIGxldCBrZXl3b3JkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YSAja2V5d29yZHMnKS52YWx1ZTtcclxuICBpZiAoIWtleXdvcmRzKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdObyBrZXl3b3JkcyBmb3VuZC4nKTtcclxuICAgIGFsZXJ0KCdObyBrZXl3b3JkcyBmb3VuZC4nKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAga2V5d29yZHMgPSBrZXl3b3Jkcy5zcGxpdCgnLCcpLm1hcCh4ID0+IHgudHJpbSgpKTtcclxuICBsZXQgemlwb2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YSAjemlwY29kZXMnKS52YWx1ZTtcclxuICBpZiAoIXppcG9kZXMpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ05vIHppcGNvZGVzIGlucHV0IGZvdW5kLicpO1xyXG4gICAgYWxlcnQoJ05vIHppcGNvZGVzIGlucHV0IGZvdW5kLicpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB6aXBvZGVzID0gemlwb2Rlcy5zcGxpdCgnLCcpLm1hcCh4ID0+IHgudHJpbSgpKTtcclxuICBpZiAobGFzdEt3SWR4ID49IGtleXdvcmRzLmxlbmd0aCkge1xyXG4gICAgbGFzdEt3SWR4ID0gMDtcclxuXHJcbiAgICAvLyBXRSBPTkxZIENIQU5HRSBaSVBDT0RFIFdIRU4gQUxMIEtFWVdPUkRTIEFSRSBVU0VELlxyXG4gICAgbGFzdFppcElkeCArPSAxO1xyXG4gICAgaWYgKGxhc3RaaXBJZHggPj0gemlwb2Rlcy5sZW5ndGgpIGxhc3RaaXBJZHggPSAwO1xyXG4gIH1cclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdEt3SWR4JywgbGFzdEt3SWR4KTtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdFppcElkeCcsIGxhc3RaaXBJZHgpO1xyXG4gIGlmICghU3RyaW5nKGtleXdvcmRzW2xhc3RLd0lkeF0pLnRyaW0oKS5sZW5ndGgpIHJldHVybiBnZXRLZXl3b3JkKCk7XHJcbiAgcmV0dXJuIHsga2V5d29yZDoga2V5d29yZHNbbGFzdEt3SWR4XSwgemlwY29kZTogemlwb2Rlc1tsYXN0WmlwSWR4XSB9O1xyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGlzU3BhbUhhbHQoKSB7XHJcbiAgbGV0IHRzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RzU3BhbURldGVjdGVkJyk7XHJcbiAgaWYgKHRzKSB7XHJcbiAgICB0cyA9IHBhcnNlSW50KHRzLCAxMCk7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIC8vIGNvbnN0IHRpbWVQYXNzZWQgPSBub3cgLSB0cztcclxuICAgIC8vIGNvbnN0IHdhaXRJZlNwYW1EZXRlY3RlZE1zID0gd2FpdElmU3BhbURldGVjdGVkICogNjAgKiAxMDAwO1xyXG4gICAgLy8gaWYgKHRpbWVQYXNzZWQgPCB3YWl0SWZTcGFtRGV0ZWN0ZWRNcykgcmV0dXJuIHdhaXRJZlNwYW1EZXRlY3RlZE1zIC0gdGltZVBhc3NlZDtcclxuICAgIGlmIChub3cgPCB0cykgcmV0dXJuIHRzIC0gbm93O1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn0iLCJpbXBvcnQgeyBhcGlPZmZlclVwIH0gZnJvbSBcIi4vYXBpT2ZmZXJVcFwiO1xyXG5pbXBvcnQgeyBpbnRlcnZhbENvbnZlcnNhdGlvbnNDaGVjayB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiLi9zbGVlcFwiO1xyXG5pbXBvcnQgeyBzdGF0cyB9IGZyb20gXCIuL3N0YXRzXCI7XHJcbi8vIGltcG9ydCB7IHdhaXRGb3JTZWNvbmRzIH0gZnJvbSBcIi4vd2FpdEZvclNlY29uZHNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXhDb252b0NoZWNrKCkge1xyXG4gIC8vIGNvbnNvbGUubG9nKCdtYXhDb252b0NoZWNrJyk7XHJcbiAgaWYgKCF3aW5kb3cuaXNSdW4pIHJldHVybjtcclxuICBjb25zdCBtYXhDb252b3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF4Y29uY3VycmVudGNvbnZlcnNhdGlvbnMnKS52YWx1ZTtcclxuICBpZiAobWF4Q29udm9zKSB7XHJcbiAgICBjb25zdCBjb252b3MgPSBhd2FpdCBhcGlPZmZlclVwKCkuY291bnRDb252ZXJzYXRpb25zKCk7XHJcbiAgICBpZiAoY29udm9zKSBzdGF0cygpLnNldFRocmVhZHNDb3VudChjb252b3MpO1xyXG4gICAgaWYgKGNvbnZvcyA+PSBtYXhDb252b3MpIHtcclxuICAgICAgaWYgKCF3aW5kb3cubWF4Q29udm9SZWFjaGVkKSB7XHJcbiAgICAgICAgd2luZG93Lm1heENvbnZvUmVhY2hlZCA9IHRydWU7XHJcbiAgICAgICAgQ09OU09MRV9NRVNTQUdFKCdoYWx0ZWRfdGhyZWFkcycpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdNYXggY29uY3VycmVudCBjb252ZXJzYXRpb25zIGhhcyBiZWVuIHJlYWNoZWQuIEJvdCBoYWx0ZWQuJyk7XHJcbiAgICAgIH1cclxuICAgICAgYXdhaXQgc2xlZXAoaW50ZXJ2YWxDb252ZXJzYXRpb25zQ2hlY2spO1xyXG4gICAgICAvLyBhd2FpdCB3YWl0Rm9yU2Vjb25kcyhpbnRlcnZhbENvbnZlcnNhdGlvbnNDaGVjaywgJ01heCBjb25jdXJyZW50IGNvbnZlcnNhdGlvbnMgaGFzIGJlZW4gcmVhY2hlZC4gQm90IGhhbHRlZC4nKTtcclxuICAgICAgcmV0dXJuIG1heENvbnZvQ2hlY2soKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdpbmRvdy5tYXhDb252b1JlYWNoZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgeyBjbGVhckxhc3RLZXl3b3JkIH0gZnJvbSBcIi4vY2xlYXJMYXN0S2V5d29yZFwiO1xyXG5pbXBvcnQgeyBzZXRWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuL3NldFZpZXdlclN0YXRlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcnVuVW50aWxTd2l0Y2hPZmYoKSB7XHJcbiAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3dpdGNoLXJ1bnVudGlsJykucGFyZW50RWxlbWVudC5NYXRlcmlhbFN3aXRjaCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3N3aXRjaCBub3QgeWV0IGF2YWlsYWJsZS4nKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBydW5VbnRpbFN3aXRjaE9mZigpO1xyXG4gICAgfSwgMjAwMCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHNldFZpZXdlclN0YXRlKHRydWUpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzd2l0Y2gtcnVudW50aWwnKS5wYXJlbnRFbGVtZW50Lk1hdGVyaWFsU3dpdGNoLm9mZigpO1xyXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGBpbnB1dF9zd2l0Y2gtcnVudW50aWxgLCBmYWxzZSk7XHJcbiAgY2xlYXJMYXN0S2V5d29yZCgpO1xyXG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNfX25leHQnKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNhdGNoQm9keUNsaWNrKTtcclxufSIsImV4cG9ydCBmdW5jdGlvbiBjbGVhckxhc3RLZXl3b3JkKCkge1xyXG4gIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdsYXN0S3dJZHgnKTtcclxufSIsImltcG9ydCB7IGNhblJ1biB9IGZyb20gXCIuL2NhblJ1blwiO1xyXG5pbXBvcnQgeyBDT05TT0xFX01FU1NBR0UgfSBmcm9tIFwiLi9nZXRDb25zb2xlTWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgc3RhcnQgfSBmcm9tIFwiLi9zdGFydFwiO1xyXG5pbXBvcnQgeyBzdGF0cyB9IGZyb20gXCIuL3N0YXRzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2FpdEZvclNjaGVkdWxlKCkge1xyXG4gIGlmICh3aW5kb3cuaXNXYWl0aW5nRm9yU2NoZWR1bGUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdBbHJlYWR5IHdhaXRpbmcgZm9yIHNjaGVkdWxlLi4nKTtcclxuICAgIENPTlNPTEVfTUVTU0FHRSgnaGFsdGVkX3NjaGVkdWxlJyk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHdpbmRvdy5pc1dhaXRpbmdGb3JTY2hlZHVsZSA9IHRydWU7XHJcbiAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dpdGNoLXJ1bnVudGlsJykuY2hlY2tlZCkge1xyXG4gICAgd2luZG93LmlzV2FpdGluZ0ZvclNjaGVkdWxlID0gZmFsc2U7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGNvbnNvbGUubG9nKCdCb3QgaXMgaGFsdGVkLiBXaWxsIHJ1biBvbiBuZXh0IHNjaGVkdWxlLi4nKTtcclxuICBDT05TT0xFX01FU1NBR0UoJ2hhbHRlZF9zY2hlZHVsZScpO1xyXG4gIGlmICghY2FuUnVuKCkpIHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB3aW5kb3cuaXNXYWl0aW5nRm9yU2NoZWR1bGUgPSBmYWxzZTtcclxuICAgICAgd2FpdEZvclNjaGVkdWxlKCk7XHJcbiAgICB9LCA1MDAwKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgd2luZG93LmlzV2FpdGluZ0ZvclNjaGVkdWxlID0gZmFsc2U7XHJcbiAgLy8gY29uc29sZS5sb2coJ1NjaGVkdWxlIG1hdGNoZWQhIFN0YXJ0aW5nIGJvdC4nKTtcclxuICB3aW5kb3cuaXNSdW4gPSAxO1xyXG4gIHN0YXRzKCkucmVzZXRDdXJyZW50U3RyZWFrKCk7XHJcbiAgc3RhdHMoKS5hZGRSdW4oKTtcclxuICBzdGFydCgpO1xyXG59IiwiaW1wb3J0IHsgY2FuUnVuIH0gZnJvbSBcIi4vY2FuUnVuXCI7XHJcbmltcG9ydCB7IGRlbGF5UGVyWE1lc3NhZ2VzLCBzaG93QWxlcnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IENPTlNPTEVfTUVTU0FHRSB9IGZyb20gXCIuL2dldENvbnNvbGVNZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyBnZXRLZXl3b3JkIH0gZnJvbSBcIi4vZ2V0S2V5d29yZFwiO1xyXG5pbXBvcnQgeyBpc1NwYW1IYWx0IH0gZnJvbSBcIi4vaXNTcGFtSGFsdFwiO1xyXG5pbXBvcnQgeyBsb2FkU3RhdHMgfSBmcm9tIFwiLi9sb2FkU3RhdHNcIjtcclxuaW1wb3J0IHsgbWF4Q29udm9DaGVjayB9IGZyb20gXCIuL21heENvbnZvQ2hlY2tcIjtcclxuaW1wb3J0IHsgcHJvY2Vzc0tleXdvcmQgfSBmcm9tIFwiLi9wcm9jZXNzS2V5d29yZFwiO1xyXG5pbXBvcnQgeyBydW5VbnRpbFN3aXRjaE9mZiB9IGZyb20gXCIuL3J1blVudGlsU3dpdGNoT2ZmXCI7XHJcbmltcG9ydCB7IHNob3dMYXN0Q29uc29sZUxvZyB9IGZyb20gXCIuL3Nob3dMYXN0Q29uc29sZUxvZ1wiO1xyXG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gXCIuL3NsZWVwXCI7XHJcbmltcG9ydCB7IHVwZGF0ZUlucHV0c1N0YXRlcyB9IGZyb20gXCIuL3VwZGF0ZUlucHV0c1N0YXRlc1wiO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZVNwaW50YXhlcyB9IGZyb20gXCIuL3ZhbGlkYXRlU3BpbnRheGVzXCI7XHJcbmltcG9ydCB7IHdhaXRGb3JTY2hlZHVsZSB9IGZyb20gXCIuL3dhaXRGb3JTY2hlZHVsZVwiO1xyXG5pbXBvcnQgeyB3YWl0Rm9yU2Vjb25kcyB9IGZyb20gXCIuL3dhaXRGb3JTZWNvbmRzXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnQoKSB7XHJcbiAgaWYgKHdpbmRvdy52aWV3ZXJtb2RlKSB7XHJcbiAgICBzaG93TGFzdENvbnNvbGVMb2coJ1RhYiBpcyBpbiB2aWV3ZXIgbW9kZS4nKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUlucHV0c1N0YXRlcyhmYWxzZSk7XHJcbiAgLy8gVElNRVIgQ0hFQ0tcclxuICBjb25zdCBod25kID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgaWYgKCFjYW5SdW4oKSkge1xyXG4gICAgICB3aW5kb3cuaXNSdW4gPSAwO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnQk9UIEhBUyBCRUVOIFNUT1BQRUQgQlkgU0NIRURVTEUuJyk7XHJcbiAgICAgIENPTlNPTEVfTUVTU0FHRSgnaGFsdGVkX3NjaGVkdWxlJyk7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoaHduZCk7XHJcbiAgICAgIC8vIHJ1blVudGlsU3dpdGNoT2ZmKCk7XHJcbiAgICAgIHVwZGF0ZUlucHV0c1N0YXRlcyh0cnVlKTtcclxuICAgICAgd2FpdEZvclNjaGVkdWxlKCk7XHJcbiAgICB9XHJcbiAgfSwgMTAwMDApO1xyXG4gIGlmICghY2FuUnVuKCkpIHtcclxuICAgIGNsZWFySW50ZXJ2YWwoaHduZCk7XHJcbiAgICAvLyBydW5VbnRpbFN3aXRjaE9mZigpO1xyXG4gICAgdXBkYXRlSW5wdXRzU3RhdGVzKHRydWUpO1xyXG4gICAgd2FpdEZvclNjaGVkdWxlKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlmIChzaG93QWxlcnRzKSBhbGVydCgnc3RhcnQnKTtcclxuICBpZiAoIXZhbGlkYXRlU3BpbnRheGVzKCkpIHtcclxuICAgIHJ1blVudGlsU3dpdGNoT2ZmKCk7XHJcbiAgICB1cGRhdGVJbnB1dHNTdGF0ZXModHJ1ZSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGxvYWRTdGF0cygpO1xyXG4gIGlmIChpc1NwYW1IYWx0KCkpIHtcclxuICAgIGNvbnN0IG1zSGFsdCA9IGlzU3BhbUhhbHQoKTtcclxuICAgIGNvbnN0IGZ1dHVyZVRzID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSArIG1zSGFsdDtcclxuICAgIENPTlNPTEVfTUVTU0FHRSgnaGFsdGVkX3NvZnQnLCB7XHJcbiAgICAgICdoaCc6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdISCcpLFxyXG4gICAgICAnbW0nOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnbW0nKSxcclxuICAgICAgJ3NzJzogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ3NzJylcclxuICAgIH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0NvbnZlcnNhdGlvbiBsaW1pdCByZWFjaGVkLicpO1xyXG4gICAgYXdhaXQgc2xlZXAobXNIYWx0KTtcclxuICAgIC8vIGF3YWl0IHdhaXRGb3JTZWNvbmRzKG1zSGFsdCAvIDEwMDAsICdDb252ZXJzYXRpb24gbGltaXQgcmVhY2hlZC4nKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHsga2V5d29yZCwgemlwY29kZSB9ID0gZ2V0S2V5d29yZCgpO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdTZWFyY2hpbmcnLCBrZXl3b3JkLCB6aXBjb2RlKTtcclxuICAvLyBhd2FpdCB0YXNlYXJjaChrZXl3b3JkKTtcclxuXHJcbiAgLy8gaWYgKCF0YXNlYXJjaChrZXl3b3JkKSkgcmV0dXJuO1xyXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgNDA7KSB7XHJcbiAgICAvLyBpZiAoIXdpbmRvdy5pc1J1biB8fCB3aW5kb3cubWVzc2FnZXNTZW50ID49IGxpbWl0U2VuZE1lc3NhZ2UpIHtcclxuICAgIGlmICghd2luZG93LmlzUnVuKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdCb3Qgc3RvcHBlZC4nKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICAvLyBDT05WRVJTQVRJT04gQ0hFQ0tcclxuICAgIGF3YWl0IG1heENvbnZvQ2hlY2soKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCd3aWxsIGNsaWNrIHJlc3VsdC4nKTtcclxuICAgIC8vIGFsZXJ0KCd3aWxsIGNsaWNrIHJlc3VsdC4nKTtcclxuICAgIC8vIGF3YWl0IHdhaXRGb3JFbGVtZW50KHF1ZXJ5SXRlbSk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBwcm9jZXNzS2V5d29yZChrZXl3b3JkLCB6aXBjb2RlKTtcclxuICAgIGlmIChyZXMgPT09ICdubyBtb3JlIHJlc3VsdHMnKSB7XHJcbiAgICAgIC8vIHNjcm9sbFRvQm90dG9tKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdXYWl0IDUgc2Vjcy4nKTtcclxuICAgICAgQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCAnTm8gbGlzdGluZ3MgbGVmdC4uJyk7XHJcbiAgICAgIGF3YWl0IHNsZWVwKDUwMDApO1xyXG4gICAgICAvLyBhd2FpdCB3YWl0Rm9yU2Vjb25kcyg1LCAnbm8gbGlzdGluZ3MgbGVmdC4nKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJycpO1xyXG4gICAgICBzdGFydCgpOyAvLyBTVEFSVFMgTkVXIEtFWVdPUkQgU0VBUkNILiBzaG91bGQgbm90IGFkZCBydW4gc3RhdCBoZXJlLlxyXG4gICAgICByZXR1cm47XHJcbiAgICB9IGVsc2UgaWYgKHJlcyA9PT0gJ2xpc3RpbmdzUGVyS2V5d29yZCByZWFjaGVkLicpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ2xpc3RpbmdzUGVyS2V5d29yZCBoYXMgYmVlbiByZWFjaGVkLiBTdGFydGluZyBhIG5ldyBzZWFyY2guJyk7XHJcbiAgICAgIENPTlNPTEVfTUVTU0FHRSgnY3VzdG9tJywgJ0xpc3RpbmdzIHBlciBrZXl3b3JkIGhhcyBiZWVuIHJlYWNoZWQuIFN0YXJ0aW5nIGEgbmV3IHNlYXJjaC4nKTtcclxuICAgICAgc3RhcnQoKTsgLy8gU1RBUlRTIE5FVyBLRVlXT1JEIFNFQVJDSC4gc2hvdWxkIG5vdCBhZGQgcnVuIHN0YXQgaGVyZS5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfSBlbHNlIGlmIChyZXMgPT09ICdub3QtYWxsb3dlZCcpIHtcclxuICAgICAgQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCAnWW91IGFyZSBub3QgYWxsb3dlZCB0byB1c2UgdGhpcyBib3QuJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh3aW5kb3cubWVzc2FnZXNTZW50ID4gMSAmJiB3aW5kb3cubWVzc2FnZXNTZW50ICUgMjAgPT09IDApIHtcclxuICAgICAgLy8gaWYgKG1lc3NhZ2VzU2VudCAlIDMgPT09IDApIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJzIwIG1lc3NhZ2VzIGhhcyBiZWVuIHNlbnQuIEhhbHQgZm9yIDEwIG1pbnMuJyk7XHJcbiAgICAgIGNvbnN0IGZ1dHVyZVRzID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSArIChkZWxheVBlclhNZXNzYWdlcyAqIDYwICogMTAwMCk7XHJcbiAgICAgIENPTlNPTEVfTUVTU0FHRSgndGltZW91dCcsIHtcclxuICAgICAgICBtZXNzYWdlOiAnMjAgbWVzc2FnZXMgaGFzIGJlZW4gc2VudCcsIFxyXG4gICAgICAgIGhoOiBtb21lbnQoZnV0dXJlVHMpLmZvcm1hdCgnSEgnKSxcclxuICAgICAgICBtbTogbW9tZW50KGZ1dHVyZVRzKS5mb3JtYXQoJ21tJyksXHJcbiAgICAgICAgc3M6IG1vbWVudChmdXR1cmVUcykuZm9ybWF0KCdzcycpXHJcbiAgICAgIH0pO1xyXG4gICAgICBhd2FpdCBzbGVlcChkZWxheVBlclhNZXNzYWdlcyAqIDYwICogMTAwMCk7XHJcbiAgICAgIC8vIGF3YWl0IHdhaXRGb3JTZWNvbmRzKDEwICogNjAsICcyMCBtZXNzYWdlcyBoYXMgYmVlbiBzZW50LiBIYWx0IGZvciAxMCBtaW5zLicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gcnVuVW50aWxTd2l0Y2hPZmYoKTtcclxuICAvLyB1cGRhdGVJbnB1dHNTdGF0ZXModHJ1ZSk7XHJcbiAgLy8gY29uc29sZS5sb2coJ1RFU1QgRE9ORS4nKTtcclxufSIsImltcG9ydCB7IHdyaXRlVG9EYXNoQm9hcmQgfSBmcm9tIFwiLi93cml0ZVRvRGFzaEJvYXJkXCI7XHJcbmltcG9ydCB7IF9hcGlTZW5kQnVnIH0gZnJvbSBcIi4vX2FwaVNlbmRCdWdcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGF0cygpIHtcclxuICBjb25zdCBkID0gbmV3IERhdGUoKTtcclxuICBjb25zdCBub3cgPSBgJHtkLmdldEZ1bGxZZWFyKCl9JHtkLmdldE1vbnRoKCkgKyAxfSR7ZC5nZXREYXRlKCl9YDtcclxuICBsZXQgb1N0YXRzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYHN0YXRzXyR7bm93fWApO1xyXG4gIGlmIChvU3RhdHMpIHtcclxuICAgIG9TdGF0cyA9IEpTT04ucGFyc2Uob1N0YXRzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgb1N0YXRzID0ge307XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzYXZlKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYHN0YXRzXyR7bm93fWAsIEpTT04uc3RyaW5naWZ5KG9TdGF0cykpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGFkZE9mZmVyOiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGtleSA9ICdvZmZlcnMnO1xyXG4gICAgICBpZiAoIW9TdGF0c1trZXldKSBvU3RhdHNba2V5XSA9IDA7XHJcbiAgICAgIG9TdGF0c1trZXldICs9IDE7XHJcbiAgICAgIHNhdmUoKTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHN0YXRfJHtrZXl9YCkudGV4dENvbnRlbnQgPSBvU3RhdHNba2V5XTtcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IG9mZmVyczogb1N0YXRzW2tleV0gfSk7XHJcbiAgICB9LFxyXG4gICAgYWRkUGFydG5lcjogKCkgPT4ge1xyXG4gICAgICBjb25zdCBrZXkgPSAncGFydG5lcnMnO1xyXG4gICAgICBpZiAoIW9TdGF0c1trZXldKSBvU3RhdHNba2V5XSA9IDA7XHJcbiAgICAgIG9TdGF0c1trZXldICs9IDE7XHJcbiAgICAgIHNhdmUoKTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHN0YXRfJHtrZXl9YCkudGV4dENvbnRlbnQgPSBvU3RhdHNba2V5XTtcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IHBhcnRuZXJzOiBvU3RhdHNba2V5XSB9KTtcclxuICAgIH0sXHJcbiAgICBhZGRSdW46ICgpID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gJ3J1bnMnO1xyXG4gICAgICBpZiAoIW9TdGF0c1trZXldKSBvU3RhdHNba2V5XSA9IDA7XHJcbiAgICAgIG9TdGF0c1trZXldICs9IDE7XHJcbiAgICAgIHNhdmUoKTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHN0YXRfJHtrZXl9YCkudGV4dENvbnRlbnQgPSBvU3RhdHNba2V5XTtcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IHJ1bnM6IG9TdGF0c1trZXldIH0pO1xyXG4gICAgfSxcclxuICAgIGFkZFN0cmVhazogKCkgPT4ge1xyXG4gICAgICBjb25zdCBrZXkgPSAnc3RyZWFrcyc7XHJcbiAgICAgIHdpbmRvdy5pU3RyZWFrcyArPSAxO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3RhdF8ke2tleX1gKS50ZXh0Q29udGVudCA9IHdpbmRvdy5pU3RyZWFrcztcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IHN0cmVha3M6IHdpbmRvdy5pU3RyZWFrcyB9KTtcclxuICAgIH0sXHJcbiAgICBhZGRLbzogKCkgPT4ge1xyXG4gICAgICBjb25zdCBrZXkgPSAna28nO1xyXG4gICAgICBpZiAoIW9TdGF0c1trZXldKSBvU3RhdHNba2V5XSA9IDA7XHJcbiAgICAgIG9TdGF0c1trZXldICs9IDE7XHJcbiAgICAgIHNhdmUoKTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHN0YXRfJHtrZXl9YCkudGV4dENvbnRlbnQgPSBvU3RhdHNba2V5XTtcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IEtPOiBvU3RhdHNba2V5XSB9KTtcclxuICAgIH0sXHJcbiAgICByZXNldEN1cnJlbnRTdHJlYWs6ICgpID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gJ3N0cmVha3MnO1xyXG4gICAgICB3aW5kb3cuaVN0cmVha3MgPSAwO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3RhdF8ke2tleX1gKS50ZXh0Q29udGVudCA9IHdpbmRvdy5pU3RyZWFrcztcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IHN0cmVha3M6IDAgfSk7XHJcbiAgICB9LFxyXG4gICAgYWRkVG90YWxMaXN0aW5nc1NjcmFwZWQ6IChhTGlzdGluZ3MpID0+IHtcclxuICAgICAgY29uc3Qga2V5X2lkcyA9ICdsaXN0aW5nc19zY3JhcGVkX2lkcyc7XHJcbiAgICAgIGNvbnN0IGlkcyA9IGFMaXN0aW5ncy5tYXAobyA9PiBvLnRpbGUgJiYgby50aWxlLmlkKTtcclxuICAgICAgaWYgKCFvU3RhdHNba2V5X2lkc10pIG9TdGF0c1trZXlfaWRzXSA9IFtdO1xyXG4gICAgICBjb25zdCB1bmlxdWVJZHMgPSBbLi4ubmV3IFNldChvU3RhdHNba2V5X2lkc10uY29uY2F0KGlkcykpXTtcclxuICAgICAgb1N0YXRzW2tleV9pZHNdID0gdW5pcXVlSWRzO1xyXG5cclxuICAgICAgY29uc3Qga2V5ID0gJ3NjcmFwZWQnO1xyXG4gICAgICBvU3RhdHNba2V5XSA9IHVuaXF1ZUlkcy5sZW5ndGg7XHJcblxyXG4gICAgICBzYXZlKCk7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzdGF0XyR7a2V5fWApLnRleHRDb250ZW50ID0gdW5pcXVlSWRzLmxlbmd0aDtcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IGxpc3RpbmdzX3NjcmFwZWQ6IHVuaXF1ZUlkcy5sZW5ndGggfSk7XHJcbiAgICB9LFxyXG4gICAgc2V0VGhyZWFkc0NvdW50OiAobnVtX3RocmVhZHMpID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gJ251bV90aHJlYWRzJztcclxuICAgICAgb1N0YXRzW2tleV0gPSBudW1fdGhyZWFkcztcclxuICAgICAgc2F2ZSgpO1xyXG4gICAgICB3cml0ZVRvRGFzaEJvYXJkKHsgbnVtX3RocmVhZHM6IG9TdGF0c1trZXldIH0pO1xyXG4gICAgfSxcclxuICAgIGFkZE5ld0xpc3RpbmdzOiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGtleSA9ICduZXdfbGlzdGluZ3MnO1xyXG4gICAgICBpZiAoIW9TdGF0c1trZXldKSBvU3RhdHNba2V5XSA9IDA7XHJcbiAgICAgIG9TdGF0c1trZXldICs9IDE7XHJcbiAgICAgIHNhdmUoKTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHN0YXRfJHtrZXl9YCkudGV4dENvbnRlbnQgPSBvU3RhdHNba2V5XTtcclxuICAgICAgd3JpdGVUb0Rhc2hCb2FyZCh7IG5ld19saXN0aW5nczogb1N0YXRzW2tleV0gfSk7XHJcbiAgICB9LFxyXG4gICAgYWRkU2luZ2xlTGlzdGluZ3M6ICgpID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gJ3NpbmdsZV9saXN0aW5ncyc7XHJcbiAgICAgIGlmICghb1N0YXRzW2tleV0pIG9TdGF0c1trZXldID0gMDtcclxuICAgICAgb1N0YXRzW2tleV0gKz0gMTtcclxuICAgICAgc2F2ZSgpO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3RhdF8ke2tleX1gKS50ZXh0Q29udGVudCA9IG9TdGF0c1trZXldO1xyXG4gICAgICB3cml0ZVRvRGFzaEJvYXJkKHsgc2luZ2xlX2xpc3RpbmdzOiBvU3RhdHNba2V5XSB9KTtcclxuICAgIH0sXHJcbiAgICBhZGRNdWx0aUxpc3RpbmdzOiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGtleSA9ICdtdWx0aV9saXN0aW5ncyc7XHJcbiAgICAgIGlmICghb1N0YXRzW2tleV0pIG9TdGF0c1trZXldID0gMDtcclxuICAgICAgb1N0YXRzW2tleV0gKz0gMTtcclxuICAgICAgc2F2ZSgpO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3RhdF8ke2tleX1gKS50ZXh0Q29udGVudCA9IG9TdGF0c1trZXldO1xyXG4gICAgICB3cml0ZVRvRGFzaEJvYXJkKHsgbXVsdGlfbGlzdGluZ3M6IG9TdGF0c1trZXldIH0pO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBub3cgPSBgJHtkLmdldEZ1bGxZZWFyKCl9JHtkLmdldE1vbnRoKCkgKyAxfSR7ZC5nZXREYXRlKCl9YDtcclxuICAgIGxldCBzdGF0cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGBzdGF0c18ke25vd31gKTtcclxuICAgIGlmIChzdGF0cykge1xyXG4gICAgICBjb25zdCBzdGF0S2V5cyA9IFsnb2ZmZXJzJywgJ3BhcnRuZXJzJywgJ3J1bnMnLCAnc3RyZWFrcycsICdrbyddO1xyXG4gICAgICBzdGF0cyA9IEpTT04ucGFyc2Uoc3RhdHMpO1xyXG4gICAgICBzdGF0S2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgcmVzdWx0W2tleV0gPSBzdGF0c1trZXldIHx8IDA7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgX2FwaVNlbmRCdWcoeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgc3RhdHMnLCBkZXRhaWxzOiBlLnRvU3RyaW5nKCkgfSk7XHJcbiAgfVxyXG59IiwiY29uc3Qgc3BpbnRheCA9IHJlcXVpcmUoJ21lbC1zcGludGF4Jyk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVzKG5vc3Bpbikge1xyXG4gIHJldHVybiB7XHJcbiAgICBvcGVuZXJtZXNzYWdlOiAoKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5wdXRfb3BlbmVybWVzc2FnZScpIHx8ICcnO1xyXG4gICAgICBpZiAobm9zcGluKSByZXR1cm4gcmVzO1xyXG4gICAgICByZXR1cm4gc3BpbnRheC51bnNwaW4ocmVzKTtcclxuICAgIH0pKCksXHJcbiAgICBxdWVzdGlvbl8xOiAoKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5wdXRfcXVlc3Rpb25fMScpIHx8ICcnO1xyXG4gICAgICBpZiAobm9zcGluKSByZXR1cm4gcmVzO1xyXG4gICAgICByZXR1cm4gc3BpbnRheC51bnNwaW4ocmVzKTtcclxuICAgIH0pKCksXHJcbiAgICBxdWVzdGlvbl8yOiAoKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5wdXRfcXVlc3Rpb25fMicpIHx8ICcnO1xyXG4gICAgICBpZiAobm9zcGluKSByZXR1cm4gcmVzO1xyXG4gICAgICByZXR1cm4gc3BpbnRheC51bnNwaW4ocmVzKTtcclxuICAgIH0pKCksXHJcbiAgICBnYk1lc3NhZ2U6ICgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbnB1dF9nYm1lc3NhZ2UnKSB8fCAnJztcclxuICAgICAgaWYgKG5vc3BpbikgcmV0dXJuIHJlcztcclxuICAgICAgcmV0dXJuIHNwaW50YXgudW5zcGluKHJlcyk7XHJcbiAgICB9KSgpLFxyXG4gICAgbmV0d29ya01lc3NhZ2U6ICgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbnB1dF9uZXR3b3JrbWVzc2FnZScpIHx8ICcnO1xyXG4gICAgICBpZiAobm9zcGluKSByZXR1cm4gcmVzO1xyXG4gICAgICByZXR1cm4gc3BpbnRheC51bnNwaW4ocmVzKTtcclxuICAgIH0pKCksXHJcbiAgICBxdWVzdGlvbl8zOiAoKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5wdXRfcXVlc3Rpb25fMycpIHx8ICcnO1xyXG4gICAgICBpZiAobm9zcGluKSByZXR1cm4gcmVzO1xyXG4gICAgICByZXR1cm4gc3BpbnRheC51bnNwaW4ocmVzKTtcclxuICAgIH0pKCksXHJcbiAgICBxdWVzdGlvbl80OiAoKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5wdXRfcXVlc3Rpb25fNCcpIHx8ICcnO1xyXG4gICAgICBpZiAobm9zcGluKSByZXR1cm4gcmVzO1xyXG4gICAgICByZXR1cm4gc3BpbnRheC51bnNwaW4ocmVzKTtcclxuICAgIH0pKCksXHJcbiAgICBsb3diYWxsX21lc3NhZ2U6ICgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbnB1dF9sb3diYWxsX21lc3NhZ2UnKSB8fCAnJztcclxuICAgICAgaWYgKG5vc3BpbikgcmV0dXJuIHJlcztcclxuICAgICAgcmV0dXJuIHNwaW50YXgudW5zcGluKHJlcyk7XHJcbiAgICB9KSgpLFxyXG4gICAgb2ZmZXJNZXNzYWdlOiAoKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5wdXRfb2ZmZXJtZXNzYWdlJykgfHwgJyc7XHJcbiAgICAgIGlmIChub3NwaW4pIHJldHVybiByZXM7XHJcbiAgICAgIHJldHVybiBzcGludGF4LnVuc3BpbihyZXMpO1xyXG4gICAgfSkoKSxcclxuICAgIC8vIGNsb3NpbmdtZXNzYWdlOiAoKCkgPT4ge1xyXG4gICAgLy8gICBjb25zdCByZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5wdXRfY2xvc2luZ21lc3NhZ2UnKSB8fCAnJztcclxuICAgIC8vICAgaWYgKG5vc3BpbikgcmV0dXJuIHJlcztcclxuICAgIC8vICAgcmV0dXJuIHNwaW50YXgudW5zcGluKHJlcyk7XHJcbiAgICAvLyB9KSgpLFxyXG4gICAgLy8gYWNjZXB0TWVzc2FnZTogKCgpID0+IHtcclxuICAgIC8vICAgY29uc3QgcmVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lucHV0X2FjY2VwdG1lc3NhZ2UnKSB8fCAnJztcclxuICAgIC8vICAgaWYgKG5vc3BpbikgcmV0dXJuIHJlcztcclxuICAgIC8vICAgcmV0dXJuIHNwaW50YXgudW5zcGluKHJlcyk7XHJcbiAgICAvLyB9KSgpLFxyXG4gICAgbWVldHVwTWVzc2FnZTogKCgpID0+IHtcclxuICAgICAgY29uc3QgcmVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lucHV0X21lZXR1cG1lc3NhZ2UnKSB8fCAnJztcclxuICAgICAgaWYgKG5vc3BpbikgcmV0dXJuIHJlcztcclxuICAgICAgcmV0dXJuIHNwaW50YXgudW5zcGluKHJlcyk7XHJcbiAgICB9KSgpLFxyXG4gICAgLy8gcGFydG5lck1lc3NhZ2U6ICgoKSA9PiB7XHJcbiAgICAvLyAgIGNvbnN0IHJlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbnB1dF9wYXJ0bmVybWVzc2FnZScpIHx8ICcnO1xyXG4gICAgLy8gICBpZiAobm9zcGluKSByZXR1cm4gcmVzO1xyXG4gICAgLy8gICByZXR1cm4gc3BpbnRheC51bnNwaW4ocmVzKTtcclxuICAgIC8vIH0pKCksXHJcbiAgfTtcclxufSIsImltcG9ydCB7IHBhcnNlVmFyaWFibGVzIH0gZnJvbSBcIi4vcGFyc2VWYXJpYWJsZXNcIjtcclxuaW1wb3J0IHsgdGVtcGxhdGVzIH0gZnJvbSBcIi4vdGVtcGxhdGVzXCI7XHJcbmltcG9ydCB7IHZhbGlkYXRlU3BpbnRheGVzIH0gZnJvbSBcIi4vdmFsaWRhdGVTcGludGF4ZXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0ZXN0VGVtcGxhdGVzKCkge1xyXG4gIGNvbnN0IG1lc3NhZ2VzID0gW107XHJcbiAgaWYgKCF2YWxpZGF0ZVNwaW50YXhlcygpKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIE9iamVjdC5rZXlzKHRlbXBsYXRlcygpKS5mb3JFYWNoKHRlbXBsYXRlTmFtZSA9PiB7XHJcbiAgICBsZXQgbXNnID0gdGVtcGxhdGVzKClbdGVtcGxhdGVOYW1lXTtcclxuICAgIGlmICghbXNnKSByZXR1cm47XHJcbiAgICBjb25zdCB0ZXN0VmFyaWFudCA9IHtcclxuICAgICAgXCJtb2RlbFwiOiBcIklQSE9ORSAxMSBQUk9cIixcclxuICAgICAgXCJzdG9yYWdlXCI6IFwiNjRHQlwiLFxyXG4gICAgICBcIm5ldHdvcmtcIjogXCJVbmxvY2tlZFwiLFxyXG4gICAgICBcInByaWNlXCI6IDQ1MCxcclxuICAgICAgXCJjb25kaXRpb25cIjogXCJHcmFkZSBBIC0gTGlrZSBOZXcgW05PIGNyYWNrcywgc2NyYXRjaGVzLCBzY3VmZnMgb3IgZGVudHNdXCIsXHJcbiAgICAgIFwiZGVkdWN0aW9uc1wiOiBbXSxcclxuICAgICAgLy8gXCJxdW90ZV9saW5rXCI6IFwiaHR0cHM6Ly9zZWxsLnBob25lcy50cmFkZS8/bW9kZWw9MTFwcm8mc3RvcmFnZT02NGdiJm5ldHdvcms9dW5sb2NrZWQmY29uZGl0aW9uPWxpa2VuZXcmcj0yaWlYa0gyYmJXZm50RXExa0NtcThJMzhlQWgyXCIsXHJcbiAgICAgIC8vIFwicGFydG5lcl9saW5rXCI6IFwiaHR0cHM6Ly9ob3BsYS50by9IWWh5OVwiXHJcbiAgICB9O1xyXG4gICAgdHJ5IHtcclxuICAgICAgbXNnID0gcGFyc2VWYXJpYWJsZXMobXNnLCB0ZXN0VmFyaWFudCwgJ1NpbHZlcicsIDYwMCk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIH1cclxuICAgIG1zZyA9IGAke3RlbXBsYXRlTmFtZX06ICR7bXNnfVxcblxcbmA7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbXNnJywgbXNnKTtcclxuICAgIG1lc3NhZ2VzLnB1c2gobXNnKTtcclxuICB9KTtcclxuICBhbGVydChtZXNzYWdlcy5qb2luKCcnKSk7XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gdGV4dENvbnRhaW5zU2tpcFdvcmQodGV4dCkge1xyXG4gIGNvbnN0IHNraXBXb3JkcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbnB1dF9za2lwd29yZHMnKTtcclxuICBpZiAoc2tpcFdvcmRzKSB7XHJcbiAgICBsZXQgc2tpcCA9IGZhbHNlO1xyXG4gICAgc2tpcFdvcmRzLnNwbGl0KCcsJykubWFwKHggPT4geC50cmltKCkpLmZvckVhY2god29yZCA9PiB7XHJcbiAgICAgIGlmICghd29yZCkgcmV0dXJuO1xyXG4gICAgICBpZiAodGV4dCAmJiB0ZXh0Lm1hdGNoKG5ldyBSZWdFeHAod29yZCwgJ2knKSkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0ZXh0LCAnY29udGFpbnMnLCB3b3JkKTtcclxuICAgICAgICBza2lwID0gd29yZDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAoc2tpcCkge1xyXG4gICAgICByZXR1cm4gc2tpcDtcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgeyBnZXRDaGF0TGlzdGluZ0lkIH0gZnJvbSBcIi4uL2dldENoYXRMaXN0aW5nSWRcIjtcclxuaW1wb3J0IHsgZ2V0RGF0YUZyb21BdHRyaWJ1dGUgfSBmcm9tIFwiLi9nZXREYXRhRnJvbUF0dHJpYnV0ZVwiO1xyXG5pbXBvcnQgeyBnZXRJdGVtSW5mbyB9IGZyb20gXCIuL2dldEl0ZW1JbmZvXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQnVnSW5mbyhpZCwgaXRlbUluZm8pIHtcclxuICBsZXQgbGlzdGluZ0lkO1xyXG4gIGlmIChpZCkge1xyXG4gICAgbGlzdGluZ0lkID0gaWQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcygnaW5ib3gvbWVzc2FnZS8nKSkge1xyXG4gICAgICBsaXN0aW5nSWQgPSBhd2FpdCBnZXRDaGF0TGlzdGluZ0lkKCk7XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgLy8gICBsaXN0aW5nSWQgPSBnZXRQYWdlSWQoKTsgLy8gREVQUkVDQVRFRFxyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoIWxpc3RpbmdJZCkgcmV0dXJuO1xyXG4gIHdpbmRvdy5idWdSZXBvcnQgPSB7fTtcclxuICBcclxuICBjb25zdCBkYXRhID0gaXRlbUluZm8gfHwgYXdhaXQgZ2V0SXRlbUluZm8obGlzdGluZ0lkKTtcclxuICB3aW5kb3cuYnVnUmVwb3J0Lmxpc3RpbmdJZCA9IGxpc3RpbmdJZDtcclxuICAvLyBjb25zb2xlLmxvZygnaXRlbWluZm8nLCBkYXRhKTtcclxuICBjb25zdCBtb2RlbEZyb21BdHRyaWJ1dGUgPSBnZXREYXRhRnJvbUF0dHJpYnV0ZShkYXRhLmF0dHJpYnV0ZXMsICdtb2RlbCcpO1xyXG4gIGNvbnN0IG5ldHdvcmtGcm9tQXR0cmlidXRlID0gZ2V0RGF0YUZyb21BdHRyaWJ1dGUoZGF0YS5hdHRyaWJ1dGVzLCAnY2Fycmllck5ldHdvcmsnKTtcclxuICBjbGVhckRldGFpbHMoKTtcclxuICBpbnNlcnRJbmZvKCdVUkwnLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgaWYgKGRhdGEudGl0bGUpIHtcclxuICAgIGxldCB0aXRsZSA9IGRhdGEudGl0bGU7XHJcbiAgICB0aXRsZSA9IHJlcGxhY2VDb2xvcnModGl0bGUsICd0aXRsZScpO1xyXG4gICAgaW5zZXJ0SW5mbygnVGl0bGUnLCB0aXRsZSk7XHJcbiAgICB3aW5kb3cuYnVnUmVwb3J0Lmxpc3RpbmdfdGl0bGUgPSB0aXRsZTtcclxuICB9XHJcbiAgaWYgKGRhdGEuZGVzY3JpcHRpb24pIHtcclxuICAgIGxldCBkZXNjcmlwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb247XHJcbiAgICBkZXNjcmlwdGlvbiA9IHJlcGxhY2VDb2xvcnMoZGVzY3JpcHRpb24sICdkZXNjcmlwdGlvbicpO1xyXG4gICAgaW5zZXJ0SW5mbygnRGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7XHJcbiAgICB3aW5kb3cuYnVnUmVwb3J0Lmxpc3RpbmdfZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICB9XHJcbiAgaWYgKG1vZGVsRnJvbUF0dHJpYnV0ZSkge1xyXG4gICAgbGV0IG1vZGVsRGV0YWlsID0gbW9kZWxGcm9tQXR0cmlidXRlO1xyXG4gICAgbW9kZWxEZXRhaWwgPSByZXBsYWNlQ29sb3JzKG1vZGVsRGV0YWlsLCAnbW9kZWxGcm9tQXR0cmlidXRlJyk7XHJcbiAgICBpbnNlcnRJbmZvKCdNb2RlbCcsIG1vZGVsRGV0YWlsKTtcclxuICAgIHdpbmRvdy5idWdSZXBvcnQubGlzdGluZ19kZXRhaWxfbW9kZWwgPSBtb2RlbERldGFpbDtcclxuICB9XHJcbiAgaWYgKG5ldHdvcmtGcm9tQXR0cmlidXRlKSB7XHJcbiAgICBsZXQgbmV0d29ya0RldGFpbCA9IG5ldHdvcmtGcm9tQXR0cmlidXRlO1xyXG4gICAgbmV0d29ya0RldGFpbCA9IHJlcGxhY2VDb2xvcnMobmV0d29ya0RldGFpbCwgJ25ldHdvcmtGcm9tQXR0cmlidXRlJyk7XHJcbiAgICBpbnNlcnRJbmZvKCdOZXR3b3JrJywgbmV0d29ya0RldGFpbCk7XHJcbiAgICB3aW5kb3cuYnVnUmVwb3J0Lmxpc3RpbmdfZGV0YWlsX25ldHdvcmsgPSBuZXR3b3JrRGV0YWlsO1xyXG4gIH1cclxuICBpZiAod2luZG93Lmxhc3RWYXJpYW50KSB7XHJcbiAgICBpZiAod2luZG93Lmxhc3RWYXJpYW50Lm1vZGVsKSB7XHJcbiAgICAgIHdpbmRvdy5idWdSZXBvcnQubW9kZWwgPSB3aW5kb3cubGFzdFZhcmlhbnQubW9kZWw7XHJcbiAgICAgIGluc2VydFZhcmlhbnRJbmZvKCdNb2RlbCcsIHdpbmRvdy5sYXN0VmFyaWFudC5tb2RlbCk7XHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93Lmxhc3RWYXJpYW50LnN0b3JhZ2UpIHtcclxuICAgICAgd2luZG93LmJ1Z1JlcG9ydC5zdG9yYWdlID0gd2luZG93Lmxhc3RWYXJpYW50LnN0b3JhZ2U7XHJcbiAgICAgIGluc2VydFZhcmlhbnRJbmZvKCdTdG9yYWdlJywgd2luZG93Lmxhc3RWYXJpYW50LnN0b3JhZ2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5sYXN0VmFyaWFudC5uZXR3b3JrKSB7XHJcbiAgICAgIHdpbmRvdy5idWdSZXBvcnQubmV0d29yayA9IHdpbmRvdy5sYXN0VmFyaWFudC5uZXR3b3JrO1xyXG4gICAgICBpbnNlcnRWYXJpYW50SW5mbygnTmV0d29yaycsIHdpbmRvdy5sYXN0VmFyaWFudC5uZXR3b3JrKTtcclxuICAgIH1cclxuICAgIGlmICh3aW5kb3cubGFzdFZhcmlhbnQuY29uZGl0aW9uKSB7XHJcbiAgICAgIHdpbmRvdy5idWdSZXBvcnQuY29uZGl0aW9uID0gd2luZG93Lmxhc3RWYXJpYW50LmNvbmRpdGlvbjtcclxuICAgICAgaW5zZXJ0VmFyaWFudEluZm8oJ0NvbmRpdGlvbicsIHdpbmRvdy5sYXN0VmFyaWFudC5jb25kaXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuICBmdW5jdGlvbiBjbGVhckRldGFpbHMoKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnVnbGlzdGluZ2RldGFpbHMnKS5pbm5lckhUTUwgPSAnJztcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidWd2YXJpYW50ZGV0YWlscycpLmlubmVySFRNTCA9ICcnO1xyXG4gIH1cclxuICBmdW5jdGlvbiBpbnNlcnRJbmZvKGxhYmVsLCB2YWx1ZSkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2J1Z2xpc3RpbmdkZXRhaWxzJykuaW5uZXJIVE1MICs9IGAgPGRpdiBjbGFzcz1cInJlcG9ydC1kZXRhaWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj4ke2xhYmVsfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwiaXRlbXRpdGxlXCI+JHt2YWx1ZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDtcclxuICB9XHJcbiAgZnVuY3Rpb24gaW5zZXJ0VmFyaWFudEluZm8obGFiZWwsIHZhbHVlKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnVndmFyaWFudGRldGFpbHMnKS5pbm5lckhUTUwgKz0gYCA8ZGl2IGNsYXNzPVwicmVwb3J0LWRldGFpbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPiR7bGFiZWx9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJpdGVtdGl0bGVcIj4ke3ZhbHVlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG4gIH1cclxuICBmdW5jdGlvbiByZXBsYWNlQ29sb3JzKHRleHRUb1JlcGxhY2UsIHRleHRNYXRjaEtleSkge1xyXG4gICAgaWYgKHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtsaXN0aW5nSWRdICYmIHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtsaXN0aW5nSWRdW3RleHRNYXRjaEtleV0pIHtcclxuICAgICAgaWYgKHdpbmRvdy50ZXh0TWF0Y2hJbmRleFtsaXN0aW5nSWRdW3RleHRNYXRjaEtleV0ubW9kZWwpIHtcclxuICAgICAgICBjb25zdCByZ3ggPSB3aW5kb3cudGV4dE1hdGNoSW5kZXhbbGlzdGluZ0lkXVt0ZXh0TWF0Y2hLZXldLm1vZGVsLnJneDtcclxuICAgICAgICB0ZXh0VG9SZXBsYWNlID0gdGV4dFRvUmVwbGFjZS5yZXBsYWNlKHJneCwgc3RyID0+IGA8c3Ryb25nIGNsYXNzPVwiYmx1ZVwiPiR7c3RyfTwvc3Ryb25nPmApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh3aW5kb3cudGV4dE1hdGNoSW5kZXhbbGlzdGluZ0lkXVt0ZXh0TWF0Y2hLZXldLnN0b3JhZ2UpIHtcclxuICAgICAgICBjb25zdCByZ3ggPSB3aW5kb3cudGV4dE1hdGNoSW5kZXhbbGlzdGluZ0lkXVt0ZXh0TWF0Y2hLZXldLnN0b3JhZ2Uucmd4O1xyXG4gICAgICAgIHRleHRUb1JlcGxhY2UgPSB0ZXh0VG9SZXBsYWNlLnJlcGxhY2Uocmd4LCBzdHIgPT4gYDxzdHJvbmcgY2xhc3M9XCJncmVlblwiPiR7c3RyfTwvc3Ryb25nPmApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh3aW5kb3cudGV4dE1hdGNoSW5kZXhbbGlzdGluZ0lkXVt0ZXh0TWF0Y2hLZXldLm5ldHdvcmspIHtcclxuICAgICAgICBjb25zdCByZ3ggPSB3aW5kb3cudGV4dE1hdGNoSW5kZXhbbGlzdGluZ0lkXVt0ZXh0TWF0Y2hLZXldLm5ldHdvcmsucmd4O1xyXG4gICAgICAgIHRleHRUb1JlcGxhY2UgPSB0ZXh0VG9SZXBsYWNlLnJlcGxhY2Uocmd4LCBzdHIgPT4gYDxzdHJvbmcgY2xhc3M9XCJwdXJwbGVcIj4ke3N0cn08L3N0cm9uZz5gKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAod2luZG93LnRleHRNYXRjaEluZGV4W2xpc3RpbmdJZF1bdGV4dE1hdGNoS2V5XS5kZWR1Y3Rpb25zKSB7XHJcbiAgICAgICAgY29uc3QgcmVnZXhzID0gd2luZG93LnRleHRNYXRjaEluZGV4W2xpc3RpbmdJZF1bdGV4dE1hdGNoS2V5XS5kZWR1Y3Rpb25zO1xyXG4gICAgICAgIGZvciAoY29uc3Qgcmd4IG9mIHJlZ2V4cykge1xyXG4gICAgICAgICAgdGV4dFRvUmVwbGFjZSA9IHRleHRUb1JlcGxhY2UucmVwbGFjZShyZ3gsIHN0ciA9PiBgPHN0cm9uZyBjbGFzcz1cInJlZFwiPiR7c3RyfTwvc3Ryb25nPmApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRleHRUb1JlcGxhY2U7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUlucHV0c1N0YXRlcyhlbmFibGUpIHtcclxuICBjb25zdCBpbnB1dElkcyA9IFsnI2tleXdvcmRzJywgJyN6aXBjb2RlcycsICcjc2tpcHdvcmRzJywgJyNvcGVuZXJtZXNzYWdlJywgJyNnYm1lc3NhZ2UnLCAnI25ldHdvcmttZXNzYWdlJywgJyNvZmZlcm1lc3NhZ2UnLCAnI2Nsb3NpbmdtZXNzYWdlJywgJyNhY2NlcHRtZXNzYWdlJywgJyNtZWV0dXBtZXNzYWdlJywgJyNwYXJ0bmVybWVzc2FnZSddO1xyXG5cclxuICBmb3IgKGNvbnN0IGlkIG9mIGlucHV0SWRzKSB7XHJcbiAgICBsZXQgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaWQpO1xyXG4gICAgaWYgKGUpIGUuZGlzYWJsZWQgPSAhZW5hYmxlO1xyXG4gIH1cclxufSIsImltcG9ydCB7IENPTlNPTEVfTUVTU0FHRSB9IGZyb20gXCIuL2dldENvbnNvbGVNZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyB0ZW1wbGF0ZXMgfSBmcm9tIFwiLi90ZW1wbGF0ZXNcIjtcclxuXHJcbmNvbnN0IHNwaW50YXggPSByZXF1aXJlKCdtZWwtc3BpbnRheCcpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU3BpbnRheGVzKCkge1xyXG4gIGNvbnN0IGludmFsaWRzID0gW107XHJcbiAgT2JqZWN0LmtleXModGVtcGxhdGVzKCkpLmZvckVhY2godGVtcGxhdGVOYW1lID0+IHtcclxuICAgIGNvbnN0IG1lc3NhZ2UgPSB0ZW1wbGF0ZXModHJ1ZSlbdGVtcGxhdGVOYW1lXTtcclxuICAgIGlmICghc3BpbnRheC52YWxpZGF0ZShtZXNzYWdlKSkgaW52YWxpZHMucHVzaCh0ZW1wbGF0ZU5hbWUpO1xyXG4gIH0pO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdJbnZhbGlkIHNwaW50YXggZGV0ZWN0ZWQuJyk7XHJcbiAgaWYgKGludmFsaWRzLmxlbmd0aCkge1xyXG4gICAgQ09OU09MRV9NRVNTQUdFKCdjdXN0b20nLCAnSW52YWxpZCBzcGludGF4IGRldGVjdGVkLicpO1xyXG4gICAgYWxlcnQoJ1lvdSBoYXZlIGludmFsaWQgc3BpbnRheCBmb3JtYXQgaW4gJyArIGludmFsaWRzLmpvaW4oJywgJykpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufSIsImV4cG9ydCBmdW5jdGlvbiB3YWl0Rm9yTWRsKGVSYWRpbykge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIChmdW5jdGlvbiB3YWl0Rm9yRm9vKCkge1xyXG4gICAgICBpZiAoZVJhZGlvLnBhcmVudE5vZGUuTWF0ZXJpYWxSYWRpbyB8fCBlUmFkaW8ucGFyZW50Tm9kZS5NYXRlcmlhbFN3aXRjaCkgcmV0dXJuIHJlc29sdmUoZVJhZGlvKTtcclxuICAgICAgc2V0VGltZW91dCh3YWl0Rm9yRm9vLCAzMCk7XHJcbiAgICB9KSgpO1xyXG4gIH0pO1xyXG59IiwiY29uc3QgcnVuVGltZUludGVyVmFsID0gMTA7IC8vIG1pbnV0ZXNcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJ1blRpbWVQb2ludHMoKSB7XHJcbiAgbGV0IHJ1blRpbWVQZXJEYXkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncnVuVGltZVBlckRheScpO1xyXG4gIGlmICghcnVuVGltZVBlckRheSkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGRhdGVUb2RheSA9IGdldFRvZGF5KCk7XHJcbiAgICBydW5UaW1lUGVyRGF5ID0gSlNPTi5wYXJzZShydW5UaW1lUGVyRGF5KTtcclxuICAgIGlmICghcnVuVGltZVBlckRheVtkYXRlVG9kYXldKSByZXR1cm4gMFxyXG4gICAgcmV0dXJuIHJ1blRpbWVQZXJEYXlbZGF0ZVRvZGF5XTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoaXRSdW50aW1lKCkge1xyXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gIGxldCBydW50aW1lSGl0cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdydW50aW1lSGl0cycpO1xyXG4gIGlmICghcnVudGltZUhpdHMpIHtcclxuICAgIHJ1bnRpbWVIaXRzID0gW107XHJcbiAgICBydW50aW1lSGl0cy5wdXNoKG5vdyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJ1bnRpbWVIaXRzID0gSlNPTi5wYXJzZShydW50aW1lSGl0cyk7XHJcbiAgICBjb25zdCBsYXN0RW50cnkgPSBydW50aW1lSGl0c1tydW50aW1lSGl0cy5sZW5ndGggLSAxXTtcclxuICAgIC8vIElGIE1PUkUgVEhBTiAxMCBNSU5TIEFHTywgQUREIFRTIFRPIFJVTiBUSU1FIExPR1xyXG4gICAgaWYgKGlzTW9yZVRoYW5YbWludXRlcyhsYXN0RW50cnksIHJ1blRpbWVJbnRlclZhbCkpIHtcclxuICAgICAgcnVudGltZUhpdHMucHVzaChub3cpO1xyXG4gICAgICBpZiAobm93IC0gbGFzdEVudHJ5IDwgMjAgKiA2MCAqIDEwMDApIHtcclxuICAgICAgICAvLyBJRiBMQVNUIEVOVFJZIElTIExFU1MgVEhBTiAyMCBNSU5TIEFHTywgQUREIFJVTiBUSU1FIFBPSU5UU1xyXG4gICAgICAgIGluY3JlbWVudFJ1blRpbWVUb2RheSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncnVudGltZUhpdHMnLCBKU09OLnN0cmluZ2lmeShydW50aW1lSGl0cykpO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGluY3JlbWVudFJ1blRpbWVUb2RheSgpIHtcclxuICAvLyBjb25zb2xlLmxvZygnSU5DUkVNRU5UIFJVTlRJTUUgUE9JTlRTJyk7XHJcbiAgY29uc3QgZGF0ZVRvZGF5ID0gZ2V0VG9kYXkoKTtcclxuICBsZXQgcnVuVGltZVBlckRheSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdydW5UaW1lUGVyRGF5Jyk7XHJcbiAgaWYgKCFydW5UaW1lUGVyRGF5KSB7XHJcbiAgICBydW5UaW1lUGVyRGF5ID0ge1tkYXRlVG9kYXldOiAxfTtcclxuICB9IGVsc2Uge1xyXG4gICAgcnVuVGltZVBlckRheSA9IEpTT04ucGFyc2UocnVuVGltZVBlckRheSk7XHJcbiAgICBpZiAoIXJ1blRpbWVQZXJEYXlbZGF0ZVRvZGF5XSkge1xyXG4gICAgICBydW5UaW1lUGVyRGF5ID0ge307IC8vIENMRUFSIE9USEVSIERBVEVTLiBXRSBPTkxZIE5FRUQgVE8gVFJBQ0sgVE9EQVlcclxuICAgICAgcnVuVGltZVBlckRheVtkYXRlVG9kYXldID0gMDtcclxuICAgIH1cclxuICAgIHJ1blRpbWVQZXJEYXlbZGF0ZVRvZGF5XSA9IHBhcnNlSW50KHJ1blRpbWVQZXJEYXlbZGF0ZVRvZGF5XSkgKyAxO1xyXG4gIH1cclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncnVuVGltZVBlckRheScsIEpTT04uc3RyaW5naWZ5KHJ1blRpbWVQZXJEYXkpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNNb3JlVGhhblhtaW51dGVzKHRzLCBtaW5zKSB7XHJcbiAgcmV0dXJuIChEYXRlLm5vdygpIC0gdHMpID49IG1pbnMgKiA2MDAwMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9kYXkoKSB7XHJcbiAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XHJcbiAgY29uc3QgZGF0ZVRvZGF5ID0gYCR7ZC5nZXRGdWxsWWVhcigpfS0ke2QuZ2V0TW9udGgoKSArIDF9LSR7ZC5nZXREYXRlKCl9YDtcclxuICByZXR1cm4gZGF0ZVRvZGF5O1xyXG59XHJcbiIsImltcG9ydCB7IGdldFVzZXJFbWFpbCB9IGZyb20gXCIuL2dldFVzZXJFbWFpbFwiO1xyXG5pbXBvcnQgeyBnZXRSdW5UaW1lUG9pbnRzLCBoaXRSdW50aW1lIH0gZnJvbSBcIi4vcnVudGltZVwiO1xyXG5cclxuLy8gS09cdHJ1biBmcm9tXHR1bnRpbFx0b2ZmZXIgYWRkL2RlZHVjdFx0c2tpcCBzaGlwcGluZ1x0c3RyZWFrXHR0aW1lb3V0XHRtYXggY29uY3VycmVudFx0ZGVsZXRlIGFmdGVyIHNlbmRpbmdcdHNraXB3b3Jkc1x0emlwY29kZXNcdGtleXdvcmRzXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3cml0ZVRvRGFzaEJvYXJkKHsgb2ZmZXJzLCBwYXJ0bmVycywgcnVucywgc3RyZWFrcywgS08sIGxpc3RpbmdzX3NjcmFwZWQsIG51bV90aHJlYWRzLCBuZXdfbGlzdGluZ3MsIHNpbmdsZV9saXN0aW5ncywgbXVsdGlfbGlzdGluZ3MgfSkge1xyXG4gIGlmICghd2luZG93LnRhRW1haWwpIHJldHVybjtcclxuICBjb25zdCBvZmZlcl9hZGRfZGVkdWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdW5kdXBkb3duJykudmFsdWU7XHJcbiAgY29uc3Qgc2tpcF9zaGlwcGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzd2l0Y2gtc2tpcHNoaXBwaW5nZW5hYmxlZCcpLmNoZWNrZWQ7XHJcbiAgY29uc3QgdGltZW91dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdHJlYWt0aW1lb3V0JykudmFsdWU7XHJcbiAgY29uc3QgbWF4X3N0cmVhayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdHJlYWsnKS52YWx1ZTtcclxuICBjb25zdCBkZWxldGVfYWZ0ZXJfc2VuZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzd2l0Y2gtZGVsZXRlYWZ0ZXJzZW5kJykuY2hlY2tlZDtcclxuICBjb25zdCBza2lwd29yZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2tpcHdvcmRzJykudmFsdWU7XHJcbiAgY29uc3QgemlwY29kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI3ppcGNvZGVzJykudmFsdWU7XHJcbiAgY29uc3Qga2V5d29yZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI2tleXdvcmRzJykudmFsdWU7XHJcbiAgY29uc3QgbWF4X2NvbmN1cnJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF4Y29uY3VycmVudGNvbnZlcnNhdGlvbnMnKS52YWx1ZTtcclxuICBjb25zdCBydW5fZnJvbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNydW5mcm9tJykudmFsdWU7XHJcbiAgY29uc3QgdW50aWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcnVudW50aWwnKS52YWx1ZTtcclxuICBjb25zdCBkYXRlVG9kYXkgPSBnZXREYXRlVG9kYXkoKTtcclxuICBjb25zdCBvZmZlcnVwRW1haWwgPSBnZXRVc2VyRW1haWwoKSB8fCB3aW5kb3cudGFFbWFpbDtcclxuICAvLyBjb25zdCBvV3JpdGUgPSB7IGtleTogYCR7d2luZG93LnRhRW1haWx9LSR7ZGF0ZVRvZGF5fWAsIGRhdGU6IGRhdGVUb2RheSwgdmVyc2lvbjogd2luZG93LmV4dGVuc2lvbl92ZXJzaW9uIH07XHJcbiAgY29uc3Qgb1dyaXRlID0geyBrZXk6IG9mZmVydXBFbWFpbCwgcGFydG5lcl9lbWFpbDogd2luZG93LnRhRW1haWwsIGRhdGU6IGRhdGVUb2RheSwgdmVyc2lvbjogd2luZG93LmV4dGVuc2lvbl92ZXJzaW9uIH07XHJcbiAgaWYgKHR5cGVvZiBvZmZlcnMgIT09ICd1bmRlZmluZWQnKSBvV3JpdGUub2ZmZXJzID0gb2ZmZXJzO1xyXG4gIGlmICh0eXBlb2YgcGFydG5lcnMgIT09ICd1bmRlZmluZWQnKSBvV3JpdGUucGFydG5lcnMgPSBwYXJ0bmVycztcclxuICBpZiAodHlwZW9mIHJ1bnMgIT09ICd1bmRlZmluZWQnKSBvV3JpdGUucnVucyA9IHJ1bnM7XHJcbiAgaWYgKHR5cGVvZiBzdHJlYWtzICE9PSAndW5kZWZpbmVkJykgb1dyaXRlLnN0cmVha3MgPSBzdHJlYWtzO1xyXG4gIGlmICh0eXBlb2YgS08gIT09ICd1bmRlZmluZWQnKSBvV3JpdGUuS08gPSBLTztcclxuICBpZiAodHlwZW9mIHJ1bl9mcm9tICE9PSAndW5kZWZpbmVkJykgb1dyaXRlWydydW4gZnJvbSddID0gcnVuX2Zyb207XHJcbiAgaWYgKHR5cGVvZiB1bnRpbCAhPT0gJ3VuZGVmaW5lZCcpIG9Xcml0ZS51bnRpbCA9IHVudGlsO1xyXG4gIGlmICh0eXBlb2Ygb2ZmZXJfYWRkX2RlZHVjdCAhPT0gJ3VuZGVmaW5lZCcpIG9Xcml0ZVsnb2ZmZXIgYWRkL2RlZHVjdCddID0gb2ZmZXJfYWRkX2RlZHVjdDtcclxuICBpZiAodHlwZW9mIHNraXBfc2hpcHBpbmcgIT09ICd1bmRlZmluZWQnKSBvV3JpdGVbJ3NraXAgc2hpcHBpbmcnXSA9IHNraXBfc2hpcHBpbmc7XHJcbiAgaWYgKHR5cGVvZiBtYXhfc3RyZWFrICE9PSAndW5kZWZpbmVkJykgb1dyaXRlWydtYXggc3RyZWFrJ10gPSBtYXhfc3RyZWFrO1xyXG4gIGlmICh0eXBlb2YgdGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIG9Xcml0ZS50aW1lb3V0ID0gdGltZW91dDtcclxuICBpZiAodHlwZW9mIGxpc3RpbmdzX3NjcmFwZWQgIT09ICd1bmRlZmluZWQnKSBvV3JpdGUubGlzdGluZ3Nfc2NyYXBlZCA9IGxpc3RpbmdzX3NjcmFwZWQ7XHJcblxyXG4gIGlmICh0eXBlb2YgbWF4X2NvbmN1cnJlbnQgIT09ICd1bmRlZmluZWQnKSBvV3JpdGVbJ21heCBjb25jdXJyZW50J10gPSBtYXhfY29uY3VycmVudDtcclxuICBpZiAodHlwZW9mIGRlbGV0ZV9hZnRlcl9zZW5kaW5nICE9PSAndW5kZWZpbmVkJykgb1dyaXRlWydkZWxldGUgYWZ0ZXIgc2VuZGluZyddID0gZGVsZXRlX2FmdGVyX3NlbmRpbmc7XHJcbiAgaWYgKHR5cGVvZiBza2lwd29yZHMgIT09ICd1bmRlZmluZWQnKSBvV3JpdGUuc2tpcHdvcmRzID0gc2tpcHdvcmRzO1xyXG4gIGlmICh0eXBlb2YgemlwY29kZXMgIT09ICd1bmRlZmluZWQnKSBvV3JpdGUuemlwY29kZXMgPSB6aXBjb2RlcztcclxuICBpZiAodHlwZW9mIGtleXdvcmRzICE9PSAndW5kZWZpbmVkJykgb1dyaXRlLmtleXdvcmRzID0ga2V5d29yZHM7XHJcbiAgaWYgKHR5cGVvZiBudW1fdGhyZWFkcyAhPT0gJ3VuZGVmaW5lZCcpIG9Xcml0ZVsndGhyZWFkcyBpbmJveCddID0gbnVtX3RocmVhZHM7XHJcbiAgaWYgKHR5cGVvZiBuZXdfbGlzdGluZ3MgIT09ICd1bmRlZmluZWQnKSBvV3JpdGVbJ05ldyBMaXN0aW5ncyddID0gbmV3X2xpc3RpbmdzO1xyXG4gIGlmICh0eXBlb2Ygc2luZ2xlX2xpc3RpbmdzICE9PSAndW5kZWZpbmVkJykgb1dyaXRlWydTaW5nbGUgTGlzdGluZ3MnXSA9IHNpbmdsZV9saXN0aW5ncztcclxuICBpZiAodHlwZW9mIG11bHRpX2xpc3RpbmdzICE9PSAndW5kZWZpbmVkJykgb1dyaXRlWydNdWx0aSBMaXN0aW5ncyddID0gbXVsdGlfbGlzdGluZ3M7XHJcblxyXG4gIGhpdFJ1bnRpbWUoKTtcclxuICBvV3JpdGUucnVudGltZV9wb2ludHMgPSBnZXRSdW5UaW1lUG9pbnRzKCk7XHJcblxyXG4gIGlmICghd2luZG93LndyaXRlUXVldWUpIHdpbmRvdy53cml0ZVF1ZXVlID0gW107XHJcbiAgd2luZG93LndyaXRlUXVldWUucHVzaChvV3JpdGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXREYXRlVG9kYXkoKSB7XHJcbiAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XHJcbiAgbGV0IG1vbnRoID0gZC5nZXRNb250aCgpICsgMTtcclxuICBpZiAobW9udGggPCAxMCkgbW9udGggPSBgMCR7bW9udGh9YDtcclxuICBsZXQgZGF5ID0gZC5nZXREYXRlKCk7XHJcbiAgaWYgKGRheSA8IDEwKSBkYXkgPSBgMCR7ZGF5fWA7XHJcbiAgY29uc3QgeWVhciA9IGQuZ2V0RnVsbFllYXIoKTtcclxuICAvLyB5eXl5LU1NLUREXHJcbiAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XHJcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3NwaW50YXgnKTtcbiIsIi8qKlxuICogbWVsLXNwaW50YXhcbiAqXG4gKiBQYXJzZSBTcGludGF4IGZvcm1hdHRlZCB0ZXh0IChOZXN0ZWQgU3BpbnRheCBzdXBwb3J0ZWQpXG4gKlxuICogQGNvcHlyaWdodCAyMDE1IERtaXRyeSBHdXJlZXZcbiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlZFxuICpcbiAqIEV4YW1wbGVzOlxuICogICAgIC8vIEdldCB1bnNwaW5uZWQgdGV4dFxuICogICAgIGNvbnNvbGUubG9nKHNwaW50YXgudW5zcGluKCd7SGVsbG98SGl9IEpvaG4hJykpO1xuICogICAgIC8vID4+PiBcIkhlbGxvIEpvaG4hXCIgb3IgXCJIaSBKb2huIVwiXG4gKlxuICogICAgIC8vIEdldCB1bnNwaW5uZWQgdGV4dCBmcm9tIE5lc3RlZCBTcGludGF4XG4gKiAgICAgY29uc29sZS5sb2coc3BpbnRheC51bnNwaW4oJ3tIZWxsb3xIaSB7dGhlcmV8YWdhaW59fSBKb2huIScpKTtcbiAqICAgICAvLyA+Pj4gXCJIZWxsbyBKb2huIVwiIG9yIFwiSGkgdGhlcmUgSm9obiFcIiBvciBcIkhpIGFnYWluIEpvaG4hXCJcbiAqXG4gKiAgICAgLy8gQ291bnQgdW5pcXVlIHZhcmlhdGlvbnNcbiAqICAgICBjb25zb2xlLmxvZyhzcGludGF4LmNvdW50KCd7SGVsbG98SGkge3RoZXJlfGFnYWlufX0gSm9obiEnKSk7XG4gKiAgICAgLy8gPj4+IDNcbiAqXG4gKiAgICAgLy8gVmFsaWRhdGUgZm9ybWF0XG4gKiAgICAgY29uc29sZS5sb2coc3BpbnRheC52YWxpZGF0ZSgne0hlbGxvfEhpfSBKb2huIScpKTtcbiAqICAgICAvLyA+Pj4gdHJ1ZVxuICogICAgIGNvbnNvbGUubG9nKHNwaW50YXgudmFsaWRhdGUoJ3tIZWxsb3xIaSBKb2huIScpKTtcbiAqICAgICAvLyA+Pj4gZmFsc2VcbiAqL1xuKGZ1bmN0aW9uKGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ2hlY2sgdGV4dCBpcyBTcGludGF4XG5cdCAqXG5cdCAqIEBwYXJhbSB0ZXh0IHtTdHJpbmd9IFNwaW50YXggZm9ybWF0dGVkIHN0cmluZ1xuXHQgKiBAcmV0dXJuIHtCb29sZWFufVxuXHQgKi9cblx0ZXhwb3J0cy5pc1NwaW50YXggPSBmdW5jdGlvbih0ZXh0KSB7XG5cdFx0cmV0dXJuIHRleHQubWF0Y2goL1xce1tefV0qXFx8KltefV0qXFx9LykgIT09IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCAqIEZpbmQgYW5kIHJldHVybiBhcnJheSBvZiBmaXJzdCBTcGludGF4IG9jY3VyZW5jZSBvciBudWxsXG5cdCAqXG5cdCAqIEBwYXJhbSB0ZXh0IHtTdHJpbmd9IFNwaW50YXggZm9ybWF0dGVkIHN0cmluZ1xuXHQgKiBAcmV0dXJuIHtudWxsfEFycmF5fVxuXHQgKi9cblx0ZXhwb3J0cy5maW5kU3BpbnRheCA9IGZ1bmN0aW9uKHRleHQpIHtcblx0XHRyZXR1cm4gdGV4dC5tYXRjaCgvXFx7KFtee31dKz8pXFx9Lyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFVuc3BpbiBTcGludGF4IHRleHRcblx0ICpcblx0ICogQHBhcmFtIHRleHQge1N0cmluZ30gU3BpbnRheCBmb3JtYXR0ZWQgdGV4dFxuXHQgKiBAcGFyYW0gW3JhbmRvbUZuXSB7RnVuY3Rpb259IEN1c3RvbSBSYW5kb20gRnVuY3Rpb24gdGhhdCByZXR1cm5zIGIvdyAwLTFcblx0ICogQHJldHVybiB7U3RyaW5nfVxuXHQgKi9cblx0ZXhwb3J0cy51bnNwaW4gPSBmdW5jdGlvbih0ZXh0LCByYW5kb21Gbikge1xuXHRcdHZhciBzcGluO1xuXHRcdHZhciBvcHRpb25zO1xuXHRcdHZhciBjaG9pY2U7XG5cdFx0dmFyIG9yaWdpbmFsVGV4dCA9IHRleHQ7XG5cdFx0dmFyIHVuc3BpbkNvdW50ID0gMDtcblxuXHRcdC8vIFdoaWxlIHdlIGZpbmQgU3BpbnRheCBrZWVwIHVuc3Bpbm5pbmcgaXRcblx0XHR3aGlsZSAoZXhwb3J0cy5pc1NwaW50YXgodGV4dCkpIHtcblx0XHRcdGlmICh1bnNwaW5Db3VudCA+PSAxMDAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignVW5hYmxlIHVuc3BpbiB0ZXh0IGFmdGVyIDEwMDAgaXRlcmF0aW9ucyAoJyArIG9yaWdpbmFsVGV4dCArICcpJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpbmQgZmlyc3QgU3BpbnRheCBvY2N1cnJlbmNlXG5cdFx0XHRzcGluID0gZXhwb3J0cy5maW5kU3BpbnRheCh0ZXh0KTtcblxuXHRcdFx0Ly8gUHV0IHRoZSBTcGludGF4IG9wdGlvbnMgaW4gYW4gYXJyYXlcblx0XHRcdG9wdGlvbnMgPSBzcGluWzFdLnNwbGl0KCd8Jyk7XG5cblx0XHRcdC8vIENob29zZSBhIHJhbmRvbSBvcHRpb24gYmFzZWQgb24gdGhlIG9wdGlvbnMgbGVuZ3RoXG5cdFx0XHRjaG9pY2UgPSBvcHRpb25zW01hdGguZmxvb3IoKHJhbmRvbUZuIHx8IE1hdGgucmFuZG9tKSgpICogb3B0aW9ucy5sZW5ndGgpXTtcblxuXHRcdFx0Ly8gUHV0IG91ciB1bnNwdW4gY2hvaWNlIGJhY2sgaW50byB0ZXh0XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKHNwaW5bMF0sIGNob2ljZSk7XG5cblx0XHRcdC8vIEluY3JlYXNlIHVuc3BpbiBjb3VudGVyXG5cdFx0XHR1bnNwaW5Db3VudCsrO1xuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDb3VudCBTcGludGF4IHZhcmlhdGlvbnNcblx0ICpcblx0ICogQHBhcmFtIHRleHQge1N0cmluZ30gU3BpbnRheCBmb3JtYXR0ZWQgdGV4dFxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9XG5cdCAqL1xuXHRleHBvcnRzLmNvdW50ID0gZnVuY3Rpb24odGV4dCkge1xuXHRcdHZhciBzcGluO1xuXHRcdHZhciBvcHRpb25zO1xuXHRcdHZhciBudW07XG5cdFx0dmFyIHRvdGFscztcblx0XHR2YXIgdG90YWwgPSAwO1xuXHRcdHZhciBpO1xuXHRcdHZhciByZUZpbmQgPSAvJSUlXFxkKyUlJS9nO1xuXHRcdHZhciByZVBhcnNlID0gLyUlJShcXGQrKSUlJS87XG5cdFx0dmFyIHBzID0gJ04nO1xuXHRcdHZhciBwbSA9ICclJSUnICsgcHMgKyAnJSUlJztcblx0XHR2YXIgb3JpZ2luYWxUZXh0ID0gdGV4dDtcblx0XHR2YXIgdW5zcGluQ291bnQgPSAwO1xuXG5cdFx0d2hpbGUgKGV4cG9ydHMuaXNTcGludGF4KHRleHQpKSB7XG5cdFx0XHRpZiAodW5zcGluQ291bnQgPj0gMTAwMCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB1bnNwaW4gdGV4dCBhZnRlciAxMDAwIGl0ZXJhdGlvbnMgKCcgKyBvcmlnaW5hbFRleHQgKyAnKScpO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGluID0gZXhwb3J0cy5maW5kU3BpbnRheCh0ZXh0KTtcblx0XHRcdG9wdGlvbnMgPSBzcGluWzFdLnNwbGl0KCd8Jyk7XG5cdFx0XHRudW0gPSAwO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAob3B0aW9uc1tpXS5tYXRjaChyZUZpbmQpKSB7XG5cdFx0XHRcdFx0bnVtICs9IHBhcnNlSW50KG9wdGlvbnNbaV0ubWF0Y2gocmVQYXJzZSlbMV0pIHx8IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0bnVtICs9IDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZShzcGluWzBdLCBwbS5yZXBsYWNlKHBzLCBudW0udG9TdHJpbmcoKSkpO1xuXG5cdFx0XHQvLyBJbmNyZWFzZSB1bnNwaW4gY291bnRlclxuXHRcdFx0dW5zcGluQ291bnQrKztcblx0XHR9XG5cblx0XHRpZiAodGV4dC5tYXRjaChyZUZpbmQpKSB7XG5cdFx0XHR0b3RhbHMgPSB0ZXh0Lm1hdGNoKHJlRmluZCk7XG5cdFx0XHR0b3RhbCA9IDE7XG5cblx0XHRcdGZvciAoaSA9IDA7IGkgPCB0b3RhbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dG90YWwgKj0gcGFyc2VJbnQodG90YWxzW2ldLm1hdGNoKHJlUGFyc2UpWzFdKSB8fCAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0b3RhbDtcblx0fTtcblxuXHQvKipcblx0ICogQ2hlY2sgZ2l2ZW4gdGV4dCBmb3IgYSB2YWxpZCBTcGludGF4LWZvcm1hdFxuXHQgKlxuXHQgKiBAcGFyYW0gdGV4dCB7U3RyaW5nfSBTcGludGF4IGZvcm1hdHRlZCB0ZXh0XG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCAqL1xuXHRleHBvcnRzLnZhbGlkYXRlID0gZnVuY3Rpb24odGV4dCkge1xuXHRcdC8vIFVuc3BpbiB0ZXh0XG5cdFx0dGV4dCA9IGV4cG9ydHMudW5zcGluKHRleHQpO1xuXG5cdFx0Ly8gQ2hlY2sgdGV4dCBmb3IgcmVtYWluaW5nIFNwaW50YXggZm9ybWF0IHNlcXVlbmNlczogeyB0aGVuIHwgb3IgfCB0aGVuIH1cblx0XHRyZXR1cm4gdGV4dC5tYXRjaCgvKFxce1tefV0qXFx8KXwoXFx8W157XSpcXH0pLykgPT09IG51bGw7XG5cdH07XG5cbn0pKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/IHRoaXNbJ3NwaW50YXgnXSA9IHt9IDogZXhwb3J0cyk7XG4iLCJleHBvcnQgY29uc3QgcmVtb3ZlRGVzY3JpcHRpb24gPSAodmFsKSA9PiB7XHJcbiAgaWYgKCF2YWwpIHJldHVybiAnJztcclxuICB2YWwgPSB2YWwucmVwbGFjZSgvXFxbLis/XFxdLywgJycpO1xyXG4gIHZhbCA9IHZhbC50cmltKCk7XHJcbiAgcmV0dXJuIHZhbDtcclxufTsiLCIvKiBnbG9iYWwgd2luZG93ICovXHJcblxyXG5mdW5jdGlvbiB2aWV3TW9kZUNoZWNrKCkge1xyXG4gIGlmIChpc1ZpZXdlck1vZGUoKSkge1xyXG4gICAgd2luZG93LnZpZXdlcm1vZGUgPSB0cnVlO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBpc1ZpZXdlck1vZGUoKSB7XHJcbiAgY29uc3QgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gIHJldHVybiBocmVmLm1hdGNoKCdcXC9pbmJveHxpbmJveFxcL21lc3NhZ2UnKTtcclxufVxyXG5cclxuZXhwb3J0cy52aWV3TW9kZUNoZWNrID0gdmlld01vZGVDaGVjazsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImlmICh3aW5kb3cuaXNBbHJlYWR5SW5qZWN0ZWQpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ01hcmtldHBsYWNlIEJvdCBpcyBhbHJlYWR5IGluamVjdGVkIHRvIHRoaXMgcGFnZS4nKTtcclxufVxyXG53aW5kb3cuaXNBbHJlYWR5SW5qZWN0ZWQgPSB0cnVlO1xyXG5cclxuY29uc3QgeyBhZGRBbGxVc2VyTGlzdGluZ3NUb1NraXBMaXN0IH0gPSByZXF1aXJlKCcuL21vZHVsZXMvYWRkQWxsVXNlckxpc3RpbmdzVG9Ta2lwTGlzdCcpO1xyXG5jb25zdCB7IGFwaU9mZmVyVXAgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9hcGlPZmZlclVwJyk7XHJcbmNvbnN0IHsgYXR0YWNoRXZlbnRzIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvYXR0YWNoRXZlbnRzJyk7XHJcbmNvbnN0IHsgc2hvd0FsZXJ0cyB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2NvbnN0YW50cycpO1xyXG5jb25zdCB7IGZldGNoTGlzdGluZ0RldGFpbCB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2ZldGNoTGlzdGluZ0RldGFpbCcpO1xyXG5jb25zdCB7IGdldENvbnNvbGVNZXNzYWdlcywgQ09OU09MRV9NRVNTQUdFIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvZ2V0Q29uc29sZU1lc3NhZ2VzJyk7XHJcbmNvbnN0IHsgZ2V0UGFydG5lckRldGFpbHMgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9nZXRQYXJ0bmVyRGV0YWlscycpO1xyXG5jb25zdCB7IGdldFF1b3RlIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvZ2V0UXVvdGUnKTtcclxuY29uc3QgeyBnZXRWYXJpYW50IH0gPSByZXF1aXJlKCcuL21vZHVsZXMvZ2V0VmFyaWFudCcpO1xyXG5jb25zdCB7IGRlZmF1bHQ6IGdldFdlYnNpdGVWYXJpYWJsZSB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2dldFdlYnNpdGVWYXJpYWJsZScpO1xyXG5jb25zdCB7IGhhbmRsZUZldGNoRXJyb3JzIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvaGFuZGxlRmV0Y2hFcnJvcnMnKTtcclxuY29uc3QgeyBpbmplY3RIb3BsYUxvZ2luIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvaW5qZWN0SG9wbGFMb2dpbicpO1xyXG5jb25zdCB7IGluamVjdExvZ2dlciB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2luamVjdExvZ2dlcicpO1xyXG5jb25zdCB7IGluamVjdE1kbCB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2luamVjdE1kbCcpO1xyXG5jb25zdCB7IGluamVjdE1vbWVudCB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2luamVjdE1vbWVudCcpO1xyXG5jb25zdCB7IGluamVjdFN0eWxlIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvaW5qZWN0U3R5bGUnKTtcclxuY29uc3QgeyBpbmplY3RUcmFja2pzIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvaW5qZWN0VHJhY2tqcycpO1xyXG5jb25zdCB7IGluc2VydFVJIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvaW5zZXJ0VUknKTtcclxuY29uc3QgeyBpc1NoaXBwaW5nRW5hYmxlZCB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2lzU2hpcHBpbmdFbmFibGVkJyk7XHJcbmNvbnN0IHsgbG9hZElucHV0cyB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2xvYWRJbnB1dHMnKTtcclxuY29uc3QgeyBsb2FkU3RhdHMgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9sb2FkU3RhdHMnKTtcclxuY29uc3QgeyBsb2dvdXQgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9sb2dvdXQnKTtcclxuY29uc3QgeyBvblNlc3Npb25SZWFkeSwgbG9naW5fY2FsbGJhY2sgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9vblNlc3Npb25SZWFkeScpO1xyXG4vLyBjb25zdCB7IG1lc3NhZ2VMaXN0ZW4gfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9tZXNzYWdlTGlzdGVuJyk7XHJcbmNvbnN0IHsgcHJlZml4IH0gPSByZXF1aXJlKCcuL21vZHVsZXMvcHJlZml4Jyk7XHJcbmNvbnN0IHsgcHJvY2Vzc0tleXdvcmQgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9wcm9jZXNzS2V5d29yZCcpO1xyXG5jb25zdCB7IHByb2Nlc3NXcml0ZVF1ZXVlIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvcHJvY2Vzc1dyaXRlUXVldWUnKTtcclxuY29uc3QgeyByZXN0b3JlRGVmYXVsdHMgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9yZXN0b3JlRGVmYXVsdHMnKTtcclxuY29uc3QgeyBzaG93TG9hZGluZyB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL3Nob3dMb2FkaW5nJyk7XHJcbi8vIGNvbnN0IHsgc2VuZElzQWxsb3dlZE1lc3NhZ2UgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9zZW5kSXNBbGxvd2VkTWVzc2FnZScpO1xyXG4vLyBjb25zdCB7IHNlbmROb0Zvb3RlckJ1dHRvbiB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL3NlbmROb0Zvb3RlckJ1dHRvbicpO1xyXG5jb25zdCB7IHNraXBzIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvc2tpcHMnKTtcclxuY29uc3QgeyBzbGVlcCB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL3NsZWVwJyk7XHJcbmNvbnN0IHsgc3RhcnQgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9zdGFydCcpO1xyXG5jb25zdCB7IHN0YXRzIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvc3RhdHMnKTtcclxuY29uc3QgeyB0ZXN0VGVtcGxhdGVzIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvdGVzdFRlbXBsYXRlcycpO1xyXG4vLyBjb25zdCB7IHVwZGF0ZUlmcmFtZVZhcmlhbnQgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91cGRhdGVJZnJhbWVWYXJpYW50Jyk7XHJcbmNvbnN0IHsgX2FwaVNlbmRCdWcgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fYXBpU2VuZEJ1ZycpO1xyXG5jb25zdCB7IHZpZXdNb2RlQ2hlY2sgfSA9IHJlcXVpcmUoJy4vdmlld2VybW9kZScpO1xyXG5cclxuLyogZ2xvYmFsIGNocm9tZSwgd2luZG93LCBkb2N1bWVudCwgbG9jYWxTdG9yYWdlICovXHJcbi8vIEB0cy1pZ25vcmVcclxud2luZG93LmV4dGVuc2lvbl92ZXJzaW9uID0gJzMuNjknO1xyXG4vLyBjb25zdCBsaW1pdFNlbmRNZXNzYWdlID0gMTAwMDtcclxud2luZG93Lm1lc3NhZ2VzU2VudCA9IDA7XHJcblxyXG53aW5kb3cuaVN0cmVha3MgPSAwO1xyXG5cclxud2luZG93LmlzUnVuID0gMDtcclxud2luZG93LmlzVmlld01vZGUgPSB0cnVlO1xyXG53aW5kb3cudGFiSWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMCk7XHJcbi8vIGxldCBjaHJvbWVQb3J0O1xyXG53aW5kb3cudGV4dE1hdGNoSW5kZXggPSB7fTtcclxud2luZG93LmlzRW50ZXJwcmlzZSA9IGZhbHNlO1xyXG53aW5kb3cuYnVnUmVwb3J0ID0ge307XHJcblxyXG53aW5kb3cuaXNLTyA9IGZhbHNlO1xyXG5cclxud2luZG93LnN0b3JlRmlyZWJhc2VMb2cgPSBzdG9yZUZpcmViYXNlTG9nO1xyXG53aW5kb3cudGVzdFRlbXBsYXRlcyA9IHRlc3RUZW1wbGF0ZXM7XHJcbndpbmRvdy5yZXN0b3JlRGVmYXVsdHMgPSByZXN0b3JlRGVmYXVsdHM7XHJcbndpbmRvdy5wcmVmaXggPSBwcmVmaXg7XHJcbndpbmRvdy5hcGlPZmZlclVwID0gYXBpT2ZmZXJVcDtcclxud2luZG93LnNraXBzID0gc2tpcHM7XHJcbndpbmRvdy5mZXRjaExpc3RpbmdEZXRhaWwgPSBmZXRjaExpc3RpbmdEZXRhaWw7XHJcbndpbmRvdy5wcm9jZXNzS2V5d29yZCA9IHByb2Nlc3NLZXl3b3JkO1xyXG53aW5kb3cuYWRkQWxsVXNlckxpc3RpbmdzVG9Ta2lwTGlzdCA9IGFkZEFsbFVzZXJMaXN0aW5nc1RvU2tpcExpc3Q7XHJcbndpbmRvdy5DT05TT0xFX01FU1NBR0UgPSBDT05TT0xFX01FU1NBR0U7XHJcbndpbmRvdy5nZXRDb25zb2xlTWVzc2FnZXMgPSBnZXRDb25zb2xlTWVzc2FnZXM7XHJcbndpbmRvdy5nZXRWYXJpYW50ID0gZ2V0VmFyaWFudDtcclxud2luZG93LmdldFF1b3RlID0gZ2V0UXVvdGU7XHJcbndpbmRvdy5zaG93TG9hZGluZyA9IHNob3dMb2FkaW5nO1xyXG53aW5kb3cubG9naW5fY2FsbGJhY2sgPSBsb2dpbl9jYWxsYmFjaztcclxud2luZG93LmdldFBhcnRuZXJEZXRhaWxzID0gZ2V0UGFydG5lckRldGFpbHM7XHJcbndpbmRvdy5ob3BsYV9sb2dvdXQgPSBsb2dvdXQ7XHJcbndpbmRvdy5pc1NoaXBwaW5nRW5hYmxlZCA9IGlzU2hpcHBpbmdFbmFibGVkO1xyXG4vLyB3aW5kb3cuZ2V0UXVvdGVfT0xEID0gZ2V0UXVvdGVfT0xEO1xyXG4vLyB3aW5kb3cudXBkYXRlSWZyYW1lVmFyaWFudCA9IHVwZGF0ZUlmcmFtZVZhcmlhbnQ7XHJcblxyXG5sZXQgaXNPZmZsaW5lID0gZmFsc2U7XHJcblxyXG5jb25zb2xlLmxvZyhgTWFya2V0cGxhY2UgQm90IFZlcnNpb24gJHt3aW5kb3cuZXh0ZW5zaW9uX3ZlcnNpb259YCk7XHJcbnRyeSB7XHJcbiAgKGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgJ3VzZSBzdHJpY3QnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICBsZXQgaXNVcmxNb25pdG9yU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgaWYgKHNob3dBbGVydHMpIGFsZXJ0KCdPZmZlcnVwIEJvdCBoYXMgYmVlbiBpbmplY3RlZCEnKTtcclxuXHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsICgpID0+IHtcclxuICAgICAgaXNPZmZsaW5lID0gZmFsc2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdZb3UgYXJlIGJhY2sgb25saW5lIScpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBsZXQgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGF0dXN0ZXh0Jyk7XHJcbiAgICAgICAgaWYgKGUgJiYgZS50ZXh0Q29udGVudCA9PT0gJ1lvdSBhcmUgYmFjayBvbmxpbmUhJykge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1dpbGwgcmVzdGFydCBib3QuJyk7XHJcbiAgICAgICAgICBzdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMTAwMDApO1xyXG4gICAgfSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgaXNPZmZsaW5lID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS5sb2coJ1lvdSBhcmUgb2ZmbGluZS4nKTtcclxuICAgICAgd2hpbGUgKGlzT2ZmbGluZSkge1xyXG4gICAgICAgIGF3YWl0IHNsZWVwKDEwMDApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBtYWluKCk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JvdCBjcmFzaGVkLiBvZmZsaW5lJywgZSk7XHJcbiAgICAgIF9hcGlTZW5kQnVnKHsgZXJyb3I6ICdGb3VuZCBlcnJvciBpbiB0aGUgYm90LicsIGluZm86IGUudG9TdHJpbmcoKSB9KTtcclxuICAgIH1cclxuICAgIHdpbmRvdy5tYWluID0gbWFpbjtcclxuICAgIHdpbmRvdy5zdGFydCA9IHN0YXJ0O1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcclxuICAgICAgaW5qZWN0U3R5bGUoKTtcclxuICAgICAgaW5qZWN0TW9tZW50KCk7XHJcbiAgICAgIGluamVjdFRyYWNranMoKTtcclxuICAgICAgLy8gdmlld01vZGVDaGVjaygpO1xyXG4gICAgICAvLyBpbml0Q2hyb21lUG9ydCgpO1xyXG4gICAgICBnZXRDb25zb2xlTWVzc2FnZXMoKTtcclxuICAgICAgLy8gbWVzc2FnZUxpc3Rlbih7XHJcbiAgICAgIC8vICAgb25BbGxvd2VkOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgIC8vICAgICBpZiAoZS5kYXRhLmFwcFVzZXIpIHtcclxuICAgICAgLy8gICAgICAgd2luZG93LnRhUGFydG5lcklkID0gZS5kYXRhLmFwcFVzZXIuVUlEX3Nob3AgfHwgZS5kYXRhLmFwcFVzZXIudWlkO1xyXG4gICAgICAvLyAgICAgfVxyXG4gICAgICAvLyAgICAgaWYgKGUuZGF0YS5hcHBVc2VyICYmIGUuZGF0YS5hcHBVc2VyLnVpZCkge1xyXG4gICAgICAvLyAgICAgICB3aW5kb3cudGFVSUQgPSBlLmRhdGEuYXBwVXNlci51aWQ7XHJcbiAgICAgIC8vICAgICAgIGdldFdlYnNpdGVWYXJpYWJsZShlLmRhdGEuYXBwVXNlci51aWQpLnRoZW4oZG9tYWluID0+IHtcclxuICAgICAgLy8gICAgICAgICB3aW5kb3cudmFyX2RvbWFpbiA9IGRvbWFpbiB8fCAnJztcclxuICAgICAgLy8gICAgICAgfSk7XHJcbiAgICAgIC8vICAgICB9XHJcbiAgICAgIC8vICAgICBpZiAoZS5kYXRhLmFwcFVzZXIgJiYgZS5kYXRhLmFwcFVzZXIuZW1haWwpIHtcclxuICAgICAgLy8gICAgICAgd2luZG93LnRhRW1haWwgPSBlLmRhdGEuYXBwVXNlci5lbWFpbDtcclxuICAgICAgLy8gICAgICAgLy8gaXNCdXNpbmVzc1VzZXIod2luZG93LnRhRW1haWwpLnRoZW4oaXNFbnQgPT4ge1xyXG4gICAgICAvLyAgICAgICAvLyAgIGlmIChpc0VudCkgc2hvd1BhcnRuZXJNZXNzYWdlKCk7XHJcbiAgICAgIC8vICAgICAgIC8vIH0pO1xyXG4gICAgICAvLyAgICAgICBpZiAod2luZG93LlRyYWNrSlMgJiYgd2luZG93LnRhRW1haWwpIHtcclxuICAgICAgLy8gICAgICAgICB3aW5kb3cuVHJhY2tKUyAmJiB3aW5kb3cuVHJhY2tKUy5jb25maWd1cmUoe1xyXG4gICAgICAvLyAgICAgICAgICAgdXNlcklkOiB3aW5kb3cudGFFbWFpbCxcclxuICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgLy8gICAgICAgfVxyXG4gICAgICAvLyAgICAgfVxyXG4gICAgICAvLyAgICAgd2luZG93LmlzQWxsb3dlZCA9IHRydWU7XHJcbiAgICAgIC8vICAgICBpZiAoIXdpbmRvdy52aWV3ZXJtb2RlKSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGEgI21lbnUnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAvLyAgICAgY29tcG9uZW50SGFuZGxlci51cGdyYWRlRG9tKCk7XHJcbiAgICAgIC8vICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N3aXRjaC1ydW51bnRpbCcpLmNoZWNrZWQpIHtcclxuICAgICAgLy8gICAgICAgaWYgKHNob3dBbGVydHMpIGFsZXJ0KCdpc2FsbG93ZWQgaGFzIGJlZW4gc2V0LiB3aWxsIHN0YXJ0Jyk7XHJcbiAgICAgIC8vICAgICAgIHdpbmRvdy5pc1J1biA9IDE7XHJcbiAgICAgIC8vICAgICAgIHN0YXRzKCkucmVzZXRDdXJyZW50U3RyZWFrKCk7XHJcbiAgICAgIC8vICAgICAgIHN0YXRzKCkuYWRkUnVuKCk7XHJcbiAgICAgIC8vICAgICAgIHN0YXJ0KCk7XHJcbiAgICAgIC8vICAgICB9XHJcbiAgICAgIC8vICAgICBpZiAoIWlzVXJsTW9uaXRvclN0YXJ0ZWQpIHtcclxuICAgICAgLy8gICAgICAgaXNVcmxNb25pdG9yU3RhcnRlZCA9IHRydWU7XHJcbiAgICAgIC8vICAgICAgIC8vIGxvYWRWYXJpYW50UHJlc2V0KCk7XHJcbiAgICAgIC8vICAgICB9XHJcbiAgICAgIC8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFoZWFkZXInKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWhlYWRlcicpLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWdlMScpLnN0eWxlLmhlaWdodCA9ICdjYWxjKDEwMCUgLSA0OHB4KSc7XHJcbiAgICAgIC8vICAgfVxyXG4gICAgICAvLyB9KTtcclxuICAgICAgLy8gaW5qZWN0TG9nZ2VyKCk7XHJcbiAgICAgIGluc2VydFVJKCk7XHJcbiAgICAgIHNob3dMb2FkaW5nKHRydWUpO1xyXG4gICAgICBpbmplY3RIb3BsYUxvZ2luKG9uU2Vzc2lvblJlYWR5KTtcclxuICAgICAgaW5qZWN0TWRsKCk7XHJcbiAgICAgIGxvYWRJbnB1dHMoKTtcclxuICAgICAgbG9hZFN0YXRzKCk7XHJcbiAgICAgIGF0dGFjaEV2ZW50cygpO1xyXG4gICAgICAvLyBzZW5kSXNBbGxvd2VkTWVzc2FnZSgpO1xyXG4gICAgICAvLyBzZW5kTm9Gb290ZXJCdXR0b24oKTtcclxuICAgICAgcHJvY2Vzc1dyaXRlUXVldWUoKTtcclxuICAgICAgaWYgKHdpbmRvdy5pc0FsbG93ZWQpIHtcclxuICAgICAgICAvLyBsb2FkVmFyaWFudFByZXNldCgpO1xyXG4gICAgICAgIGlzVXJsTW9uaXRvclN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzbGVlcChtcykge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XHJcbiAgICB9XHJcbiAgfSkoKTtcclxufSBjYXRjaCAoZSkge1xyXG4gIGNvbnNvbGUudHJhY2UoKTtcclxuICBjb25zb2xlLmVycm9yKCdjYXVnaHQgZXJyb3InLCBlKTtcclxuICBjb25zb2xlLmxvZygnQ2F1Z2h0IGVycm9yLiBXaWxsIHJlc3RhcnQgYm90LicpO1xyXG4gIF9hcGlTZW5kQnVnKHsgZXJyb3I6ICdGb3VuZCBlcnJvciBpbiB0aGUgYm90LicsIGluZm86IGUudG9TdHJpbmcoKSB9KTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc3RvcmVGaXJlYmFzZUxvZyhsb2csIHRzKSB7XHJcbiAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBcGkoaVRyaWVzKSB7XHJcbiAgICAvLyByZXR1cm4gZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMS90cmFkZS1hcHBsZXMvdXMtY2VudHJhbDEvc2VuZGxvZycsIHtcclxuICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly91cy1jZW50cmFsMS10cmFkZS1hcHBsZXMuY2xvdWRmdW5jdGlvbnMubmV0L3NlbmRsb2cnLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbG9nVHlwZTogJ29mZmVydXAnLFxyXG4gICAgICAgIHRzOiB0cyB8fCAnJyxcclxuICAgICAgICBsb2dcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKGFzeW5jIHJlcyA9PiBoYW5kbGVGZXRjaEVycm9ycyhyZXMpKVxyXG4gICAgICAudGhlbih4ID0+IHgudGV4dCgpKVxyXG4gICAgICAuY2F0Y2goYXN5bmMgZXJyID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdGZXRjaCBGYWlsZWQgKHN0b3JlRmlyZWJhc2VMb2cpJywgZXJyLCBpVHJpZXMpO1xyXG4gICAgICAgIGlmIChpVHJpZXMgJiYgaVRyaWVzID4gNikgcmV0dXJuICcnO1xyXG4gICAgICAgIGF3YWl0IHNsZWVwKDEwMDAwKTtcclxuICAgICAgICBpZiAoIWlUcmllcykgaVRyaWVzID0gMDtcclxuICAgICAgICBpVHJpZXMgKz0gMTtcclxuICAgICAgICByZXR1cm4gZmV0Y2hBcGkoaVRyaWVzKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBmZXRjaEFwaSgpXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignRmV0Y2ggRmFpbGVkIChzdG9yZUZpcmViYXNlTG9nKScsIGVycik7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHNob3dQYXJ0bmVyTWVzc2FnZSgpIHtcclxuICB3aW5kb3cuaXNFbnRlcnByaXNlID0gdHJ1ZTtcclxuICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dpdGNoLXNlbmRwYXJ0bmVybWVzc2FnZXMnKS5jbG9zZXN0KCdsaScpLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhcnRuZXJtZXNzYWdlJykuY2xvc2VzdCgnbGknKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYm1lc3NhZ2UnKS5jbG9zZXN0KCdsaScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldHdvcmttZXNzYWdlJykuY2xvc2VzdCgnbGknKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY2NlcHRtZXNzYWdlJykuY2xvc2VzdCgnbGknKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZWV0dXBtZXNzYWdlJykuY2xvc2VzdCgnbGknKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXJ0bmVybWVzc2FnZScpLmNsb3Nlc3QoJ2xpJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xvc2luZ21lc3NhZ2UnKS5jbG9zZXN0KCdsaScpLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3aXRjaC1zdG9wYWZ0ZXJnYm5ldHdvcmsnKS5jbG9zZXN0KCdsaScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjY2VwdGFuY2VkZWR1Y3Rpb24nKS5jbG9zZXN0KCdsaScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbn0iXSwibmFtZXMiOlsiYXN5bmMiLCJnZXRDaGF0TGlzdGluZ0lkIiwiY2hhdElkIiwibWF0Y2hlcyIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsIm1hdGNoIiwibGVuZ3RoIiwiZ2V0Q2hhdElkIiwibGlzdGluZ0lkIiwicmVzIiwiZmV0Y2giLCJ0aGVuIiwieCIsImpzb24iLCJkYXRhIiwiY2hhdCIsIml0ZW1JZCIsImFwaUdldENoYXRCeUlkIiwiZXhwb3J0cyIsIl9hcGlTZW5kQnVnIiwidHMiLCJEYXRlIiwiZ2V0VGltZSIsImxvZ19pZCIsImVtYWlsIiwiZyIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJ0YWJJZCIsInRhVUlEIiwidWlkIiwiZXh0ZW5zaW9uX3ZlcnNpb24iLCJmZXRjaEFwaSIsImlUcmllcyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibW9kZSIsImhhbmRsZUZldGNoRXJyb3JzIiwidGV4dCIsImNhdGNoIiwiZXJyIiwic2xlZXAiLCJhZGRBbGxVc2VyTGlzdGluZ3NUb1NraXBMaXN0Iiwib3duZXJpZCIsIm93bmVybmFtZSIsImxpc3RpbmdzIiwiYXBpT2ZmZXJVcCIsImdldFVzZXJMaXN0aW5ncyIsImFMaXN0aW5nSWRzIiwiZmlsdGVyIiwiaXRlbSIsIm1hcCIsIkNPTlNPTEVfTUVTU0FHRSIsInNraXBzIiwic2F2ZVRvU2tpcExpc3RpbmdCYXRjaCIsIndhaXRGb3JTZWNvbmRzIiwiaW5mbyIsImNvdW50RG93bklkIiwiTWF0aCIsInJhbmRvbSIsInN0YXJ0Q291bnREb3duIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Iiwic2Vjb25kcyIsIl9jb3VudERvd25JZCIsImlzUnVuIiwic2VuZE1lc3NhZ2UiLCJsaXN0aW5naWQiLCJtc2ciLCJ0aXRsZSIsImRlYnVnX2Rpc2FibGVNZXNzYWdlcyIsImluY2x1ZGVzIiwic3RhdHMiLCJhZGRLbyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJ3YWl0SWZTcGFtRGV0ZWN0ZWQiLCJsb2dJbmZvIiwiaXNLTyIsImdldFVzZXJFbWFpbCIsIl9zdGF0cyIsImdldFN0YXRzIiwic3RyZWFrU2V0dGluZyIsInN0cmVhayIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ2YWx1ZSIsInRpbWVvdXQiLCJmdXR1cmVUcyIsIm1vbWVudCIsImZvcm1hdCIsImFkZFJ1biIsImFwaXJlc3BvbnNlIiwiYWxlcnQiLCJsaXN0aW5nX2lkIiwibGlzdGluZ19uYW1lIiwib3duZXJfaWQiLCJvd25lcl9uYW1lIiwicGFyc2UiLCJwb3N0Rmlyc3RNZXNzYWdlIiwiaWQiLCJkZWxldGVNZXNzYWdlIiwicG9zdFJlc3BvbnNlSWQiLCJ0cmllcyIsImVycm9yX2NvZGUiLCJzZW5kRGVidWdMb2ciLCJnZXRDaGF0cyIsImNoYXRzIiwib0NoYXQiLCJOdW1iZXIiLCJvYmplY3RJZCIsInRhcmdldCIsImxvZyIsInN1Y2Nlc3MiLCJjb3VudENvbnZlcnNhdGlvbnMiLCJyZXNwb25zZSIsImZldGNoTGlzdGluZ3MiLCJrZXl3b3JkIiwiemlwY29kZSIsInBvc3RCb2R5Iiwib3BlcmF0aW9uTmFtZSIsInF1ZXJ5IiwidmFyaWFibGVzIiwic2VhcmNoUGFyYW1zIiwia2V5Iiwic2VhcmNoIiwiZmVlZEl0ZW1zIiwidHlwZSIsInRpbGUiLCJ1c2VyaWQiLCJ1c2VyTGlzdGluZ3MiLCJzdGF0ZSIsImFwaVJlc3BvbnNlIiwiaW5zZXJ0VmFyaWFibGUiLCJ0ZXh0Q29udGVudCIsImxhc3RJbnB1dElkIiwiZVRhcmdldCIsInNsaWNlIiwiam9pbiIsInBhcmVudE5vZGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJmb2N1cyIsIm5ld0N1cnNvclBvc2l0aW9uIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJwdXJnZV9saXN0aW5nc19wcm9tcHQiLCJwcm9tcHQiLCJsaXN0TmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJyZXN1bHQiLCJ0YVBhcnRuZXJJZCIsInB1cmdlX2xpc3RpbmdzIiwicHVyZ2Vfb3duZXJzX3Byb21wdCIsInB1cmdlX293bmVycyIsInNhdmVJbnB1dCIsIm5hbWUiLCJjaGVja2VkIiwic2VsZlJlc3RhcnQiLCJzdGFydCIsInRyYWNlIiwic2V0Vmlld2VyU3RhdGUiLCJhdHRhY2hFdmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwic2VsZWN0aW9uU3RhcnQiLCJ1cGRhdGVJbnB1dHNTdGF0ZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInRlc3RUZW1wbGF0ZXMiLCJyZXN0b3JlRGVmYXVsdHMiLCJsaXN0aW5nc1BlcktleXdvcmQiLCJpbnRlcnZhbENvbnZlcnNhdGlvbnNDaGVjayIsIm1heEl0ZW1zVG9PZmZlclBhcnRuZXIiLCJzaG93QWxlcnRzIiwiZGlzYWJsZUxvZ3MiLCJtZXNzYWdlRGVsYXkiLCJkZWxheVBlclhNZXNzYWdlcyIsInVzZXJEZWxheSIsImZldGNoTGlzdGluZ0RldGFpbCIsImlzUmV0cnkiLCJTdHJpbmciLCJsaXN0aW5nIiwiZGV0YWlscyIsImZpbHRlck91dExpc3RpbmdzTm90SW5QcmljZVJhbmdlIiwiYUxpc3RpbmdzIiwicmFuZ2VNaW4iLCJyYW5nZU1heCIsImxlbmd0aEJlZm9yZSIsImxlbmd0aEFmdGVyIiwicHJpY2UiLCJudW1fbGlzdGluZ3MiLCJpc1ByaWNlSW5SYW5nZSIsImdldENvbnNvbGVNZXNzYWdlcyIsImNvbnNvbGVNZXNzYWdlcyIsIm1lc3NhZ2UiLCJ2YXJpYWJsZSIsInRlbXBsYXRlX25hbWUiLCJsYXN0TG9nIiwiaXNEdXBlTG9nIiwic2hvd0xhc3RDb25zb2xlTG9nIiwicmd4IiwiUmVnRXhwIiwicmVwbGFjZSIsImdldERhdGFGcm9tQXR0cmlidXRlIiwiX2F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVOYW1lIiwib2F0dHJpYnV0ZSIsIkFycmF5IiwiaXNBcnJheSIsImF0dHJpYnV0ZVZhbHVlIiwidG9Mb3dlckNhc2UiLCJnZXRJdGVtSW5mbyIsIl9kYXRhIiwiYXR0cmlidXRlcyIsImxpc3RpbmdDYXRlZ29yeSIsImNhdGVnb3J5QXR0cmlidXRlTWFwIiwiZGVzY3JpcHRpb24iLCJjb25kaXRpb24iLCJnZXRQYXJ0bmVyRGV0YWlscyIsImdldEtleVZhbHVlcyIsImt2SnNvbiIsImdldENvbmRpdGlvblJlYWRhYmxlIiwiY29uZGl0aW9uRnVsbFN0cmluZyIsImRlc2MiLCJ0cmltIiwic3BsaXQiLCJrZXlUb05hbWUiLCJrZXlWYWx1ZXMiLCJieWtleSIsImdldFF1b3RlIiwidmFyaWFudCIsInZhcmlhbnRNb2RlbCIsIm1vZGVsIiwidmFyaWFudFN0b3JhZ2UiLCJzdG9yYWdlIiwidmFyaWFudE5ldHdvcmsiLCJuZXR3b3JrIiwidmFyaWFudENvbmRpdGlvbiIsInZhcmlhbkRlZHVjdGlvbiIsImRlZHVjdGlvbnMiLCJzdG9yYWdlS2V5IiwibmV0d29ya0tleSIsIm1vZGVsS2V5IiwidXJsTW9kZWwiLCJtb2RlbHMiLCJrZXlzIiwiT2JqZWN0Iiwic3RhcnRzV2l0aCIsInB1c2giLCJvIiwiX25hbWUiLCJ1cmxNb2RlbFRvTW9kZWxLZXkiLCJ1cmxTdG9yYWdlIiwidG9VcHBlckNhc2UiLCJieXZhbHVlIiwiZ2V0U3RvcmFnZWtleSIsInVybE5ldHdvcmsiLCJuZXR3b3JrS2V5cyIsInJlbW92ZURlc2NyaXB0aW9uIiwiZ2V0TmV0d29ya0tleSIsImNvbmRpdGlvbktleSIsInVybENvbmRpdGlvbiIsImNvbmRpdGlvbnMiLCJnZXRDb25kaXRpb25LZXkiLCJkZWR1Y3Rpb25LZXlzIiwiYURlZHVjdGlvbnMiLCJkZWR1Y3Rpb25IYXNoIiwiZGVkdWN0aW9uS2V5IiwiZ2V0RGVkdWN0aW9uS2V5cyIsInF1b3RlIiwicHJpY2VSZXMiLCJhRGVkdWN0aW9uS2V5cyIsInNEZWR1Y3Rpb25LZXlzIiwiZ2V0UHJpY2UiLCJ1c2VyRW1haWwiLCJzIiwicHJvcHMiLCJwYWdlUHJvcHMiLCJpbml0aWFsQXBvbGxvU3RhdGUiLCJhY2NvdW50IiwidG9TdHJpbmciLCJnZXRNb2RlbE1hdGNoZXMiLCJnZXRTdG9yYWdlTWF0Y2hlcyIsImdldE5ldHdvcmtNYXRjaGVzIiwiZ2V0RGVkdWN0aW9uTWF0Y2hlcyIsImdldFZhcmlhbnQiLCJ0ZXh0TWF0Y2hJbmRleCIsIm91dCIsIm1vZGVsRnJvbUF0dHJpYnV0ZSIsInNvcnQiLCJtb2RlbE1hdGNoZXMiLCJfbWF0Y2hlcyIsImtleU1hdGNoZXMiLCJ2aWEiLCJpbmRleCIsInNvdXJjZSIsImdldE1vZGVsIiwic3RvcmFnZU1hdGNoZXMiLCJpc1NraXBTdG9yYWdlcyIsInNraXAiLCJnZXRTdG9yYWdlIiwibmV0d29ya0Zyb21BdHRyaWJ1dGUiLCJuZXR3b3JrTWF0Y2hlcyIsImdldE5ldHdvcmsiLCJnZXRDb25kaXRpb24iLCJkZWR1Y3Rpb25NYXRjaGVzIiwiZ2V0RGVkdWN0aW9ucyIsImxpc3RpbmdfcHJpY2UiLCJwYXJzZUZsb2F0IiwibGFzdFZhcmlhbnQiLCJ1cGRhdGVCdWdJbmZvIiwiZ2V0V2Vic2l0ZVZhcmlhYmxlIiwicmVzSnNvbiIsImRvbWFpbiIsImRldGFpbCIsInJlamVjdCIsIm9rIiwic3RhdHVzVGV4dCIsImluamVjdEhvcGxhTG9naW4iLCJvblJlYWR5IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsIm9ubG9hZCIsIkhPUExBX2xvZ2luIiwiaW5pdCIsInByb2plY3RpZCIsIm9ucmVhZHkiLCJ1c2VyIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiaW5qZWN0TG9nZ2VyIiwidW5kZWZpbmVkIiwiZXZlcnl0aGluZyIsImRlZmF1bHRMb2ciLCJiaW5kIiwiZnJvbSIsImFyZ3VtZW50cyIsImFwcGx5IiwidG9Mb2NhbGVTdHJpbmciLCJkZWZhdWx0RXJyb3IiLCJkZWZhdWx0V2FybiIsIndhcm4iLCJkZWZhdWx0RGVidWciLCJkZWJ1ZyIsImluamVjdE1kbCIsImluamVjdE1vbWVudCIsImluamVjdFN0eWxlIiwic3R5bGUiLCJhcHBlbmQiLCJpbmplY3RUcmFja2pzIiwic2VsZiIsIlRyYWNrSlMiLCJ0cmFja0pzIiwibCIsIm4iLCJ1IiwiYSIsImIiLCJ0aGlzIiwiY29uZmlnIiwib25FcnJvciIsImVuYWJsZWQiLCJ3YXRjaCIsInByb3RvdHlwZSIsImMiLCJoYXMiLCJoYXNPd24iLCJ3cmFwRXZlbnRUYXJnZXQiLCJ3cmFwVGltZXIiLCJ3cmFwIiwiZCIsImJpbmRUaW1lIiwiYmluZFN0YWNrIiwiZiIsIndyYXBFcnJvciIsImlzRnVuY3Rpb24iLCJfX3RyYWNranNfc3RhdGVfXyIsInAiLCJFcnJvciIsInN0YWNrIiwiaXNvTm93IiwiaCIsIl9fdHJhY2tqc19fIiwicGF0Y2giLCJoYW5kbGVFdmVudCIsImNhbGwiLCJrIiwicSIsImluaXRDdXJyZW50IiwiY3VycmVudCIsImluaXRPbmx5IiwiYXBwbGljYXRpb24iLCJjb29raWUiLCJ0b2tlbiIsImNhbGxiYWNrIiwibmF2aWdhdGlvbiIsInZpc2l0b3IiLCJwcm9taXNlIiwiZGVmYXVsdHMiLCJkZWR1cGUiLCJkZXBlbmRlbmNpZXMiLCJmb3J3YXJkaW5nRG9tYWluIiwiZXJyb3JVUkwiLCJlcnJvck5vU1NMVVJMIiwiZmF1bHRVUkwiLCJ1c2FnZVVSTCIsInNlcmlhbGl6ZSIsInRhZ05hbWUiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiU3ltYm9sIiwiaXNOYU4iLCJpc0Vycm9yIiwiaGFzT3duUHJvcGVydHkiLCJzZXNzaW9uSWQiLCJ1c2VySWQiLCJ2ZXJzaW9uIiwiZGlzcGxheSIsInJlbW92ZUVtcHR5IiwidmFsaWRhdGUiLCJkZWZhdWx0c0RlZXAiLCJzZXRDdXJyZW50IiwidmFsaWRhdGVBcnJheSIsImNvbnRhaW5zIiwiciIsInV0aWwiLCJvbkZhdWx0Iiwid3JhcENvbnNvbGVPYmplY3QiLCJ0aW1lc3RhbXAiLCJzZXZlcml0eSIsIm0iLCJoYXNGdW5jdGlvbiIsInJlcG9ydCIsImFsbCIsInYiLCJjb3JyZWxhdGlvbklkIiwiaW5pdGlhbGl6ZSIsImdldEN1c3RvbWVyVG9rZW4iLCJnZXRDb3JyZWxhdGlvbklkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJ1dWlkIiwidyIsImxvYWRlZE9uIiwib3JpZ2luYWxVcmwiLCJnZXRMb2NhdGlvbiIsInJlZmVycmVyIiwiaXNCcm93c2VyIiwiZGlzY292ZXJEZXBlbmRlbmNpZXMiLCJqUXVlcnkiLCJmbiIsImpxdWVyeSIsInVpIiwialF1ZXJ5VUkiLCJhbmd1bGFyIiwiZnVsbCIsIlZlcnNpb24iLCJWRVJTSU9OIiwiYWdlIiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwidmlld3BvcnRIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJ2aWV3cG9ydFdpZHRoIiwiY2xpZW50V2lkdGgiLCJhcHBlbmRlciIsIm1heExlbmd0aCIsImNhdGVnb3J5IiwiY2xlYXIiLCJ0cnVuY2F0ZSIsIm1heCIsImdldCIsIkQiLCJhZGRNZXRhZGF0YSIsInJlbW92ZU1ldGFkYXRhIiwic3RvcmUiLCJ5Iiwib3B0aW9ucyIsImlzQ29tcGF0aWJsZSIsInJlY29yZCIsInRvIiwib24iLCJnZXRMb2NhdGlvblVSTCIsInJlbGF0aXZlIiwiaGlzdG9yeSIsInoiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJ3YXRjaE5ldHdvcmtPYmplY3QiLCJYRG9tYWluUmVxdWVzdCIsImlzV3JhcHBhYmxlRnVuY3Rpb24iLCJ3YXRjaEZldGNoIiwiZXNjYXBlVXJsIiwiRSIsIlJlcXVlc3QiLCJ1cmwiLCJzdGFydGVkT24iLCJjb21wbGV0ZWRPbiIsInN0YXR1c0NvZGUiLCJzdGF0dXMiLCJoZWFkZXJzIiwicmVxdWVzdENvcnJlbGF0aW9uSWQiLCJzZW5kIiwiaW5kZXhPZiIsIl90cmFja0pzIiwibG9nSWQiLCJsaXN0ZW5Gb3JOZXR3b3JrQ29tcGxldGUiLCJQcm9ncmVzc0V2ZW50IiwicmVhZHlTdGF0ZSIsImZpbmFsaXplTmV0d29ya0V2ZW50IiwiY2hlY2tOZXR3b3JrRmF1bHQiLCJvbmVycm9yIiwib2xkT25FcnJvciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImdldFJlc3BvbnNlSGVhZGVyIiwidCIsImRpc2FibGVkIiwidGhyb3R0bGVTdGF0cyIsImF0dGVtcHRDb3VudCIsInRocm90dGxlZENvdW50IiwibGFzdEF0dGVtcHQiLCJlcnJvckVuZHBvaW50IiwidGVzdENyb3NzZG9tYWluWGhyIiwicHJvdG9jb2wiLCJ1c2FnZUVuZHBvaW50IiwiYXBwZW5kT2JqZWN0QXNRdWVyeSIsInRyYWNrZXJGYXVsdEVuZHBvaW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0Q09SU1JlcXVlc3QiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZFRyYWNrZXJGYXVsdCIsInRocm90dGxlIiwic3JjIiwic2VuZFVzYWdlIiwic2VuZEVycm9yIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiaXNXb3JrZXIiLCJ0aHJvdHRsZWQiLCJjb25zdHJ1Y3RvciIsImlzTm9kZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJhZGRFdmVudExpc3RlbmVyU2FmZSIsImF0dGFjaEV2ZW50IiwiYWZ0ZXJEb2N1bWVudExvYWQiLCJkZWZlciIsInBhcnNlVVJMIiwiaXNPYmplY3QiLCJpc0Jyb3dzZXJJRSIsInBhcnNlSW50IiwiaXNCcm93c2VyU3VwcG9ydGVkIiwibm9kZVR5cGUiLCJ0b0lTT1N0cmluZyIsImdldFVUQ0Z1bGxZZWFyIiwicGFkIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInRvRml4ZWQiLCJub29wIiwiaG9zdCIsInBhdGgiLCJoYXNoIiwib3JpZ2luIiwic3Vic3RyIiwidHJ5R2V0IiwiaW5uZXJFcnJvciIsImZpbGUiLCJsaW5lIiwibGluZU51bWJlciIsImNvbHVtbiIsImNvbHVtbk51bWJlciIsIkEiLCJvbkRvY3VtZW50Q2xpY2tlZCIsIm9uSW5wdXRDaGFuZ2VkIiwiZ2V0RWxlbWVudEZyb21FdmVudCIsImlzRGVzY3JpYmVkRWxlbWVudCIsIndyaXRlVmlzaXRvckV2ZW50Iiwib25TZWxlY3RJbnB1dENoYW5nZWQiLCJtdWx0aXBsZSIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImdldEVsZW1lbnRUeXBlIiwiZ2V0RWxlbWVudEF0dHJpYnV0ZXMiLCJpbm5lclRleHQiLCJfX3RyYWNranNfZWxlbWVudF90ZXh0IiwiYWN0aW9uIiwiZWxlbWVudCIsInRhZyIsImdldE1ldGFWYWx1ZSIsImVsZW1lbnRGcm9tUG9pbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1pbiIsInBhdHRlcm4iLCJtYXRjaElucHV0UGF0dGVybiIsInRlc3QiLCJCIiwid2F0Y2hXaW5kb3dFcnJvcnMiLCJ3YXRjaFByb21pc2VFcnJvcnMiLCJDIiwiaGFzSW5zdGFsbGVkIiwiaGFzRW5hYmxlZCIsImluc3RhbGwiLCJtZXRhZGF0YSIsIl90cmFja0pTIiwiX3RyYWNranMiLCJ0cmFuc21pdHRlciIsImVudmlyb25tZW50IiwiY3VzdG9tZXIiLCJ3aW5kb3dDb25zb2xlV2F0Y2hlciIsImNhbGxiYWNrV2F0Y2hlciIsInZpc2l0b3JXYXRjaGVyIiwibmF2aWdhdGlvbldhdGNoZXIiLCJuZXR3b3JrV2F0Y2hlciIsIndpbmRvd1dhdGNoZXIiLCJwdWIiLCJhdHRlbXB0IiwiY29uZmlndXJlIiwiaXNJbnN0YWxsZWQiLCJ0cmFjayIsIndhdGNoQWxsIiwiZm9yY2UiLCJhZ2VudFBsYXRmb3JtIiwiZW50cnkiLCJmaWxlTmFtZSIsIm5hdiIsImluc2VydFVJIiwiaXNTaGlwcGluZ0VuYWJsZWQiLCJsaXN0aW5nRGV0YWlsIiwiZnVsZmlsbG1lbnREZXRhaWxzIiwic2hpcHBpbmdFbmFibGVkIiwibG9hZElucHV0cyIsImlzUnVuVW50aWxMb2FkZWQiLCJnZXRJdGVtIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJlUmFkaW8iLCJNYXRlcmlhbFJhZGlvIiwiY2hlY2siLCJsb2FkU3RhdHMiLCJub3ciLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImRhc2hib2FyZERhdGFLZXlzIiwib1dyaXRlIiwiS08iLCJsb2dvdXQiLCJub3R5b3UiLCJsb2dpbl9jYWxsYmFjayIsIm9uU2Vzc2lvblJlYWR5Iiwic2hvd0xvYWRpbmciLCJpc0Fub255bW91cyIsImNvbXBvbmVudEhhbmRsZXIiLCJ1cGdyYWRlRG9tIiwicGFydG5lcklkIiwiaXNUZWFtTWVtYmVyIiwiZ2V0UGFydG5lcklkIiwidGFFbWFpbCIsInNob3dTdWJzY3JpcHRpb24iLCJ2YXJfZG9tYWluIiwicGFydG5lcl9kZXRhaWxzIiwid2Vic2l0ZSIsImhlaWdodCIsInN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbl9kZXRhaWxzIiwiYnVzaW5lc3MiLCJ0cmFkZXIiLCJnZXRTdWJzY3JpcHRpb24iLCJlSW5mb0hlYWRlciIsImh0bWxMb2dvdXQiLCJpc0FsbG93ZWQiLCJpbm5lckhUTUwiLCJjaGVja0Rpc2FibGVkIiwiZ2V0QWRqdXN0ZWRQcmljZURlbHRhIiwiZGVsdGEiLCJwYXJzZVZhcmlhYmxlcyIsInZhcmlhbnRRdW90ZSIsIm93bmVyTmFtZSIsIl9tZXNzYWdlIiwiY3VzdG9tUHJpY2VEZWx0YSIsImxpc3RpbmdQcmljZURlbHRhIiwicGFydG5lcl9saW5rIiwibWludXMiLCJuZXdQcmljZSIsInJvdW5kdXBkb3duIiwicm91bmRVcERvd24iLCJtdWx0aXBsaWVyIiwiY2VpbCIsImFicyIsImZsb29yIiwiZ2V0Um91bmRlZFByaWNlIiwibmV3TGlzdGluZ1ByaWNlIiwicHJlZml4IiwiaXNPd25lck51bUxpc3RpbmdzSW5SYW5nZSIsImFPdGhlcmlQaG9uZUxpc3RpbmdzIiwiZ2V0T3RoZXJJcGhvbmVMaXN0aW5ncyIsIm51bUxpc3RpbmdzIiwiaXNTaW5nbGUiLCJhZGRTaW5nbGVMaXN0aW5ncyIsImFkZE11bHRpTGlzdGluZ3MiLCJvd25lcl9saXN0cyIsInJhbmRvbUludEZyb21JbnRlcnZhbCIsImhhc1VucGFyc2FibGVWYXJpYWJsZXMiLCJoYXNVbnBhcnNlZCIsImxpc3RpbmdEYXRhIiwiaXNNZXNzYWdlU2VudCIsIm93bmVySWQiLCJvd25lciIsInByb2ZpbGUiLCJzYXZlVG9Ta2lwTGlzdGluZyIsInBvc3RNc2dJZCIsImFsbG1lc3NhZ2UiLCJ0ZW1wbGF0ZXNVc2VkIiwidGVtcGxhdGVzIiwib3BlbmVybWVzc2FnZSIsIl9wb3N0aWQiLCJtZXNzYWdlX3NlbnQiLCJ0c1dhaXQiLCJoaCIsIm1tIiwic3MiLCJxdWVzdGlvbl8xIiwicXVlc3Rpb25fMiIsImxvZ01zZ1NlbnQiLCJzZW50U3RvcmFnZU1lc3NhZ2UiLCJzZW50TmV0d29ya01lc3NhZ2UiLCJzdG9wU2VuZGluZyIsImdiTWVzc2FnZSIsIm5ldHdvcmtNZXNzYWdlIiwib2ZmZXJNZXNzYWdlIiwibG93YmFsbF9tZXNzYWdlIiwibWVldHVwTWVzc2FnZSIsIm1lc3NhZ2VzU2VudCIsImFkZE9mZmVyIiwiYWRkU3RyZWFrIiwidGVtcGxhdGVOYW1lIiwidG9HTVRTdHJpbmciLCJVc2VySUQiLCJOYW1lIiwiTGlzdGluZ0lEIiwidGVtcGxhdGUiLCJzZW5kQm90TG9nIiwic3RyZWFrVGltZW91dENoZWNrIiwic3RyZWFrTWF4Iiwic3RyZWFrdGltZW91dCIsImlTdHJlYWtzIiwicmVzZXRDdXJyZW50U3RyZWFrIiwicHJvY2Vzc0tleXdvcmQiLCJ3YWl0Rm9yRm9vIiwiYWRkVG90YWxMaXN0aW5nc1NjcmFwZWQiLCJrZXl3b3JkcyIsImFsbEtleXdvcmRzIiwiZmlsdGVyTGlzdGluZ3NXaXRoS2V5d29yZCIsInRleHRDb250YWluc1NraXBXb3JkIiwiZmlsdGVyT3V0TGlzdGluZ1RpdGxlc1dpdGhTa2lwV29yZHMiLCJhZGRUb1NraXBMaXN0IiwiZmlsdGVyT3V0TGlzdGluZ3NTaGlwcGluZ0VuYWJsZWQiLCJmaWx0ZXJPdXREZWxldGVkTGlzdGluZ3MiLCJsaXN0aW5nc0NoZWNrZWQiLCJpc1NraXBMaXN0aW5nIiwiYWRkTmV3TGlzdGluZ3MiLCJpc1NraXBNZXNzYWdlZFVzZXIiLCJtZXNzYWdlU2VudCIsInNhdmVUb01lc3NhZ2VkVXNlcnMiLCJtc1dhaXQiLCJwcm9jZXNzV3JpdGVRdWV1ZSIsIndyaXRlUXVldWUiLCJxdWV1ZSIsInNoZWV0c0FwaVJlc3BvbnNlIiwiZ2V0RGVmYXVsdENvbnRlbnQiLCJ0cmlnZ2VyQ2hhbmdlIiwiZXZ0IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZmlyZUV2ZW50IiwicGFyZW50RWxlbWVudCIsIk1hdGVyaWFsVGV4dGZpZWxkIiwiY2hhbmdlIiwiZ2V0RGVmYXVsdFNldHRpbmdzIiwib0RlZmF1bHRzIiwicm93IiwiemlwY29kZXMiLCJza2lwV29yZHMiLCJsaXN0aW5nTWluUHJpY2UiLCJsaXN0aW5nTWF4UHJpY2UiLCJsaXN0aW5nTWF4QWdlIiwicHJpY2VSb3VuZGluZyIsImNvbnRpbnVlQWZ0ZXJTdG9yYWdlIiwiY29udGludWVBZnRlck5ldHdvcmsiLCJ3YWl0Rm9yTWRsIiwiTWF0ZXJpYWxTd2l0Y2giLCJvZmYiLCJzdG9yYWdlTWVzc2FnZSIsInF1ZXN0aW9uXzMiLCJxdWVzdGlvbl80IiwibG93YmFsbE1lc3NhZ2UiLCJvZmZlcm1lc3NhZ2UiLCJlbmFibGUiLCJ2aWV3ZXJtb2RlIiwiaXNWaWV3TW9kZSIsImNsaWNrIiwib25MaW5lIiwic2hvdyIsImVMb2FkaW5nT3ZlcmxheSIsImluamVjdCIsImdldEFnZUluRGF5cyIsInBvc3REYXRlIiwiZHBvc3REYXRlIiwic2F2ZUlkVG9Mb2dCYXRjaCIsImxpc3RuYW1lIiwiYUlkcyIsImxvY2FsQ2hlY2siLCJzYXZlSWRUb0xvZyIsInN5bmNMb2dUb0RiIiwiZGJsaXN0bmFtZSIsInJlYWQiLCJpc0lkSW5Mb2ciLCJub2V4cGlyeSIsInNhdmVUb1BhcnRuZXJNZXNzYWdlZCIsImFMaXN0aW5naWRzIiwiX2lkIiwiY3VycmVudExpc3RpbmdJZCIsIm90aGVyTGlzdGluZ3MiLCJtYXhBZ2UiLCJhZ2VJbkRheXMiLCJoYXNTa2lwV29yZCIsIlNldCIsImlzU2tpcFBhcnRuZXJNZXNzYWdlIiwibXMiLCJjYW5SdW4iLCJmaW5kIiwiZWwiLCJydW5Gcm9tIiwicnVuVW50aWwiLCJkRnJvbSIsInNldEhvdXJzIiwiZFVudGlsIiwic2V0RGF0ZSIsImdldEtleXdvcmQiLCJsYXN0WmlwSWR4IiwibGFzdEt3SWR4Iiwiemlwb2RlcyIsImlzU3BhbUhhbHQiLCJtYXhDb252b0NoZWNrIiwibWF4Q29udm9zIiwiY29udm9zIiwic2V0VGhyZWFkc0NvdW50IiwibWF4Q29udm9SZWFjaGVkIiwicnVuVW50aWxTd2l0Y2hPZmYiLCJyZW1vdmVJdGVtIiwid2FpdEZvclNjaGVkdWxlIiwiaXNXYWl0aW5nRm9yU2NoZWR1bGUiLCJod25kIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidmFsaWRhdGVTcGludGF4ZXMiLCJtc0hhbHQiLCJpIiwib1N0YXRzIiwic2F2ZSIsIm9mZmVycyIsImFkZFBhcnRuZXIiLCJwYXJ0bmVycyIsInJ1bnMiLCJzdHJlYWtzIiwia2V5X2lkcyIsImlkcyIsInVuaXF1ZUlkcyIsImNvbmNhdCIsImxpc3RpbmdzX3NjcmFwZWQiLCJudW1fdGhyZWFkcyIsIm5ld19saXN0aW5ncyIsInNpbmdsZV9saXN0aW5ncyIsIm11bHRpX2xpc3RpbmdzIiwic3RhdEtleXMiLCJzcGludGF4Iiwibm9zcGluIiwidW5zcGluIiwibWVzc2FnZXMiLCJ0ZXN0VmFyaWFudCIsIndvcmQiLCJpdGVtSW5mbyIsImJ1Z1JlcG9ydCIsImluc2VydEluZm8iLCJyZXBsYWNlQ29sb3JzIiwibGlzdGluZ190aXRsZSIsImxpc3RpbmdfZGVzY3JpcHRpb24iLCJtb2RlbERldGFpbCIsImxpc3RpbmdfZGV0YWlsX21vZGVsIiwibmV0d29ya0RldGFpbCIsImxpc3RpbmdfZGV0YWlsX25ldHdvcmsiLCJsYWJlbCIsImluc2VydFZhcmlhbnRJbmZvIiwidGV4dFRvUmVwbGFjZSIsInRleHRNYXRjaEtleSIsInN0ciIsInJlZ2V4cyIsImlucHV0SWRzIiwiaW52YWxpZHMiLCJnZXRUb2RheSIsIndyaXRlVG9EYXNoQm9hcmQiLCJvZmZlcl9hZGRfZGVkdWN0Iiwic2tpcF9zaGlwcGluZyIsIm1heF9zdHJlYWsiLCJkZWxldGVfYWZ0ZXJfc2VuZGluZyIsInNraXB3b3JkcyIsIm1heF9jb25jdXJyZW50IiwicnVuX2Zyb20iLCJ1bnRpbCIsImRhdGVUb2RheSIsIm1vbnRoIiwiZGF5IiwiZ2V0RGF0ZVRvZGF5IiwicGFydG5lcl9lbWFpbCIsImRhdGUiLCJydW50aW1lSGl0cyIsImxhc3RFbnRyeSIsIm1pbnMiLCJydW5UaW1lUGVyRGF5IiwiaW5jcmVtZW50UnVuVGltZVRvZGF5IiwiaGl0UnVudGltZSIsInJ1bnRpbWVfcG9pbnRzIiwiZ2V0UnVuVGltZVBvaW50cyIsIm1vZHVsZSIsImlzU3BpbnRheCIsImZpbmRTcGludGF4IiwicmFuZG9tRm4iLCJzcGluIiwiY2hvaWNlIiwib3JpZ2luYWxUZXh0IiwidW5zcGluQ291bnQiLCJjb3VudCIsIm51bSIsInRvdGFscyIsInRvdGFsIiwicmVGaW5kIiwicmVQYXJzZSIsInZhbCIsInZpZXdNb2RlQ2hlY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIm9iaiIsInByb3AiLCJ0b1N0cmluZ1RhZyIsImlzQWxyZWFkeUluamVjdGVkIiwiZGVmYXVsdCIsInJvdW5kIiwiaXNFbnRlcnByaXNlIiwic3RvcmVGaXJlYmFzZUxvZyIsImxvZ1R5cGUiLCJob3BsYV9sb2dvdXQiLCJpc09mZmxpbmUiLCJpc1VybE1vbml0b3JTdGFydGVkIiwibWFpbiJdLCJzb3VyY2VSb290IjoiIn0=