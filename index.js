/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={8927:(e,t)=>{async function n(){const e=function(){const e=window.location.href.match(/inbox\/message\/(\d+)/);if(e&&e.length>1)return e[1]}(),t=await async function(e){const t=await fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36","sec-ch-ua":'"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"Windows"',"sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"504b9a10-8d47-4c8e-afa1-6bfd89b94453"},referrer:`https://offerup.com/inbox/message/${e}?alertId=2890122750`,referrerPolicy:"strict-origin-when-cross-origin",body:`{"operationName":"GetChatById","variables":{"id":"${e}"},"query":"query GetChatById($id: String!, $before: String) {\\n  chat: discussion(data: {discussionId: $id, before: $before}) {\\n    itemId\\n    sellerId\\n    buyerId\\n    deactivatedUserId\\n    dateCreated\\n    lastPostDate\\n    readStatus {\\n      userId\\n      lastReadDate\\n      __typename\\n    }\\n    visualTags {\\n      tag\\n      type\\n      displayText\\n      __typename\\n    }\\n    messages {\\n      id\\n      recipientId\\n      senderId\\n      text\\n      sendDateString\\n      metadataType\\n      metadata {\\n        photos {\\n          small {\\n            url\\n            width\\n            height\\n            __typename\\n          }\\n          medium {\\n            url\\n            width\\n            height\\n            __typename\\n          }\\n          large {\\n            url\\n            width\\n            height\\n            __typename\\n          }\\n          __typename\\n        }\\n        messageUrl\\n        systemMessageContext {\\n          iconUrl\\n          actions {\\n            actionPath\\n            externalURL\\n            actionText\\n            __typename\\n          }\\n          titleText\\n          bodyText\\n          __typename\\n        }\\n        place {\\n          name\\n          formattedAddress\\n          placeId\\n          longitude\\n          latitude\\n          __typename\\n        }\\n        messageButtonText\\n        messageTitle\\n        __typename\\n      }\\n      __typename\\n    }\\n    listing {\\n      id\\n      listingId\\n      title\\n      price\\n      originalPrice\\n      isFirmOnPrice\\n      state\\n      category {\\n        id\\n        name\\n        levelOneName\\n        levelTwoName\\n        levelThreeName\\n        __typename\\n      }\\n      photos {\\n        uuid\\n        detail {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        detailSquare {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        __typename\\n      }\\n      fulfillmentDetails {\\n        buyItNowEnabled\\n        shippingEnabled\\n        localPickupEnabled\\n        shippingPrice\\n        estimatedDeliveryDateStart\\n        estimatedDeliveryDateEnd\\n        sellerPaysShipping\\n        shippingParcelId\\n        canShipToBuyer\\n        __typename\\n      }\\n      __typename\\n    }\\n    otherUserProfile {\\n      userId\\n      avatars {\\n        squareImage\\n        __typename\\n      }\\n      isTruyouVerified\\n      name\\n      dateJoined\\n      publicLocationName\\n      ratingSummary {\\n        count\\n        average\\n        __typename\\n      }\\n      c2cPhoneNumber {\\n        countryCode\\n        nationalNumber\\n        __typename\\n      }\\n      isAutosDealer\\n      isSubPrimeDealer\\n      isTruyouVerified\\n      websiteLink\\n      publicLocation {\\n        formattedAddress\\n        name\\n        latitude\\n        longitude\\n        __typename\\n      }\\n      __typename\\n    }\\n    otherUserRelationship {\\n      following\\n      blocked\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}`,method:"POST",mode:"cors",credentials:"include"}).then((e=>e.json()));return t&&t.data&&t.data.chat&&t.data.chat.itemId}(e);return t}window.getChatId=n,t.t=n},4484:(e,t,n)=>{"use strict";n.r(t),n.d(t,{_apiSendBug:()=>r});var i=n(2617),a=n(2287),s=n(4246);function r(e){const t=(new Date).getTime();e.log_id=t;try{e.email||(e.email=(0,i.g)())}catch(e){console.error("failed to add email to log.")}return window.tabId&&(e.tabId=window.tabId),window.taUID&&(e.uid=window.taUID),e.extension_version=window.extension_version,async function t(n){return fetch("https://webhook.hopla.workers.dev/offerupbot?project=OfferUpBot",{method:"POST",body:JSON.stringify(e),mode:"no-cors"}).then((async e=>(0,a.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (_apiSendBug)",e,n),n&&n>6?"":(await(0,s.sleep)(1e4),n||(n=0),t(n+=1)))))}().catch((e=>(console.error("Fetch Failed (_apiSendBug)",e),"")))}},9088:(e,t,n)=>{"use strict";n.r(t),n.d(t,{addAllUserListingsToSkipList:()=>r});var i=n(8498),a=n(3539),s=n(6725);async function r(e){const t=await(0,i.apiOfferUp)().getUserListings(e);if(t){const n=t.filter((e=>e.listingId)).map((e=>e.listingId));return(0,a.CONSOLE_MESSAGE)("custom",`Adding ${n.length} listings of user ${e} to skip list.`),(0,s.skips)().saveToSkipListingBatch(n)}}},8498:(e,t,n)=>{"use strict";n.r(t),n.d(t,{apiOfferUp:()=>m});var i=n(1203),a=n(3539),s=(n(9105),n(2617)),r=n(2287),o=n(6849),l=n(4246),c=n(7367);function d(e,t){return window.countDownId=Math.random(),u(e,t,window.countDownId),new Promise((t=>{window.countDownId="",setTimeout((()=>{t()}),1e3*e)}))}function u(e,t,n){window.isRun&&(e<=1||n===window.countDownId&&((new Date).getTime(),e<=1||setTimeout((()=>{u(e-1,t,n)}),1e3)))}var p=n(4484);function m(){return{sendMessage:async function(e,t,n,o,d){if(!t)return;if(!e)return;if(i.debug_disableMessages)return;let u=await async function n(i){return fetch("https://offerup.com/api/graphql",{credentials:"include",headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",Accept:"*/*","Accept-Language":"en-US,en;q=0.5","content-type":"application/json","x-ou-d-token":"web-8a263c39445e93084073408011803c17b413d18fa91fafb9f64f706f","x-ou-f-token":"6af29b25b551922205a90937fd164603",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0","Proxy-Authorization":"Basic dHJhZGVhcHBsZXM6YXBwbGVzdHJhZGU2OQ=="},referrer:`https://offerup.com/item/detail/${e}`,body:`{"operationName":"StartChat","variables":{"listingId":"${e}","text":"${t}","suggestedMessageUuid":"8E8F653A-F693-476C-8E33-6DA990D81763"},"query":"mutation StartChat($listingId: ID!, $text: String!, $suggestedMessageUuid: String) {\\n  postFirstMessage(\\n    data: {itemId: $listingId, text: $text, suggestedMessageUuid: $suggestedMessageUuid}\\n  ) {\\n    id: discussionId\\n    __typename\\n  }\\n}\\n"}`,method:"POST",mode:"cors"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (sendMessage)",e,i),i&&i>6?"":(await(0,l.sleep)(1e4),i||(i=0),n(i+=1)))))}().catch((e=>(console.error("Fetch Failed",e),"")));if(!u)return u;if(u&&u.match&&u.match(/currently serve areas outside of the US/i))return console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),(0,a.CONSOLE_MESSAGE)("custom","Proxy Failed - Got Error: Currently serve areas outside of the US"),await(0,l.sleep)(6e4),"";if(u&&u.includes("Before you can send a message, please verify your mobile number"))console.error("User is not verified. Requires mobile verification");else{if(u&&u.includes("Conversation limit reached")){(0,c.stats)().addKo(),localStorage.setItem("tsSpamDetected",(new Date).getTime()+60*i.waitIfSpamDetected*1e3);const r={msg:"Conversation limit has been reached"};window.isKO=!0;const u=(0,s.g)();u&&(r.email=u);const p=(0,c.getStats)();p&&(r.stats=p),r.streakSetting={streak:document.getElementById("streak").value,timeout:document.getElementById("streaktimeout").value};const h=(new Date).getTime()+60*i.waitIfSpamDetected*1e3;if((0,a.CONSOLE_MESSAGE)("halted_soft",{hh:moment(h).format("HH"),mm:moment(h).format("mm"),ss:moment(h).format("ss")}),await(0,l.sleep)(60*i.waitIfSpamDetected*1e3),window.isKO=!1,!window.isRun)return;return(0,c.stats)().addRun(),m().sendMessage(e,t,n,o,d)}if(u&&u.includes("Verification Required"))console.error("Verification required! Verify via app and restart the bot."),(0,p._apiSendBug)({msg:"Verification required! Verify via app and restart the bot.",apiresponse:u}),window.isKO=!0,(0,a.CONSOLE_MESSAGE)("custom","Verification required! Verify via app and restart the bot."),alert("Verification required! Verify via app and restart the bot."),await(0,l.sleep)(59994e4),window.isKO=!1;else if(u&&u.includes("have blocked the other user in the thread"))(0,a.CONSOLE_MESSAGE)("thread_removed",{listing_id:e,listing_name:n,owner_id:o,owner_name:d});else if(u&&u.includes("errors"))console.error("Failed to send message",u),(0,p._apiSendBug)({msg:"Failed to send message to user",apiresponse:u}),u.includes("INTERNAL_SERVER_ERROR")&&(console.error("Offerup INTERNAL_SERVER_ERROR. Bot will halt."),(0,a.CONSOLE_MESSAGE)("custom","Offerup INTERNAL_SERVER_ERROR. Bot will halt.")),window.isKO=!0,await(0,l.sleep)(60*i.waitIfSpamDetected*1e3),window.isKO=!1;else if(u&&u.includes("postFirstMessage"))return u=JSON.parse(u),u.data.postFirstMessage.id}},deleteMessage:async function(e,t){t||(t=0);const n=await async function(){return await async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"2b410a33-b5a6-455c-9093-a66e91d83e2d"},referrer:"https://offerup.com/item/detail/1236460483",referrerPolicy:"strict-origin-when-cross-origin",body:'{"operationName":"GetChats","variables":{},"query":"query GetChats {\\n  getChats: alertsWithAds(type: INBOX) {\\n    chats: alertsWithAds {\\n      ... on Alert {\\n        contentThumbnails\\n        id\\n        read\\n        seen\\n        type\\n        title\\n        notificationText\\n        dateAdded\\n        objectId\\n        visualTags {\\n          tag\\n          type\\n          displayText\\n          __typename\\n        }\\n        sender {\\n          id\\n          profile {\\n            firstName\\n            isTruyouVerified\\n            isAutosDealer\\n            avatars {\\n              squareImage\\n              __typename\\n            }\\n            notActive\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      ... on BingAd {\\n        ouAdId\\n        itemName\\n        imageUrl\\n        sellerName\\n        price\\n        lowPrice\\n        impressionFeedbackUrl\\n        contentUrl\\n        adNetwork\\n        adExperimentId\\n        adRequestId\\n        experimentDataHash\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}',method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (getChatId)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,o.Z)({error:"Failed to parse deleteMessage api response.",x:e}),{}}})).then((t=>{if(t&&"proxy-failed"===t.error_code)return console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),"";if(t&&t.data&&t.data.getChats&&t.data.getChats.chats)for(const n of t.data.getChats.chats)if(Number(n.objectId)===Number(e))return n.id;(0,p._apiSendBug)({error:"Failed to find target objectID",target:e})}))}();return n?(t&&(console.log({error:`Successfully deleted conversation after ${t} retries.`,postResponseId:e}),(0,p._apiSendBug)({success:`Successfully deleted conversation after ${t} retries.`,postResponseId:e})),async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"9d22b385-ea56-4954-b533-89b7c6be1829"},referrer:"https://offerup.com/inbox",referrerPolicy:"strict-origin-when-cross-origin",body:`{"operationName":"ArchiveChats","variables":{"ids":["${n}"]},"query":"mutation ArchiveChats($ids: [String!]!) {\\n  archiveAlerts(alertIds: $ids)\\n}\\n"}`,method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (deleteMessage)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((e=>{if(e&&e.includes("archiveAlerts"))return!0})).catch((e=>(console.error("Fetch Failed",e),"")))):(t+=1)<6?(await d(5,"Wait 5 seconds before retrying to delete conversation."),m().deleteMessage(e,t)):(console.error({error:"Failed to get chat id to delete after 5 retries.",postResponseId:e}),void(0,p._apiSendBug)({error:"Failed to get chat id to delete after 5 retries.",postResponseId:e}))},countConversations:async function(){try{async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"80707cf9-26e1-4dbb-b3b3-3bf45c711c5f"},referrer:"https://offerup.com/inbox",referrerPolicy:"strict-origin-when-cross-origin",body:'{"operationName":"GetChats","variables":{},"query":"query GetChats {\\n  getChats: alertsWithAds(type: INBOX) {\\n    chats: alertsWithAds {\\n      ... on Alert {\\n        contentThumbnails\\n        id\\n        read\\n        seen\\n        type\\n        title\\n        notificationText\\n        dateAdded\\n        objectId\\n        visualTags {\\n          tag\\n          type\\n          displayText\\n          __typename\\n        }\\n        sender {\\n          id\\n          profile {\\n            firstName\\n            isTruyouVerified\\n            isAutosDealer\\n            avatars {\\n              squareImage\\n              __typename\\n            }\\n            notActive\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      ... on BingAd {\\n        ouAdId\\n        itemName\\n        imageUrl\\n        sellerName\\n        price\\n        lowPrice\\n        impressionFeedbackUrl\\n        contentUrl\\n        adNetwork\\n        adExperimentId\\n        adRequestId\\n        experimentDataHash\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}',method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (countConversations)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}const t=await e().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,o.Z)({error:"Failed to parse countConversations api response.",x:e}),{}}}));if(t&&"proxy-failed"===t.error_code)return console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),"";if(t&&t.data&&t.data.getChats&&t.data.getChats.chats)return t.data.getChats.chats.length}catch(e){return 0}},fetchListings:async function(e,t){const n={operationName:"GetSearchFeed",query:"query GetSearchFeed($searchParams: [SearchParam]) {\n          search(params: $searchParams) {\n            nextPageCursor\n            query\n            feedItems {\n              type\n              tile {\n                ... on Listing {\n                  id\n                  title\n                  state\n                  condition\n                  postDate\n                  photos {\n                    uuid\n                    list {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    detail {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    small {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    squareSmall {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    __typename\n                  }\n                  category {\n                    id\n                    __typename\n                  }\n                  locationDetails {\n                    locationName\n                    distance\n                    __typename\n                  }\n                  price\n                  fulfillmentDetails {\n                    shippingEnabled\n                    shippingPrice\n                    sellerPaysShipping\n                    showShippingIconInFeed\n                    __typename\n                  }\n                  vehicleAttributes {\n                    vehicleMiles\n                    vehicleMake\n                    vehicleYear\n                    vehicleModel\n                    __typename\n                  }\n                  showCallForPrice\n                  isMerchantItem\n                  sku\n                  merchantId\n                  __typename\n                }\n                ... on SellerAd {\n                  itemId\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adNetwork\n                  adRequestId\n                  searchId\n                  tileType\n                  type\n                  campaignId\n                  impressionFeedbackUrls\n                  listing {\n                    id\n                    title\n                    condition\n                    postDate\n                    isMerchantItem\n                    photos {\n                      uuid\n                      list {\n                        url\n                        width\n                        height\n                        __typename\n                      }\n                      detail {\n                        url\n                        width\n                        height\n                        __typename\n                      }\n                      small {\n                        url\n                        width\n                        height\n                        __typename\n                      }\n                      __typename\n                    }\n                    locationDetails {\n                      locationName\n                      distance\n                      __typename\n                    }\n                    price\n                    fulfillmentDetails {\n                      shippingEnabled\n                      shippingPrice\n                      sellerPaysShipping\n                      showShippingIconInFeed\n                      __typename\n                    }\n                    vehicleAttributes {\n                      vehicleMiles\n                      __typename\n                    }\n                    showCallForPrice\n                    __typename\n                  }\n                  __typename\n                }\n                ... on BingAd {\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adNetwork\n                  adRequestId\n                  searchId\n                  tileType\n                  type\n                  experimentDataHash\n                  imageUrl\n                  contentUrl\n                  price\n                  priceCurrency\n                  itemName\n                  sellerName\n                  clientImpressionFeedbackUrls\n                  clickReturnUrl\n                  lowPrice\n                  impressionFeedbackUrl\n                  clickFeedbackUrl\n                  imageWidth\n                  imageHeight\n                  rating\n                  numberOfReviews\n                  __typename\n                }\n                ... on GoogleDisplayAd {\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adRequestId\n                  adNetwork\n                  tileType\n                  type\n                  experimentDataHash\n                  errorDrawable {\n                    listImage {\n                      url\n                      width\n                      height\n                      __typename\n                    }\n                    actionPath\n                    __typename\n                  }\n                  clientId\n                  searchId\n                  displayAdType\n                  contentUrl\n                  adWidth\n                  adHeight\n                  additionalSizes\n                  __typename\n                }\n                ... on LocalDisplayAd {\n                  ouAdId\n                  adMediationId\n                  adExperimentId\n                  adRequestId\n                  adNetwork\n                  tileType\n                  type\n                  experimentDataHash\n                  searchId\n                  imageUrl\n                  contentUrl\n                  impressionFeedbackUrl\n                  clickFeedbackUrl\n                  headline\n                  businessName\n                  locationText\n                  callToAction\n                  callToActionType\n                  __typename\n                }\n                __typename\n              }\n              banner {\n                label\n                actionBannerType\n                __typename\n              }\n              __typename\n            }\n            feedOptions {\n              ... on FeedOptionListSelection {\n                position\n                type\n                name\n                label\n                labelShort\n                queryParam\n                options {\n                  label\n                  labelShort\n                  subLabel\n                  value\n                  selected\n                  default\n                  __typename\n                }\n                __typename\n              }\n              ... on FeedOptionNumericRange {\n                position\n                type\n                name\n                label\n                labelShort\n                units\n                lowerBound\n                upperBound\n                leftQueryParam\n                rightQueryParam\n                options {\n                  label\n                  currentValue\n                  textHint\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            feedPresentation {\n              columnCount\n              showDetailsOnTiles\n              __typename\n            }\n            searchAlert {\n              alertId\n              __typename\n            }\n            searchSuggestion {\n              originalQuery\n              suggestedQuery\n              itemSource\n              __typename\n            }\n            searchData {\n              searchPerformedEventUniqueId\n              searchSessionId\n              __typename\n            }\n            forcedCategory {\n              id\n              __typename\n            }\n            requestTimeMetadata {\n              totalResolverTimeSeconds\n              serviceRequestTimeSeconds\n              resolverComputationTimeSeconds\n              __typename\n            }\n            __typename\n          }\n        }",variables:{searchParams:[{key:"q",value:e},{key:"zipcode",value:t},{key:"platform",value:"web"},{key:"limit",value:"100"},{key:"searchSessionId",value:"82eb4f89-a745-4cee-a5c1-bd0ccb73a34e"}]}},i=await async function e(t){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36","ou-experiment-data":'{"datamodel_id":"experimentmodel24"}',"sec-ch-ua":'"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkphY2tzb252aWxsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMjIwMlwiLFwibG9uZ2l0dWRlXCI6LTgxLjY0OTIsXCJsYXRpdHVkZVwiOjMwLjMyOTh9In0.9dKswdRFV427P3pvAOfIaH8ybQGx9TN3EBEFH3NOSCY","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"52b74dce-6306-4e36-a98a-837248ea416b"},referrer:"https://offerup.com/search?q=iphone+12",referrerPolicy:"strict-origin-when-cross-origin",body:JSON.stringify(n),method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (fetchListings)",n,t),t&&t>6?"":(await(0,l.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return console.error(t),await(0,o.Z)({error:"Failed to parse fetchlistings api response.",x:e}),{}}}));return i&&"proxy-failed"===i.error_code?(console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),[]):i&&i.data&&i.data.search&&i.data.search.feedItems?i.data.search.feedItems.filter((e=>"item"===e.type&&e.tile&&e.tile.title)):[]},getUserListings:async function(e){const t=await async function t(n){return fetch("https://offerup.com/api/graphql",{headers:{accept:"*/*","accept-language":"en-US,en;q=0.9","content-type":"application/json","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36","sec-ch-ua":'"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"Windows"',"sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","x-ou-d-token":"web-052d0185d991b73f7eb7bd5fda75c0cfbbf2f95bb2f392f52630a64b","x-ou-f-token":"74e5e1d98ea7ec925d75f015a16b3f3c","x-request-id":"699815d5-4b0c-48f2-b821-0f7ceb793019"},referrer:"https://offerup.com/item/detail/1267519944?q=iphone+xs",referrerPolicy:"strict-origin-when-cross-origin",body:`{"operationName":"GetProfileUserItems","variables":{"userId":"${e}","limit":20,"pageCursor":null},"query":"query GetProfileUserItems($userId: String!, $pageCursor: String, $limit: Int) {\\n  userListings(userId: $userId, pageCursor: $pageCursor, limit: $limit) {\\n    pageCursor\\n    listings {\\n      id\\n      listingId\\n      title\\n      fulfillmentDetails {\\n  shippingEnabled\\n  shippingPrice\\n  sellerPaysShipping\\n  showShippingIconInFeed\\n  __typename\\n} postDate\\n description\\n price\\n      state\\n      locationDetails {\\n        locationName\\n        __typename\\n      }\\n      photos {\\n        uuid\\n        list {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        detail {\\n          url\\n          width\\n          height\\n          __typename\\n        }\\n        __typename\\n      }\\n      vehicleAttributes {\\n        vehicleMiles\\n        __typename\\n      }\\n      owner {\\n        profile {\\n          isSubPrimeDealer\\n          isAutosDealer\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n"}`,method:"POST",mode:"cors",credentials:"include"}).then((async e=>(0,r.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (getUserListings)",e,n),n&&n>6?"":(await(0,l.sleep)(1e4),n||(n=0),t(n+=1)))))}().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,o.Z)({error:"Failed to parse getUserListings api response.",x:e}),{}}}));return t&&"proxy-failed"===t.error_code?(console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),[]):t&&t.data&&t.data.userListings&&t.data.userListings.listings?t.data.userListings.listings.filter((e=>"LISTED"===e.state)):((0,p._apiSendBug)({error:"Failed to get user listings",userid:e,apiResponse:t}),[])}}}},5596:(e,t,n)=>{"use strict";function i(e){const t=e.target.textContent;if(window.lastInputId){const e=document.getElementById(window.lastInputId[0]);let n=e.value;n=[n.slice(0,window.lastInputId[1]),t,n.slice(window.lastInputId[1])].join(""),e.value=n,e.parentNode.classList.add("is-focused"),e.focus();const i=window.lastInputId[1]+t.length;e.setSelectionRange(i,i)}}n.r(t),n.d(t,{attachEvents:()=>p});var a=n(3539);async function s(){"LISTINGS"===prompt("Are you sure you want to purge your listings skip list? Type LISTINGS to confirm:")&&((0,a.CONSOLE_MESSAGE)("custom","Purging listings..."),async function(){const e=await fetch(`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?purge=1&listname=listings&partnerid=${window.taPartnerId}`).then((e=>e.json()));e.success?(0,a.CONSOLE_MESSAGE)("custom","Listings has been successfully purged."):(console.error("Failed to purge listings.",e),(0,a.CONSOLE_MESSAGE)("custom","Failed to purge listings."))}())}async function r(){"OWNERS"===prompt("Are you sure you want to purge your owners skip list? Type OWNERS to confirm:")&&((0,a.CONSOLE_MESSAGE)("custom","Purging owners..."),async function(){const e=await fetch(`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?purge=1&listname=users&partnerid=${window.taPartnerId}`).then((e=>e.json()));e.success?(0,a.CONSOLE_MESSAGE)("custom","Owners has been successfully purged."):(console.error("Failed to purge owners.",e),(0,a.CONSOLE_MESSAGE)("custom","Failed to purge owners."))}())}n(5281);var o=n(7426),l=n(9973),c=n(7367);async function d(e){const t=e.target.id;if(t)if("radio"===e.target.type){const n=e.target.name;localStorage.setItem(`radio_${n}`,t)}else if("checkbox"===e.target.type)if(localStorage.setItem(`input_${t}`,e.target.checked),"switch-rununtil"===t&&e.target.checked){async function e(){try{await(0,l.start)()}catch(t){console.trace(),console.error("saveInput Caught error!",t),setTimeout(e,2e3)}}window.isRun=1,(0,o.o)(!1),(0,c.stats)().addRun(),e()}else window.isRun=0,(0,o.o)(!0);else localStorage.setItem(`input_${t}`,e.target.value)}var u=n(7121);function p(){document.querySelector("#roundupdown").addEventListener("change",d),document.querySelector("#streak").addEventListener("change",d),document.querySelector("#streaktimeout").addEventListener("change",d),document.querySelector("#maxconcurrentconversations").addEventListener("change",d),document.querySelector("#keywords").addEventListener("change",d),document.querySelector("#keywords").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#zipcodes").addEventListener("change",d),document.querySelector("#skipwords").addEventListener("change",d),document.querySelector("#skipwords").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#openermessage").addEventListener("change",d),document.querySelector("#openermessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#gbmessage").addEventListener("change",d),document.querySelector("#gbmessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#networkmessage").addEventListener("change",d),document.querySelector("#networkmessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#offermessage").addEventListener("change",d),document.querySelector("#offermessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#lowball_message").addEventListener("change",d),document.querySelector("#lowball_message").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_1").addEventListener("change",d),document.querySelector("#question_1").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_2").addEventListener("change",d),document.querySelector("#question_2").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_3").addEventListener("change",d),document.querySelector("#question_3").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#question_4").addEventListener("change",d),document.querySelector("#question_4").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_min_price").addEventListener("change",d),document.querySelector("#listing_min_price").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_max_price").addEventListener("change",d),document.querySelector("#listing_max_price").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_price_delta").addEventListener("change",d),document.querySelector("#listing_price_delta").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#custom_price_delta").addEventListener("change",d),document.querySelector("#custom_price_delta").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#listing_max_age").addEventListener("change",d),document.querySelector("#listing_max_age").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#switch-continue_after_storage").addEventListener("change",d),document.querySelector("#switch-continue_after_network").addEventListener("change",d),document.querySelector("#meetupmessage").addEventListener("change",d),document.querySelector("#meetupmessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#partnermessage").addEventListener("change",d),document.querySelector("#partnermessage").addEventListener("blur",(e=>{window.lastInputId=[e.target.id,e.target.selectionStart]})),document.querySelector("#runfrom").addEventListener("change",d),document.querySelector("#rununtil").addEventListener("change",d),document.querySelector("#switch-skipshippingenabled").addEventListener("change",d),document.querySelector("#switch-deleteaftersend").addEventListener("change",d),document.querySelector("#switch-rununtil").addEventListener("change",d),document.querySelector("#switch-rununtil").addEventListener("change",(()=>{(0,u.X)(!document.querySelector("#switch-rununtil").checked)})),document.querySelectorAll("#ta .variables .variable").forEach((e=>e.addEventListener("click",i))),document.querySelector("#ta #test_template").addEventListener("click",window.testTemplates),document.querySelector("#ta #restore_defaults").addEventListener("click",window.restoreDefaults),document.querySelector("#purge_listings").addEventListener("click",s),document.querySelector("#purge_owners").addEventListener("click",r),document.querySelector("#mode_single").addEventListener("change",d),document.querySelector("#mode_multi").addEventListener("change",d)}},1203:(e,t,n)=>{"use strict";n.r(t),n.d(t,{waitIfSpamDetected:()=>i,listingsPerKeyword:()=>a,intervalConversationsCheck:()=>s,maxItemsToOfferPartner:()=>r,showAlerts:()=>o,debug_disableMessages:()=>l,disableLogs:()=>c,messageDelay:()=>d,delayPerXMessages:()=>u,userDelay:()=>p});const i=1440,a=60,s=10,r=3,o=!1,l=!1,c=!1,d=[3,10],u=10,p=[100,300]},4347:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fetchListingDetail:()=>r});var i=n(2287),a=n(6849),s=n(4246);async function r(e,t){e&&(e=String(e));let n=`{"operationName":"GetListingDetailByListingId","variables":{"isLoggedIn":true,"listingId":"${e}"},"query":"query GetListingDetailByListingId($listingId: ID!, $isLoggedIn: Boolean = false, $deviceLocation: DeviceLocation) {\\n  listing(listingId: $listingId, deviceLocation: $deviceLocation) {\\n    ...listingDetail\\n    __typename\\n  }\\n}\\n\\nfragment listingDetail on Listing {\\n  id\\n  badges\\n  condition\\n  description\\n  discussionCount\\n  distance {\\n    unit\\n    value\\n    __typename\\n  }\\n  extractedAttributes {\\n    attributeName\\n    attributeValue\\n    attributeValueSource\\n    __typename\\n  }\\n  fulfillmentDetails {\\n    buyItNowEnabled\\n    canShipToBuyer\\n    estimatedDeliveryDateEnd\\n    estimatedDeliveryDateStart\\n    localPickupEnabled\\n    sellerPaysShipping\\n    shippingEnabled\\n    shippingParcelId\\n    shippingPrice\\n    showAsShipped\\n    __typename\\n  }\\n  isFirmOnPrice\\n  isLocal\\n  isMerchantItem\\n  lastEdited\\n  listingCategory {\\n    categoryAttributeMap {\\n      attributeName\\n      attributePriority\\n      attributeUILabel\\n      attributeValue\\n      attributeValueSource\\n      __typename\\n    }\\n    categoryV2 {\\n      id\\n      l1Id\\n      l1Name\\n      l2Id\\n      l2Name\\n      l3Id\\n      l3Name\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingDetailAds {\\n    adTiles {\\n      ...adsGoogleDisplayAd\\n      __typename\\n    }\\n    placements {\\n      adTileConfigs {\\n        adSize {\\n          additionalSizes\\n          height\\n          width\\n          __typename\\n        }\\n        displayType\\n        renderLocation\\n        __typename\\n      }\\n      adType\\n      quantity\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingId\\n  locationDetails {\\n    distance\\n    latitude\\n    locationName\\n    longitude\\n    __typename\\n  }\\n  merchantId\\n  merchantProfile {\\n    avatar {\\n      small {\\n        url\\n        __typename\\n      }\\n      __typename\\n    }\\n    description\\n    emailAddress\\n    legacyUserOwner\\n    phoneNumber\\n    publicLocationName\\n    storeName\\n    ratingSummary {\\n      average\\n      count\\n      __typename\\n    }\\n    __typename\\n  }\\n  originalPrice\\n  originalTitle\\n  owner {\\n    id\\n    profile {\\n      avatars {\\n        squareImage\\n        __typename\\n      }\\n      c2cPhoneNumber {\\n        countryCode\\n        nationalNumber\\n        __typename\\n      }\\n      clickToCallEnabled\\n      dateJoined\\n      isAutosDealer\\n      isSubPrimeDealer\\n      isTruyouVerified\\n      name\\n      notActive\\n      openingHours {\\n        day\\n        hours\\n        __typename\\n      }\\n      phoneNumber\\n      publicLocation {\\n        formattedAddress\\n        latitude\\n        longitude\\n        name\\n        __typename\\n      }\\n      publicLocationName\\n      itemsPurchased\\n      itemsSold\\n      responseTime\\n      ratingSummary {\\n        average\\n        count\\n        __typename\\n      }\\n      reviews {\\n        attributionIcon\\n        average\\n        readMoreUrl\\n        title\\n        userReviews {\\n          profilePhotoUrl\\n          text\\n          __typename\\n        }\\n        __typename\\n      }\\n      websiteLink\\n      __typename\\n    }\\n    __typename\\n  }\\n  ownerId\\n  photos {\\n    uuid\\n    detail {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    detailFull {\\n      url\\n      width\\n      height\\n      __typename\\n    }\\n    detailSquare {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    list {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    medium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    squareMedium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  postDate\\n  price\\n  quantity\\n  saved @include(if: $isLoggedIn)\\n  shippingOptions {\\n    maxHandlingDays\\n    maxShippingDays\\n    minHandlingDays\\n    minShippingDays\\n    name\\n    price\\n    priority\\n    __typename\\n  }\\n  shippingRate {\\n    maxDeliveryDays\\n    maxEstimatedDeliveryDate\\n    minDeliveryDays\\n    minEstimatedDeliveryDate\\n    price\\n    priority\\n    __typename\\n  }\\n  sku\\n  state\\n  title\\n  vehicleAttributes {\\n    vehicleBody\\n    vehicleCityMpg\\n    vehicleColor\\n    vehicleDriveTrain\\n    vehicleDriveTrainClean\\n    vehicleEngineCylinders\\n    vehicleEpaCity\\n    vehicleEpaHighway\\n    vehicleExternalHistoryReport {\\n      epochDate\\n      imageUrl\\n      issues\\n      price {\\n        microUnits\\n        __typename\\n      }\\n      providerName\\n      reportUrl\\n      source\\n      __typename\\n    }\\n    vehicleFuelType\\n    vehicleFundamentals\\n    vehicleHighwayMpg\\n    vehicleId\\n    vehicleMake\\n    vehicleMiles\\n    vehicleModel\\n    vehicleStyleDisplay\\n    vehicleTitleStatus\\n    vehicleTransmission\\n    vehicleTransmissionClean\\n    vehicleTrim\\n    vehicleVin\\n    vehicleYear\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment adsGoogleDisplayAd on GoogleDisplayAd {\\n  ...baseGoogleDisplayAd\\n  renderLocation\\n  tileType\\n  __typename\\n}\\n\\nfragment baseGoogleDisplayAd on GoogleDisplayAd {\\n  ouAdId\\n  adExperimentId\\n  adHeight\\n  adMediationId\\n  adNetwork\\n  adRequestId\\n  adWidth\\n  clientId\\n  contentUrl\\n  displayAdType\\n  errorDrawable {\\n    actionPath\\n    listImage {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  experimentDataHash\\n  personalizationProperties {\\n    key\\n    values\\n    __typename\\n  }\\n  type\\n  __typename\\n}\\n"}`;e&&e.includes&&!e.includes("-")&&(n=`{"operationName":"GetListingDetailByItemId","variables":{"isLoggedIn":false,"itemId":${e},"vehicleHistoryExperiment":"vinaudit_1"},"query":"query GetListingDetailByItemId($itemId: Int!, $vehicleHistoryExperiment: String, $isLoggedIn: Boolean = false, $deviceLocation: DeviceLocation) {\\n  listing(\\n    itemId: $itemId\\n    vehicleHistoryExperiment: $vehicleHistoryExperiment\\n    deviceLocation: $deviceLocation\\n  ) {\\n    ...listingDetail\\n    __typename\\n  }\\n}\\n\\nfragment listingDetail on Listing {\\n  id\\n  badges\\n  condition\\n  description\\n  discussionCount\\n  distance {\\n    unit\\n    value\\n    __typename\\n  }\\n  extractedAttributes {\\n    attributeName\\n    attributeValue\\n    attributeValueSource\\n    __typename\\n  }\\n  fulfillmentDetails {\\n    buyItNowEnabled\\n    canShipToBuyer\\n    estimatedDeliveryDateEnd\\n    estimatedDeliveryDateStart\\n    localPickupEnabled\\n    sellerPaysShipping\\n    shippingEnabled\\n    shippingParcelId\\n    shippingPrice\\n    showAsShipped\\n    __typename\\n  }\\n  isFirmOnPrice\\n  isLocal\\n  isMerchantItem\\n  lastEdited\\n  listingCategory {\\n    categoryAttributeMap {\\n      attributeName\\n      attributePriority\\n      attributeUILabel\\n      attributeValue\\n      attributeValueSource\\n      __typename\\n    }\\n    categoryV2 {\\n      id\\n      l1Id\\n      l1Name\\n      l2Id\\n      l2Name\\n      l3Id\\n      l3Name\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingDetailAds {\\n    adTiles {\\n      ...adsGoogleDisplayAd\\n      __typename\\n    }\\n    placements {\\n      adTileConfigs {\\n        adSize {\\n          additionalSizes\\n          height\\n          width\\n          __typename\\n        }\\n        displayType\\n        renderLocation\\n        __typename\\n      }\\n      adType\\n      quantity\\n      __typename\\n    }\\n    __typename\\n  }\\n  listingId\\n  locationDetails {\\n    distance\\n    latitude\\n    locationName\\n    longitude\\n    __typename\\n  }\\n  merchantId\\n  merchantProfile {\\n    avatar {\\n      small {\\n        url\\n        __typename\\n      }\\n      __typename\\n    }\\n    description\\n    emailAddress\\n    legacyUserOwner\\n    phoneNumber\\n    publicLocationName\\n    storeName\\n    ratingSummary {\\n      average\\n      count\\n      __typename\\n    }\\n    __typename\\n  }\\n  originalPrice\\n  originalTitle\\n  owner {\\n    id\\n    profile {\\n      avatars {\\n        squareImage\\n        __typename\\n      }\\n      c2cPhoneNumber {\\n        countryCode\\n        nationalNumber\\n        __typename\\n      }\\n      clickToCallEnabled\\n      dateJoined\\n      isAutosDealer\\n      isSubPrimeDealer\\n      isTruyouVerified\\n      name\\n      notActive\\n      openingHours {\\n        day\\n        hours\\n        __typename\\n      }\\n      phoneNumber\\n      publicLocation {\\n        formattedAddress\\n        latitude\\n        longitude\\n        name\\n        __typename\\n      }\\n      publicLocationName\\n      itemsPurchased\\n      itemsSold\\n      responseTime\\n      ratingSummary {\\n        average\\n        count\\n        __typename\\n      }\\n      reviews {\\n        attributionIcon\\n        average\\n        readMoreUrl\\n        title\\n        userReviews {\\n          profilePhotoUrl\\n          text\\n          __typename\\n        }\\n        __typename\\n      }\\n      websiteLink\\n      __typename\\n    }\\n    __typename\\n  }\\n  ownerId\\n  photos {\\n    uuid\\n    detail {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    detailFull {\\n      url\\n      width\\n      height\\n      __typename\\n    }\\n    detailSquare {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    list {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    medium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    squareMedium {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  postDate\\n  price\\n  quantity\\n  saved @include(if: $isLoggedIn)\\n  shippingOptions {\\n    maxHandlingDays\\n    maxShippingDays\\n    minHandlingDays\\n    minShippingDays\\n    name\\n    price\\n    priority\\n    __typename\\n  }\\n  shippingRate {\\n    maxDeliveryDays\\n    maxEstimatedDeliveryDate\\n    minDeliveryDays\\n    minEstimatedDeliveryDate\\n    price\\n    priority\\n    __typename\\n  }\\n  sku\\n  state\\n  title\\n  vehicleAttributes {\\n    vehicleBody\\n    vehicleCityMpg\\n    vehicleColor\\n    vehicleDriveTrain\\n    vehicleDriveTrainClean\\n    vehicleEngineCylinders\\n    vehicleEpaCity\\n    vehicleEpaHighway\\n    vehicleExternalHistoryReport {\\n      epochDate\\n      imageUrl\\n      issues\\n      price {\\n        microUnits\\n        __typename\\n      }\\n      providerName\\n      reportUrl\\n      source\\n      __typename\\n    }\\n    vehicleFuelType\\n    vehicleFundamentals\\n    vehicleHighwayMpg\\n    vehicleId\\n    vehicleMake\\n    vehicleMiles\\n    vehicleModel\\n    vehicleStyleDisplay\\n    vehicleTitleStatus\\n    vehicleTransmission\\n    vehicleTransmissionClean\\n    vehicleTrim\\n    vehicleVin\\n    vehicleYear\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment adsGoogleDisplayAd on GoogleDisplayAd {\\n  ...baseGoogleDisplayAd\\n  renderLocation\\n  tileType\\n  __typename\\n}\\n\\nfragment baseGoogleDisplayAd on GoogleDisplayAd {\\n  ouAdId\\n  adExperimentId\\n  adHeight\\n  adMediationId\\n  adNetwork\\n  adRequestId\\n  adWidth\\n  clientId\\n  contentUrl\\n  displayAdType\\n  errorDrawable {\\n    actionPath\\n    listImage {\\n      height\\n      url\\n      width\\n      __typename\\n    }\\n    __typename\\n  }\\n  experimentDataHash\\n  personalizationProperties {\\n    key\\n    values\\n    __typename\\n  }\\n  type\\n  __typename\\n}\\n"}`);try{async function t(a){return fetch("https://offerup.com/api/graphql",{credentials:"include",headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",Accept:"*/*","Accept-Language":"en-US,en;q=0.5","content-type":"application/json","x-ou-d-token":"web-8a263c39445e93084073408011803c17b413d18fa91fafb9f64f706f","x-ou-f-token":"6af29b25b551922205a90937fd164603",userdata:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2NhdGlvbiI6IntcImNpdHlcIjpcIkZvcnQgTGF1ZGVyZGFsZVwiLFwic3RhdGVcIjpcIkZMXCIsXCJ6aXBDb2RlXCI6XCIzMzMyMlwiLFwibG9uZ2l0dWRlXCI6LTgwLjI3NjgsXCJsYXRpdHVkZVwiOjI2LjE0ODZ9In0.Tjhlca2iBpxc6-SCQFImXWks2GnHjXnczrLRnDDbXOo","ou-browser-user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0","Proxy-Authorization":"Basic dHJhZGVhcHBsZXM6YXBwbGVzdHJhZGU2OQ=="},referrer:`https://offerup.com/item/detail/${e}?q=iphone`,body:n,method:"POST",mode:"cors"}).then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (fetchListingDetail)",e,a),a&&a>6?"":(await(0,s.sleep)(1e4),a||(a=0),t(a+=1)))))}return t().then((async e=>{try{return e&&e.match&&e.match(/currently serve areas outside of the US/i)?{error:"Proxy Failed",error_code:"proxy-failed"}:JSON.parse(e)}catch(t){return await(0,a.Z)({error:"Failed to parse fetchListingDetail api response.",x:e}),{}}})).then((async e=>e&&"proxy-failed"===e.error_code?(console.error("Proxy Failed - Got Error: Currently serve areas outside of the US"),""):e.data&&e.data.listing?e.data.listing:(console.error("Failed to get listing details",e),console.trace(),await(0,a.Z)({error:"Failed to get listing details",details:e}),""))).catch((e=>(console.error("Fetch Failed (fetchListingDetail))",e),"")))}catch(n){if(!t)return r(e,!0)}}},6901:(e,t,n)=>{"use strict";n.d(t,{f:()=>a,d:()=>s});var i=n(3539);function a(e){let t=Number(document.querySelector("#listing_min_price").value)||0,n=Number(document.querySelector("#listing_max_price").value)||0;if(0===t&&0===n)return e;const a=e.length,s=(e=e.filter((e=>{const i=e.tile&&Number(e.tile.price);return i>=t&&i<=n}))).length;return s!==a&&(0,i.CONSOLE_MESSAGE)("price_not_inrange",{num_listings:a-s}),e}function s(e){let t=Number(document.querySelector("#listing_min_price").value)||0,n=Number(document.querySelector("#listing_max_price").value)||0;return 0===t&&0===n||e>=t&&e<=n}},3539:(e,t,n)=>{"use strict";n.r(t),n.d(t,{getConsoleMessages:()=>r,CONSOLE_MESSAGE:()=>o});var i=n(2287),a=n(6849),s=n(7091);async function r(){if(window.consoleMessages)return window.consoleMessages;const e=await fetch("https://sheets.hopla.tools/?HT=1a6324ea456c27346230df0a70458cc9&format=json&sheet_name=ConsoleLog").then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text())).then((async e=>{try{return JSON.parse(e)}catch(t){return await(0,a.Z)({error:"Failed to parse getConsoleMessages api response.",x:e}),{}}}));if(e&&e.result){window.consoleMessages={};for(const t of e.result)t.variable&&(window.consoleMessages[t.variable]=t.message||"");return window.consoleMessages}return await(0,a.Z)({error:"Failed to get console messages."}),console.error("Failed to get console message"),{}}function o(e,t){if(function(e){return e="object"==typeof e?JSON.stringify(e):e,window.lastLog?window.lastLog===e||void(window.lastLog=e):(window.lastLog=e,!1)}(t||e))return;if("custom"===e)return window.lastLog=t,console.log(t),void(0,s.showLastConsoleLog)(t);if(!window.consoleMessages)return console.error("Called consoleMessage without initiating."),"";let n=window.consoleMessages[e];if(t)for(const e in t){const i=new RegExp(`{${e}}`,"gi");n=n.replace(i,t[e]||"")}console.log(n),(0,s.showLastConsoleLog)(n)}},5149:(e,t,n)=>{"use strict";function i(e,t){if(!e)return"";for(const n of e)if(n.attributeName===t&&Array.isArray(n.attributeValue)&&n.attributeValue.length)return n.attributeValue[0].toLowerCase();return""}n.d(t,{N:()=>i})},5508:(e,t,n)=>{"use strict";n.d(t,{T:()=>a});var i=n(4347);async function a(e){const t=await(0,i.fetchListingDetail)(e);if(!t)return{};const n=t.listingCategory.categoryAttributeMap;let{title:a,description:s,condition:r,price:o}=t;return a||(a=""),s||(s=""),r||(r=""),o||(o=""),{title:a,description:s,condition:r,price:o,attributes:n}}window.getItemInfo=a},9105:(e,t)=>{},8414:(e,t,n)=>{"use strict";async function i(e){return fetch(`https://us-central1-trade-apples.cloudfunctions.net/partners?getpartnerdetails=1&uid=${e}`).then((e=>e.json()))}n.r(t),n.d(t,{getPartnerDetails:()=>i})},2320:(e,t,n)=>{"use strict";n.r(t),n.d(t,{getQuote:()=>c});var i=n(9178),a=n(3539),s=n(6849);async function r(){try{if(window.kvJson)return window.kvJson;const e=await fetch("https://prices.phones.trade/?kvread=key_values").then((e=>e.json()));return window.kvJson=e,e}catch(e){return console.log("error",e),await(0,s.Z)({error:"Failed to get key values from prices endpoint"}),""}}function o(e){if(e&&e.match(/internal/i))return"internal";let t=e;const n=e.match(/\[(.+)\]/);let i="";return n&&(i=n[1].trim(),t=t.replace(`[${i}]`,"").trim(),t=t.split("-"),t=t.length>1?t[1].trim():t[0].trim()),t}async function l(e){const t=await r();if(!t)return"";const n=t.bykey;return n&&n[e]||""}async function c(e,t){console.log("Getting quote.."),(0,a.CONSOLE_MESSAGE)("custom",`Getting quote of listing (${t})`);const n=e.model||"13promax",s=e.storage,c=e.network,d=e.condition||"likenew",u=e.deductions||"";let p,m;e.model&&e.storage&&e.network&&e.condition&&e.deductions||console.log("Found case with missing variant details.",e,t);const h=await async function(e){const t=(await r()).bykey;let n=[];if(!t)return"";const i=Object.keys(t).filter((e=>e.startsWith("M")));for(const e of i)n.push({key:e,value:t[e]});e&&!e.startsWith("iphone")&&(e="iphone"+e);for(const t of n){let n=t.value;if(n=n.toLowerCase().replace(/\s+/g,""),"iphonese2020"===n&&(n="iphonese2"),"iphonese2022"===n&&(n="iphonese3"),n===e)return t.key}}(n);s&&(p=await async function(e){const t=await r();return e=e.toUpperCase(),t.byvalue[e]}(s)),c&&(m=await async function(e){const t=await r(),n=Object.keys(t.bykey).filter((e=>e.startsWith("N")));for(const a of n){const n=(0,i.M)(t.bykey[a]);if(e.toLowerCase()===n.toLowerCase())return a}}(c));const g=await async function(e){const t=(await r()).bykey,n=[];if(!t)return"";const i=Object.keys(t).filter((e=>e.startsWith("C")));for(const e of i)n.push({key:e,value:t[e]});e&&(e=e.toLowerCase().replace(/\s+/g,""));for(const t of n){let n=t.value;if(n=o(n),n=n.toLowerCase().replace(/\s+/g,""),n===e)return t.key}return""}(d),f=await function(e){const t=[];e&&e.forEach((e=>{let n;switch(e){case"touchid issue":case"faceid issue":n="D3";break;case"crackedback":case"crackediphone":n="D1";break;case"simcard reading issue":n="D5";break;case"wifiissues":case"wifiproblems":n="D4";break;case"camera issues":case"cameraproblems":case"brokencamera":n="D2";break;case"crackedcameralens":n="D13"}n&&t.push(n)}))}(u);console.log("deductionKeys",f);const w={model:(0,i.M)(await l(h)),condition:(0,i.M)(await l(g))};if(p&&(w.storage=(0,i.M)(await l(p))),m&&(w.network=(0,i.M)(await l(m))),f&&Array.isArray(f)){const e=f.map((e=>{console.log("key",e);let t=l(x);return(0,i.M)(t)}));w.deductions=e}u&&u.includes("icloud")&&(p="S5",m="N6"),console.log("modelKey",h),console.log("storageKey",p),console.log("networkKey",m),console.log("conditionKey",g),console.log("deductionKeys",f);const y=await async function(e,t,n,i,a){let s=a?a.join("-"):"";return s&&(s=`&deductions=${s}`),await fetch(`https://prices.phones.trade/?getvariantprice=1&model=${e}&storage=${t||""}&network=${n||""}&condition=${i||""}${s}`).then((e=>e.text())).then((e=>{try{return JSON.parse(e)}catch(e){return{}}}))}(h,p,m,g,f);return console.log("price",y.price),!p&&y.storageKey&&(w.storage=(0,i.M)(await l(y.storageKey))),!m&&y.networkKey&&(w.network=(0,i.M)(await l(y.networkKey))),w.price=y.price,w}},2617:(e,t,n)=>{"use strict";n.d(t,{g:()=>a});var i=n(4484);function a(){if(window.userEmail)return window.userEmail;try{const e=document.querySelector("#__NEXT_DATA__").textContent,t=JSON.parse(e);for(const e in t.props.pageProps.initialApolloState)if(e.startsWith("User")){window.userEmail=t.props.pageProps.initialApolloState[e].account.email;break}return window.userEmail}catch(e){console.error(e),(0,i._apiSendBug)({error:"Failed to get user email",details:e.toString()})}}},5826:(e,t,n)=>{"use strict";n.r(t),n.d(t,{getVariant:()=>m});var i=n(5149),a=n(5508),s=n(2287),r=n(4246),o=n(4484);async function l(){return console.log("Fetching model matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Model%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Model matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get model matches.",x:e}),alert("Failed to get model matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get model matches.",e:e.toString()}),(0,r.sleep)(1e4).then((()=>l())))))}async function c(){return console.log("Fetching storage matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Storage%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Storage matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get storage matches.",x:e}),alert("Failed to get storage matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get storage matches.",e:e.toString()}),(0,r.sleep)(1e4).then((()=>c())))))}async function d(){return console.log("Fetching network matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Network%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Network matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get network matches.",x:e}),alert("Failed to get network matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get network matches.",e:e.toString()}),(0,r.sleep)(1e4).then((()=>d())))))}async function u(){return console.log("Fetching deduction matches."),fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json&sheet_name=Deduction%20Matches").then((async e=>(0,s.handleFetchErrors)(e))).then((e=>e.text())).then((e=>{e=JSON.parse(e),console.log("Deduction matches has been fetched.");const t={};return e.result&&Array.isArray(e.result)&&e.result.length?(e.result.forEach((e=>{for(const n in e)t[n]||(t[n]=[]),e[n]&&t[n].push(e[n])})),t):((0,o._apiSendBug)({error:"Failed to get deduction matches.",x:e}),alert("Failed to get deduction matches."),t)})).catch((e=>((0,o._apiSendBug)({error:"Failed to get deduction matches.",e:e.toString()}),alert("Failed to get deduction matches."),(0,r.sleep)(1e4).then((()=>u())))))}var p=n(5281);async function m(e){window.textMatchIndex={},window.textMatchIndex[e]={};const t=await(0,a.T)(e),n={};return n.model=await async function(){const n=t.title&&t.title.toLowerCase(),a=t.description&&t.description.toLowerCase(),s=(0,i.N)(t.attributes,"model"),r=["11promax","11pro","11","xsmax","xs","xr","x","8plus","8","7plus","7","se2","12promax","12pro","12mini","12","13promax","13pro","13mini","13","6plus","6splus","6s","6"];if(!window.modelMatches){const e=await l();window.modelMatches=[],r.forEach((t=>{window.modelMatches.push([t,e[t]])}))}const o=window.modelMatches;for(const t of o){const i=t[0],r=t[1];if(Array.isArray(r))for(const t of r){const r=new RegExp(t,"i");let o=s&&s.match(r);if(o)return window.textMatchIndex[e].modelFromAttribute||(window.textMatchIndex[e].modelFromAttribute={}),window.textMatchIndex[e].modelFromAttribute.model={rgx:r},i;if(o=n&&n.match(r),o)return window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.model={rgx:r},i;if(o=a&&a.match(r),o)return window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.model={rgx:r},window.textMatchIndex[e].model={via:"description",index:o.index,length:r.source.length},i}}for(const e of o){const t=e[0],n=e[1];if(console.log("keyMatches",n),n)for(const e of n){const n=new RegExp(e,"i");if(s&&s.match(n))return t;if(a&&a.match(n))return t}}}(),n.storage=await async function(){const i=t.title&&t.title.toLowerCase(),a=t.description&&t.description.toLowerCase();window.storageMatches||(window.storageMatches=await c());const s=window.storageMatches,r={"16gb":["16\\s?gb"]};for(const t in s){const n=s[t];for(const s of n){const n=new RegExp(s,"i");if(i&&i.match(n))return window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.storage={rgx:n},t;if(a&&a.match(n))return window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.storage={rgx:n},t}}for(const e in r){const t=r[e];for(const s of t){const t=new RegExp(s,"i");if(i&&i.match(t))return n.skip=!0,e;if(a&&a.match(t))return n.skip=!0,e}}}(),n.network=await async function(){const n=t.title&&t.title.toLowerCase(),a=t.description&&t.description.toLowerCase(),s=(0,i.N)(t.attributes,"carrierNetwork"),r=["unlocked","locked"];if(!window.networkMatches){const e=await d();window.networkMatches=[],r.forEach((t=>{window.networkMatches.push([t,e[t]])}))}const o=window.networkMatches;for(const t of o){const i=t[0],r=t[1];for(const t of r){const r=new RegExp(t,"i");if(s&&s.match(r))return window.textMatchIndex[e].networkFromAttribute||(window.textMatchIndex[e].networkFromAttribute={}),window.textMatchIndex[e].networkFromAttribute.network={rgx:r},i;if(n&&n.match(r))return window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.network={rgx:r},i;if(a&&a.match(r))return window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.network={rgx:r},i}}}(),n.condition=await function(){if(t&&t.condition){if(100===t.condition)return"likenew";if(80===t.condition)return"likenew";if(60===t.condition)return"new";if(40===t.condition)return"likenew";if(20===t.condition)return n.skip=!0,console.log("Skipped because condition is For Parts."),"dead";if(0===t.condition)return"likenew"}}(),n.deductions=await async function(){const n=t.title&&t.title.toLowerCase(),i=t.description&&t.description.toLowerCase(),a=["icloud","crackedcameralens","faceid issue"];if(!window.deductionMatches){const e=await u();window.deductionMatches=[],a.forEach((t=>{window.deductionMatches.push([t,e[t]])}))}const s=window.deductionMatches,r=[];for(const t of s){const a=t[0],s=t[1];for(const t of s){const s=new RegExp(t,"i");n&&n.match(s)?(window.textMatchIndex[e].title||(window.textMatchIndex[e].title={}),window.textMatchIndex[e].title.deductions||(window.textMatchIndex[e].title.deductions=[]),window.textMatchIndex[e].title.deductions.push(s),r.push(a)):i&&i.match(s)&&(window.textMatchIndex[e].description||(window.textMatchIndex[e].description={}),window.textMatchIndex[e].description.deductions||(window.textMatchIndex[e].description.deductions=[]),window.textMatchIndex[e].description.deductions.push(s),r.push(a))}}return r}(),t.price?n.listing_price=parseFloat(t.price):n.listing_price=0,window.lastVariant=n,(0,p.Q)(e,t),n}window.getVariant=m},3119:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var i=n(6849);async function a(e){return fetch(`https://us-central1-trade-apples.cloudfunctions.net/partners?getDomain=1&uid=${e}`).then((e=>e.text())).then((t=>{try{const n=JSON.parse(t);let i=n&&n.domain;return i||(i=`${e}.tradeapples.com`),`https://${i}`}catch(t){return`https://${e}.tradeapples.com`}})).catch((t=>((0,i.Z)({error:"getWebsiteVariable failed.",detail:t.toString()}),`https://${e}.tradeapples.com`)))}},2287:(e,t,n)=>{"use strict";function i(e){return new Promise(((t,n)=>window.isRun?e.ok?void t(e):(console.trace(),console.error("Fetch has caught error but is handled",e.statusText),void setTimeout((()=>{n(e.statusText)}),1e4)):t(e)))}n.r(t),n.d(t,{handleFetchErrors:()=>i})},6722:(e,t,n)=>{"use strict";function i(e){let t=document.createElement("script");t.setAttribute("src","https://login.hopla.to/js/hopla-login.js"),t.type="text/javascript",t.onload=function(){HOPLA_login.init({projectid:"-MuH8erCc-DO-GAWvO7v",onready:function(){console.log("User Details",HOPLA_login.user),console.log("You are logged in as ",HOPLA_login.user.uid),"function"==typeof e&&e(HOPLA_login.user)},onlogin:function(e){console.log("onlogin",e)}})},document.head.appendChild(t),document.head.insertAdjacentHTML("beforeend","<style>\n    #ta .hopla-button {\n      position: absolute;\n      top: 29%;\n      left: 50%;\n      transform: translate(-50%);\n    }\n    </style>")}n.r(t),n.d(t,{injectHoplaLogin:()=>i})},7731:(e,t,n)=>{"use strict";n.r(t),n.d(t,{injectLogger:()=>a});const{showLastConsoleLog:i}=n(7091);function a(){void 0===window.everything&&(window.everything=[],console.defaultLog=console.log.bind(console),console.log=function(){i(Array.from(arguments).join(" ")),window.everything.push({type:"log",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultLog.apply(console,[(new Date).toLocaleString(),...arguments])},console.defaultError=console.error.bind(console),console.error=function(){i(Array.from(arguments).join(" ")),window.everything.push({type:"error",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultError.apply(console,arguments)},console.defaultWarn=console.warn.bind(console),console.warn=function(){window.everything.push({type:"warn",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultWarn.apply(console,arguments)},console.defaultDebug=console.debug.bind(console),console.debug=function(){window.everything.push({type:"debug",datetime:(new Date).getTime(),value:Array.from(arguments)}),console.defaultDebug.apply(console,arguments)})}},4559:(e,t,n)=>{"use strict";function i(){let e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("href","https://fonts.googleapis.com/icon?family=Material+Icons"),document.head.appendChild(e),e=document.createElement("link"),e.setAttribute("rel","stylesheet"),e.setAttribute("href","https://code.getmdl.io/1.3.0/material.indigo-pink.min.css"),document.head.appendChild(e),e=document.createElement("script"),e.setAttribute("src","https://code.getmdl.io/1.3.0/material.min.js"),document.head.appendChild(e),e=document.createElement("script"),e.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.4.2/dialog-polyfill.min.js"),document.head.appendChild(e),document.head.insertAdjacentHTML("beforeend","<style>\n    #ta .mdl-switch {\n      width: unset;\n    }\n\n    #__next, .MuiPaper-root {\n      width: calc(100% - 370px) !important;\n      left: 0px !important;\n    }\n    </style>")}n.r(t),n.d(t,{injectMdl:()=>i})},3695:(e,t,n)=>{"use strict";function i(){const e=document.createElement("script");e.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.2/moment.min.js"),document.head.appendChild(e)}n.r(t),n.d(t,{injectMoment:()=>i})},5729:(e,t,n)=>{"use strict";function i(){const e=document.createElement("style");document.head.append(e),e.textContent=".mdl-list__item.taseparator {\n    border-bottom: solid 1px #e0e0e0;\n  }\n  \n  .mdl-list__item.taseparator .mdl-textfield__input {\n    border-bottom: unset;\n    text-align: right;\n  }\n  \n  .mdl-list__item-secondary-action.tawsmall {\n    width: 45px;\n  }\n  \n  [id^=page] .demo-list-control {\n    margin-top: unset;\n    height: calc(100% - 143px);\n    overflow: auto;\n  }\n  \n  #page2 .demo-list-control {\n    /* margin-top: unset;\n    height: fit-content;\n    overflow: auto; */\n    margin-top: unset;\n    height: calc(100% - 173px);\n    overflow: auto;\n  }\n  \n  #ta .mdl-textfield {\n    width: 100%;\n  }\n  \n  /* #ta .mdl-textfield__label {\n    text-align: center;\n  } */\n  \n  .label {\n    font-weight: 700;\n    margin-right: 10px;\n  }\n  \n  #dialog-bug {\n    width: 400px;\n    height: max-content;\n  }\n  \n  .report-detail {\n    display: flex;\n  }\n  \n  #bugvariantdetails {\n    border: solid 1px;\n    padding: 8px;\n  }\n  \n  \n  .blue {\n    color: blue\n  }\n  .green {\n    color: green\n  }\n  .purple {\n    color: purple\n  }\n  .red {\n    color: red\n  }\n  .bgred {\n    background: red !important;\n  }\n  \n  .buttons_container {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n  }\n  "}n.r(t),n.d(t,{injectStyle:()=>i})},7933:(e,t,n)=>{"use strict";n.r(t),n.d(t,{injectTrackjs:()=>a});var i=n(6849);function a(){try{self.TrackJS=self.trackJs=function(e,t,n){var i=function(e,t){this.config=e,this.onError=t,e.enabled&&this.watch()};i.prototype={watch:function(){m.forEach(["EventTarget","Node","XMLHttpRequest"],(function(t){m.has(e,t+".prototype.addEventListener")&&m.hasOwn(e[t].prototype,"addEventListener")&&this.wrapEventTarget(e[t].prototype)}),this),this.wrapTimer("setTimeout"),this.wrapTimer("setInterval")},wrap:function(e){function t(){try{return e.apply(this,arguments)}catch(e){throw a.onError("catch",e,{bindTime:n,bindStack:i}),m.wrapError(e)}}var n,i,a=this;try{if(!m.isFunction(e)||m.hasOwn(e,"__trackjs__"))return e;if(m.hasOwn(e,"__trackjs_state__"))return e.__trackjs_state__}catch(t){return e}if(a.config.bindStack)try{throw Error()}catch(e){i=e.stack,n=m.isoNow()}for(var s in e)m.hasOwn(e,s)&&(t[s]=e[s]);return t.prototype=e.prototype,t.__trackjs__=!0,e.__trackjs_state__=t},wrapEventTarget:function(e){var t=this;m.has(e,"addEventListener.call")&&m.has(e,"removeEventListener.call")&&(m.patch(e,"addEventListener",(function(e){return function(n,i,a,s){try{m.has(i,"handleEvent")&&(i.handleEvent=t.wrap(i.handleEvent))}catch(e){}return e.call(this,n,t.wrap(i),a,s)}})),m.patch(e,"removeEventListener",(function(e){return function(t,n,i,a){try{n=n&&(n.__trackjs_state__||n)}catch(e){}return e.call(this,t,n,i,a)}})))},wrapTimer:function(t){var n=this;m.patch(e,t,(function(e){return function(t,i){var a=Array.prototype.slice.call(arguments),s=a[0];return m.isFunction(s)&&(a[0]=n.wrap(s)),m.has(e,"apply")?e.apply(this,a):e(a[0],a[1])}}))}};var a=function(e){this.initCurrent(e)||console.warn("[TrackJS] invalid config")};a.prototype={current:{},initOnly:{application:!0,cookie:!0,enabled:!0,token:!0,callback:{enabled:!0},console:{enabled:!0},navigation:{enabled:!0},network:{enabled:!0,fetch:!0},visitor:{enabled:!0},window:{enabled:!0,promise:!0}},defaults:{application:"",cookie:!1,dedupe:!0,dependencies:!0,enabled:!0,forwardingDomain:"",errorURL:"https://capture.trackjs.com/capture",errorNoSSLURL:"http://capture.trackjs.com/capture",faultURL:"https://usage.trackjs.com/fault.gif",usageURL:"https://usage.trackjs.com/usage.gif",onError:function(){return!0},serialize:function(e){function t(e){var t="<"+e.tagName.toLowerCase();e=e.attributes||[];for(var n=0;n<e.length;n++)t+=" "+e[n].name+'="'+e[n].value+'"';return t+">"}if(""===e)return"Empty String";if(e===n)return"undefined";if(m.isString(e)||m.isNumber(e)||m.isBoolean(e)||m.isFunction(e))return""+e;if(m.isElement(e))return t(e);if("symbol"==typeof e)return Symbol.prototype.toString.call(e);var i;try{i=JSON.stringify(e,(function(e,i){return i===n?"undefined":m.isNumber(i)&&isNaN(i)?"NaN":m.isError(i)?{name:i.name,message:i.message,stack:i.stack}:m.isElement(i)?t(i):i}))}catch(t){for(var a in i="",e)if(e.hasOwnProperty(a))try{i+=',"'+a+'":"'+e[a]+'"'}catch(e){}i=i?"{"+i.replace(",","")+"}":"Unserializable Object"}return i.replace(/"undefined"/g,"undefined").replace(/"NaN"/g,"NaN")},sessionId:"",token:"",userId:"",version:"",callback:{enabled:!0,bindStack:!1},console:{enabled:!0,display:!0,error:!0,warn:!1,watch:["log","debug","info","warn","error"]},navigation:{enabled:!0},network:{enabled:!0,error:!0,fetch:!0},visitor:{enabled:!0},window:{enabled:!0,promise:!0}},initCurrent:function(e){return this.removeEmpty(e),this.validate(e,this.defaults,"[TrackJS] config",{})?(this.current=m.defaultsDeep({},e,this.defaults),!0):(this.current=m.defaultsDeep({},this.defaults),!1)},setCurrent:function(e){return!!this.validate(e,this.defaults,"[TrackJS] config",this.initOnly)&&(this.current=m.defaultsDeep({},e,this.current),!0)},removeEmpty:function(e){for(var t in e)e.hasOwnProperty(t)&&e[t]===n&&delete e[t]},validate:function(e,t,n,i){var a=!0;for(var s in n=n||"",i=i||{},e)if(e.hasOwnProperty(s))if(t.hasOwnProperty(s)){var r=typeof t[s];r!==typeof e[s]?(console.warn(n+"."+s+": property must be type "+r+"."),a=!1):"[object Array]"!==Object.prototype.toString.call(e[s])||this.validateArray(e[s],t[s],n+"."+s)?"[object Object]"===Object.prototype.toString.call(e[s])?a=this.validate(e[s],t[s],n+"."+s,i[s]):i.hasOwnProperty(s)&&(console.warn(n+"."+s+": property cannot be set after load."),a=!1):a=!1}else console.warn(n+"."+s+": property not supported."),a=!1;return a},validateArray:function(e,t,n){var i=!0;n=n||"";for(var a=0;a<e.length;a++)m.contains(t,e[a])||(console.warn(n+"["+a+"]: invalid value: "+e[a]+"."),i=!1);return i}};var s=function(e,t,n,i,a,s,r){this.util=e,this.log=t,this.onError=n,this.onFault=i,this.serialize=a,r.enabled&&(s.console=this.wrapConsoleObject(s.console,r))};s.prototype={wrapConsoleObject:function(e,t){var n,i=(e=e||{}).log||function(){},a=this;for(n=0;n<t.watch.length;n++)!function(n){var s=e[n]||i;e[n]=function(){try{var i=Array.prototype.slice.call(arguments);if(a.log.add("c",{timestamp:a.util.isoNow(),severity:n,message:a.serialize(1===i.length?i[0]:i)}),t[n])if(m.isError(i[0])&&1===i.length)a.onError("console",i[0]);else try{throw Error(a.serialize(1===i.length?i[0]:i))}catch(e){a.onError("console",e)}t.display&&(a.util.hasFunction(s,"apply")?s.apply(e,i):s(i[0]))}catch(e){a.onFault(e)}}}(t.watch[n]);return e},report:function(){return this.log.all("c")}};var r=function(e,t,n,i,a){this.config=e,this.util=t,this.log=n,this.window=i,this.document=a,this.correlationId=this.token=null,this.initialize()};r.prototype={initialize:function(){this.token=this.getCustomerToken(),this.correlationId=this.getCorrelationId()},getCustomerToken:function(){if(this.config.current.token)return this.config.current.token;var e=this.document.getElementsByTagName("script");return e[e.length-1].getAttribute("data-token")},getCorrelationId:function(){var e;if(!this.config.current.cookie)return this.util.uuid();try{(e=this.document.cookie.replace(/(?:(?:^|.*;\s*)TrackJS\s*\=\s*([^;]*).*$)|^.*$/,"$1"))||(e=this.util.uuid(),this.document.cookie="TrackJS="+e+"; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/")}catch(t){e=this.util.uuid()}return e},report:function(){return{application:this.config.current.application,correlationId:this.correlationId,sessionId:this.config.current.sessionId,token:this.token,userId:this.config.current.userId,version:this.config.current.version}}};var o=function(e){this.config=e,this.loadedOn=(new Date).getTime(),this.originalUrl=m.getLocation(),this.referrer=m.isBrowser?t.referrer:""};o.prototype={discoverDependencies:function(){var t={TrackJS:"3.10.1"};for(var n in e.jQuery&&e.jQuery.fn&&e.jQuery.fn.jquery&&(t.jQuery=e.jQuery.fn.jquery),e.jQuery&&e.jQuery.ui&&e.jQuery.ui.version&&(t.jQueryUI=e.jQuery.ui.version),e.angular&&e.angular.version&&e.angular.version.full&&(t.angular=e.angular.version.full),e)if("_trackJs"!==n&&"_trackJS"!==n&&"_trackjs"!==n&&"webkitStorageInfo"!==n&&"webkitIndexedDB"!==n&&"top"!==n&&"parent"!==n&&"frameElement"!==n)try{if(e[n]){var i=e[n].version||e[n].Version||e[n].VERSION;"string"==typeof i&&(t[n]=i)}}catch(e){}return t.TrackJS&&t.trackJs&&delete t.trackJs,t},report:function(){return{age:(new Date).getTime()-this.loadedOn,dependencies:this.config.current.dependencies?this.discoverDependencies():{trackJs:"3.10.1"},originalUrl:this.originalUrl,referrer:this.referrer,userAgent:e.navigator.userAgent,viewportHeight:m.isBrowser?e.document.documentElement.clientHeight:0,viewportWidth:m.isBrowser?e.document.documentElement.clientWidth:0}}};var l=function(e){this.util=e,this.appender=[],this.maxLength=30};l.prototype={all:function(e){var t,n,i=[];for(n=0;n<this.appender.length;n++)(t=this.appender[n])&&t.category===e&&i.push(t.value);return i},clear:function(){this.appender.length=0},truncate:function(){this.appender.length>this.maxLength&&(this.appender=this.appender.slice(Math.max(this.appender.length-this.maxLength,0)))},add:function(e,t){var n=this.util.uuid();return this.appender.push({key:n,category:e,value:t}),this.truncate(),n},get:function(e,t){var n,i;for(i=0;i<this.appender.length;i++)if((n=this.appender[i]).category===e&&n.key===t)return n.value;return!1}};var c=function(e){var t={};return{addMetadata:function(e,n){t[e]=n},removeMetadata:function(e){delete t[e]},report:function(){var n,i=[];for(n in t)t.hasOwnProperty(n)&&i.push({key:n,value:e(t[n])});return i},store:t}},d=function(e,t){this.log=e,this.options=t,t.enabled&&this.watch()};d.prototype={isCompatible:function(t){return t=t||e,!m.has(t,"chrome.app.runtime")&&m.has(t,"addEventListener")&&m.has(t,"history.pushState")},record:function(e,t,n){this.log.add("h",{type:e,from:m.truncate(t,250),to:m.truncate(n,250),on:m.isoNow()})},report:function(){return this.log.all("h")},watch:function(){if(this.isCompatible()){var t=this,n=m.getLocationURL().relative;e.addEventListener("popstate",(function(){var e=m.getLocationURL().relative;t.record("popState",n,e),n=e}),!0),m.forEach(["pushState","replaceState"],(function(e){m.patch(history,e,(function(i){return function(){n=m.getLocationURL().relative;var a=i.apply(this,arguments),s=m.getLocationURL().relative;return t.record(e,n,s),n=s,a}}))}))}}};var u=function(e,t,n,i,a,s){this.util=e,this.log=t,this.onError=n,this.onFault=i,this.window=a,this.options=s,s.enabled&&this.initialize(a)};u.prototype={initialize:function(e){e.XMLHttpRequest&&this.util.hasFunction(e.XMLHttpRequest.prototype.open,"apply")&&this.watchNetworkObject(e.XMLHttpRequest),e.XDomainRequest&&this.util.hasFunction(e.XDomainRequest.prototype.open,"apply")&&this.watchNetworkObject(e.XDomainRequest),this.options.fetch&&m.isWrappableFunction(e.fetch)&&this.watchFetch()},escapeUrl:function(e){return(""+e).replace(/ /gi,"%20").replace(/\t/gi,"%09")},watchFetch:function(){var t=this,n=this.log,i=this.options,a=this.onError;m.patch(e,"fetch",(function(s){return function(r,o){if(o&&o.__trackjs__)return s.apply(e,arguments);var l;try{throw Error()}catch(e){l=e.stack}var c=r instanceof Request?r.url:r,d=r instanceof Request?r.method:(o||{}).method||"GET",u=(c=t.escapeUrl(c),s.apply(e,arguments));return u.__trackjs_state__=n.add("n",{type:"fetch",startedOn:m.isoNow(),method:d,url:m.truncate(c,2e3)}),u.then((function(e){var t=n.get("n",u.__trackjs_state__);if(t){m.defaults(t,{completedOn:m.isoNow(),statusCode:e.status,statusText:e.statusText});var s=e.headers.get("trackjs-correlation-id");s&&(t.requestCorrelationId=s),i.error&&400<=e.status&&((t=Error(t.statusCode+" : "+t.method+" "+t.url)).stack=l,a("ajax",t))}return e})).catch((function(e){e=e||{};var t=n.get("n",u.__trackjs_state__);throw t&&(m.defaults(t,{completedOn:m.isoNow(),statusCode:0,statusText:e.toString()}),i.error&&(a("ajax",{name:e.name,message:(e.message||"Failed")+": "+t.method+" "+t.url,stack:e.stack||l}),e.__trackjs_state__=!0)),e}))}}))},watchNetworkObject:function(e){var t=this,n=e.prototype.open,i=e.prototype.send;return e.prototype.open=function(e,i){var a=(i||"").toString();return 0>a.indexOf("localhost:0")&&(a=t.escapeUrl(a),this._trackJs={method:e,url:a}),n.apply(this,arguments)},e.prototype.send=function(){if(!this._trackJs)try{return i.apply(this,arguments)}catch(e){return void t.onError("ajax",e)}try{this._trackJs.logId=t.log.add("n",{type:"xhr",startedOn:t.util.isoNow(),method:this._trackJs.method,url:m.truncate(this._trackJs.url,2e3)}),t.listenForNetworkComplete(this)}catch(e){t.onFault(e)}return i.apply(this,arguments)},e},listenForNetworkComplete:function(e){var t=this;t.window.ProgressEvent&&e.addEventListener&&e.addEventListener("readystatechange",(function(){4===e.readyState&&t.finalizeNetworkEvent(e)}),!0),e.addEventListener?e.addEventListener("load",(function(){t.finalizeNetworkEvent(e),t.checkNetworkFault(e)}),!0):setTimeout((function(){try{var n=e.onload;e.onload=function(){t.finalizeNetworkEvent(e),t.checkNetworkFault(e),"function"==typeof n&&t.util.hasFunction(n,"apply")&&n.apply(e,arguments)};var i=e.onerror;e.onerror=function(){t.finalizeNetworkEvent(e),t.checkNetworkFault(e),"function"==typeof oldOnError&&i.apply(e,arguments)}}catch(e){t.onFault(e)}}),0)},finalizeNetworkEvent:function(e){if(e._trackJs){var t=this.log.get("n",e._trackJs.logId);t&&(t.completedOn=this.util.isoNow(),e.getAllResponseHeaders&&e.getResponseHeader&&0<=(e.getAllResponseHeaders()||"").toLowerCase().indexOf("trackjs-correlation-id")&&(t.requestCorrelationId=e.getResponseHeader("trackjs-correlation-id")),t.statusCode=1223==e.status?204:e.status,t.statusText=1223==e.status?"No Content":e.statusText)}},checkNetworkFault:function(e){if(this.options.error&&400<=e.status&&1223!=e.status){var t=e._trackJs||{};this.onError("ajax",e.status+" : "+t.method+" "+t.url)}},report:function(){return this.log.all("n")}};var p=function(t,n){this.util=t,this.config=n,this.disabled=!1,this.throttleStats={attemptCount:0,throttledCount:0,lastAttempt:(new Date).getTime()},e.JSON&&e.JSON.stringify||(this.disabled=!0)};p.prototype={errorEndpoint:function(t){var n=this.config.current,i=n.errorURL;return m.isBrowser&&!m.testCrossdomainXhr()&&-1===e.location.protocol.indexOf("https")?i=n.errorNoSSLURL:n.forwardingDomain&&(i="https://"+n.forwardingDomain+"/capture"),i+"?token="+t+"&v=3.10.1"},usageEndpoint:function(e){var t=this.config.current,n=t.usageURL;return t.forwardingDomain&&(n="https://"+t.forwardingDomain+"/usage.gif"),this.appendObjectAsQuery(e,n)},trackerFaultEndpoint:function(e){var t=(this.config||{}).current||a.prototype.defaults,n=t.faultURL;return t.forwardingDomain&&(n="https://"+t.forwardingDomain+"/fault.gif"),this.appendObjectAsQuery(e,n)},appendObjectAsQuery:function(e,t){for(var n in t+="?",e)e.hasOwnProperty(n)&&(t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n])+"&");return t},getCORSRequest:function(t,n){var i;return this.util.testCrossdomainXhr()?((i=new e.XMLHttpRequest).open(t,n),i.setRequestHeader("Content-Type","text/plain")):void 0!==e.XDomainRequest?(i=new e.XDomainRequest).open(t,n):i=null,i},sendTrackerFault:function(e){this.throttle(e)||(m.isBrowser?t.createElement("img").src=this.trackerFaultEndpoint(e):fetch(this.trackerFaultEndpoint(e),{mode:"no-cors",__trackjs__:!0}))},sendUsage:function(e){m.isBrowser?t.createElement("img").src=this.usageEndpoint(e):fetch(this.usageEndpoint(e),{mode:"no-cors",__trackjs__:!0})},sendError:function(t,i){var a=this;if(!this.disabled&&!this.throttle(t))try{if(m.isBrowser){var s=this.getCORSRequest("POST",this.errorEndpoint(i));s.onreadystatechange=function(){4!==s.readyState||m.contains([200,202],s.status)||(a.disabled=!0)},s._trackJs=n,s.send(e.JSON.stringify(t))}else if(m.isWorker){var r={method:"POST",mode:"cors",body:e.JSON.stringify(t),__trackjs__:1};fetch(this.errorEndpoint(i),r).then((function(e){e.ok||(a.disabled=!0)})).catch((function(e){a.disabled=!0}))}}catch(e){throw this.disabled=!0,e}},throttle:function(e){var t=(new Date).getTime();if(this.throttleStats.attemptCount++,this.throttleStats.lastAttempt+1e3>=t){if(this.throttleStats.lastAttempt=t,10<this.throttleStats.attemptCount)return this.throttleStats.throttledCount++,!0}else e.throttled=this.throttleStats.throttledCount,this.throttleStats.attemptCount=0,this.throttleStats.lastAttempt=t,this.throttleStats.throttledCount=0;return!1}};var m=function(){function i(e,t,s,r){return s=s||!1,r=r||0,m.forEach(t,(function(t){m.forEach(m.keys(t),(function(o){null===t[o]||t[o]===n?e[o]=t[o]:s&&10>r&&"[object Object]"===a(t[o])?(e[o]=e[o]||{},i(e[o],[t[o]],s,r+1)):e.hasOwnProperty(o)||(e[o]=t[o])}))})),e}function a(e){return Object.prototype.toString.call(e)}return{isBrowser:void 0!==e&&void 0!==e.document,isWorker:"object"==typeof self&&self.constructor&&0<=(self.constructor.name||"").indexOf("WorkerGlobalScope"),isNode:"undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node,addEventListenerSafe:function(e,t,n,i){e.addEventListener?e.addEventListener(t,n,i):e.attachEvent&&e.attachEvent("on"+t,n)},afterDocumentLoad:function(e){if(m.isWorker)m.defer(e);else{var n=!1;"complete"===t.readyState?m.defer(e):(m.addEventListenerSafe(t,"readystatechange",(function(){"complete"!==t.readyState||n||(m.defer(e),n=!0)})),setTimeout((function(){n||(m.defer(e),n=!0)}),1e4))}},bind:function(e,t){return function(){return e.apply(t,Array.prototype.slice.call(arguments))}},contains:function(e,t){return 0<=e.indexOf(t)},defaults:function(e){return i(e,Array.prototype.slice.call(arguments,1),!1)},defaultsDeep:function(e){return i(e,Array.prototype.slice.call(arguments,1),!0)},defer:function(e,t){setTimeout((function(){e.apply(t)}))},forEach:function(e,t,n){if(m.isArray(e)){if(e.forEach)return e.forEach(t,n);for(var i=0;i<e.length;)t.call(n,e[i],i,e),i++}},getLocation:function(){return e.location.toString().replace(/ /g,"%20")},getLocationURL:function(){return m.parseURL(m.getLocation())},has:function(e,t){try{for(var n=t.split("."),i=e,a=0;a<n.length;a++){if(!i[n[a]])return!1;i=i[n[a]]}return!0}catch(e){return!1}},hasFunction:function(e,t){try{return!!e[t]}catch(e){return!1}},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},isArray:function(e){return"[object Array]"===a(e)},isBoolean:function(e){return"boolean"==typeof e||m.isObject(e)&&"[object Boolean]"===a(e)},isBrowserIE:function(t){var n=(t=t||e.navigator.userAgent).match(/Trident\/([\d.]+)/);return n&&"7.0"===n[1]?11:!!(t=t.match(/MSIE ([\d.]+)/))&&parseInt(t[1],10)},isBrowserSupported:function(){var e=this.isBrowserIE();return!e||8<=e},isError:function(e){if(!m.isObject(e))return!1;var t=a(e);return"[object Error]"===t||"[object DOMException]"===t||m.isString(e.name)&&m.isString(e.message)},isElement:function(e){return m.isObject(e)&&1===e.nodeType},isFunction:function(e){return!(!e||"function"!=typeof e)},isNumber:function(e){return"number"==typeof e||m.isObject(e)&&"[object Number]"===a(e)},isObject:function(e){return!(!e||"object"!=typeof e)},isString:function(e){return"string"==typeof e||!m.isArray(e)&&m.isObject(e)&&"[object String]"===a(e)},isWrappableFunction:function(e){return this.isFunction(e)&&this.hasFunction(e,"apply")},isoNow:function(){var e=new Date;return e.toISOString?e.toISOString():e.getUTCFullYear()+"-"+this.pad(e.getUTCMonth()+1)+"-"+this.pad(e.getUTCDate())+"T"+this.pad(e.getUTCHours())+":"+this.pad(e.getUTCMinutes())+":"+this.pad(e.getUTCSeconds())+"."+String((e.getUTCMilliseconds()/1e3).toFixed(3)).slice(2,5)+"Z"},keys:function(e){if(!m.isObject(e))return[];var t,n=[];for(t in e)e.hasOwnProperty(t)&&n.push(t);return n},noop:function(){},pad:function(e){return 1===(e=String(e)).length&&(e="0"+e),e},parseURL:function(e){var t=e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);return t?((t={protocol:t[2],host:t[4],path:t[5],query:t[6],hash:t[8]}).origin=(t.protocol||"")+"://"+(t.host||""),t.relative=(t.path||"")+(t.query||"")+(t.hash||""),t.href=e,t):{}},patch:function(e,t,n){e[t]=n(e[t]||m.noop)},testCrossdomainXhr:function(){return m.isBrowser&&"withCredentials"in new XMLHttpRequest},truncate:function(e,t){if((e=""+e).length<=t)return e;var n=e.length-t;return e.substr(0,t)+"...{"+n+"}"},tryGet:function(e,t){try{return e[t]}catch(e){}},uuid:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},wrapError:function(e){var t=e||Object.prototype.toString.call(e);if(t&&t.innerError)return e;var n=Error("TrackJS Caught: "+(t.message||t));return n.description="TrackJS Caught: "+t.description,n.file=t.file,n.line=t.line||t.lineNumber,n.column=t.column||t.columnNumber,n.stack=t.stack,n.innerError=e,n}}}(),h=function(e,t,n,i,a,s){this.util=e,this.log=t,this.onError=n,this.onFault=i,this.options=s,this.document=a,e.isBrowser&&s.enabled&&this.initialize(a)};h.prototype={initialize:function(e){var t=this.util.bind(this.onDocumentClicked,this),n=this.util.bind(this.onInputChanged,this);e.addEventListener?(e.addEventListener("click",t,!0),e.addEventListener("blur",n,!0)):e.attachEvent&&(e.attachEvent("onclick",t),e.attachEvent("onfocusout",n))},onDocumentClicked:function(e){try{var t=this.getElementFromEvent(e);t&&t.tagName&&(this.isDescribedElement(t,"a")||this.isDescribedElement(t,"button")||this.isDescribedElement(t,"input",["button","submit"])?this.writeVisitorEvent(t,"click"):this.isDescribedElement(t,"input",["checkbox","radio"])&&this.writeVisitorEvent(t,"input",t.value,t.checked))}catch(e){this.onFault(e)}},onInputChanged:function(e){try{var t=this.getElementFromEvent(e);t&&t.tagName&&(this.isDescribedElement(t,"textarea")?this.writeVisitorEvent(t,"input",t.value):this.isDescribedElement(t,"select")&&t.options&&t.options.length?this.onSelectInputChanged(t):this.isDescribedElement(t,"input")&&!this.isDescribedElement(t,"input",["button","submit","hidden","checkbox","radio"])&&this.writeVisitorEvent(t,"input",t.value))}catch(e){this.onFault(e)}},onSelectInputChanged:function(e){if(e.multiple)for(var t=0;t<e.options.length;t++)e.options[t].selected&&this.writeVisitorEvent(e,"input",e.options[t].value);else 0<=e.selectedIndex&&e.options[e.selectedIndex]&&this.writeVisitorEvent(e,"input",e.options[e.selectedIndex].value)},writeVisitorEvent:function(e,t,i,a){"password"===this.getElementType(e)&&(i=n);var s=this.getElementAttributes(e);e.innerText&&(s.__trackjs_element_text=this.util.truncate(e.innerText,500)),this.log.add("v",{timestamp:this.util.isoNow(),action:t,element:{tag:e.tagName.toLowerCase(),attributes:s,value:this.getMetaValue(i,a)}})},getElementFromEvent:function(e){return e.target||t.elementFromPoint(e.clientX,e.clientY)},isDescribedElement:function(e,t,n){if(e.tagName.toLowerCase()!==t.toLowerCase())return!1;if(!n)return!0;for(e=this.getElementType(e),t=0;t<n.length;t++)if(n[t]===e)return!0;return!1},getElementType:function(e){return(e.getAttribute("type")||"").toLowerCase()},getElementAttributes:function(e){for(var t={},n=Math.min(e.attributes.length,10),i=0;i<n;i++){var a=e.attributes[i];m.contains(["data-value","value"],a.name.toLowerCase())||(t[a.name]=m.truncate(a.value,100))}return t},getMetaValue:function(e,t){return e===n?n:{length:e.length,pattern:this.matchInputPattern(e),checked:t}},matchInputPattern:function(e){return""===e?"empty":/^[a-z0-9!#$%&'*+=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/.test(e)?"email":/^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-]\d{4}$/.test(e)||/^(\d{4}[\/\-](0?[1-9]|1[012])[\/\-]0?[1-9]|[12][0-9]|3[01])$/.test(e)?"date":/^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/.test(e)?"usphone":/^\s*$/.test(e)?"whitespace":/^\d*$/.test(e)?"numeric":/^[a-zA-Z]*$/.test(e)?"alpha":/^[a-zA-Z0-9]*$/.test(e)?"alphanumeric":"characters"},report:function(){return this.log.all("v")}};var g=function(e,t,n,i,a){this.onError=e,this.onFault=t,this.serialize=n,a.enabled&&this.watchWindowErrors(i),a.promise&&this.watchPromiseErrors(i)};g.prototype={watchPromiseErrors:function(e){var t=this;e.addEventListener?e.addEventListener("unhandledrejection",(function(e){try{var i=(e=e||{}).detail?m.tryGet(e.detail,"reason"):m.tryGet(e,"reason");if(i!==n&&null!==i&&!i.__trackjs_state__){if(!m.isError(i))try{throw Error(t.serialize(i))}catch(e){i=e}t.onError("promise",i)}}catch(e){t.onFault(e)}})):m.patch(e,"onunhandledrejection",(function(e){return function(n){t.onError("promise",n),e.apply(this,arguments)}}))},watchWindowErrors:function(e){var t=this;m.patch(e,"onerror",(function(e){return function(n,i,a,s,r){try{if(m.isError(r))return t.onError("window",r),void e.apply(this,arguments);var o={message:(r=r||{}).message||t.serialize(n),name:r.name||"Error",line:r.line||parseInt(a,10)||null,column:r.column||parseInt(s,10)||null,stack:r.stack||null};"[object Event]"!==Object.prototype.toString.call(n)||i?o.file=r.file||t.serialize(i):o.file=(n.target||{}).src,t.onError("window",o)}catch(e){t.onFault(e)}e.apply(this,arguments)}}))}};var f,w,y=function(){this.hasInstalled=!1,this.hasEnabled=!0,this.window=e,this.document=t,this.util=m,this.install=m.bind(this.install,this),this.onError=m.bind(this.onError,this),this.onFault=m.bind(this.onFault,this),this.serialize=m.bind(this.serialize,this),this.log=new l(m),this.metadata=new c(this.serialize);var n=e&&(e._trackJs||e._trackJS||e._trackjs);n&&this.install(n)};return y.prototype={install:function(e){try{if(m.isNode)return this.warn("monitoring disabled in node"),!1;if(!m.has(e,"token"))return this.warn("missing token"),!1;if(this.hasInstalled)return this.warn("already installed"),!1;if(this.config=new a(e),this.transmitter=new p(this.util,this.config),this.environment=new o(this.config),this.customer=new r(this.config,this.util,this.log,this.window,this.document),!this.config.current.enabled)return this.hasEnabled=!1;if(this.windowConsoleWatcher=new s(this.util,this.log,this.onError,this.onFault,this.serialize,this.window,this.config.current.console),!this.util.isBrowserSupported())return!1;this.callbackWatcher=new i(this.config.current.callback,this.onError,this.onFault),this.visitorWatcher=new h(this.util,this.log,this.onError,this.onFault,this.document,this.config.current.visitor),this.navigationWatcher=new d(this.log,this.config.current.navigation),this.networkWatcher=new u(this.util,this.log,this.onError,this.onFault,this.window,this.config.current.network),this.windowWatcher=new g(this.onError,this.onFault,this.serialize,this.window,this.config.current.window);var t=this;return m.afterDocumentLoad((function(){t.transmitter.sendUsage({token:t.customer.token,correlationId:t.customer.correlationId,application:t.config.current.application,x:t.util.uuid()})})),this.hasInstalled=!0}catch(e){return this.onFault(e),!1}},pub:function(){var e=this,t={addMetadata:this.metadata.addMetadata,attempt:function(t,n){try{var i=Array.prototype.slice.call(arguments,2);return t.apply(n||this,i)}catch(t){throw e.onError("catch",t),m.wrapError(t)}},configure:function(t){return!e.hasInstalled&&e.hasEnabled?(e.warn("agent must be installed"),!1):e.config.setCurrent(t)},hash:"fb090f9249a14e8440f317f57bd82ec8d6ea32a4",isInstalled:function(){return e.hasInstalled},install:this.install,removeMetadata:this.metadata.removeMetadata,track:function(t){if(!e.hasInstalled&&e.hasEnabled)e.warn("agent must be installed");else{var n=m.isError(t)?t.message:e.serialize(t);if(!(t=t||{}).stack)try{throw Error(n)}catch(e){t=e}e.onError("direct",t)}},version:"3.10.1",watch:function(t,n){return function(){try{var i=Array.prototype.slice.call(arguments,0);return t.apply(n||this,i)}catch(t){throw e.onError("catch",t),m.wrapError(t)}}},watchAll:function(e){var t,n=Array.prototype.slice.call(arguments,1);for(t in e)"function"!=typeof e[t]||m.contains(n,t)||(e[t]=this.watch(e[t],e));return e}};return new s(m,e.log,e.onError,e.onFault,e.serialize,t,a.prototype.defaults.console),t},onError:(w=!1,function(t,n,i){if(this.hasInstalled&&this.hasEnabled&&m.isBrowserSupported())try{if(i=i||{bindStack:null,bindTime:null,force:!1},n&&m.isError(n)||(n={name:"Error",message:this.serialize(n,i.force)}),-1===n.message.indexOf("TrackJS Caught"))if(w&&-1!==n.message.indexOf("Script error"))w=!1;else{var a=m.defaultsDeep({},{agentPlatform:m.isBrowser?"browser":"worker",bindStack:i.bindStack,bindTime:i.bindTime,column:n.column||n.columnNumber,console:this.windowConsoleWatcher.report(),customer:this.customer.report(),entry:t,environment:this.environment.report(),file:n.file||n.fileName,line:n.line||n.lineNumber,message:n.message,metadata:this.metadata.report(),nav:this.navigationWatcher.report(),network:this.networkWatcher.report(),url:(e.location||"").toString(),stack:n.stack,timestamp:this.util.isoNow(),visitor:this.visitorWatcher.report(),version:"3.10.1"});if(!i.force)try{if(!this.config.current.onError(a,n))return}catch(e){a.console.push({timestamp:this.util.isoNow(),severity:"error",message:e.message});var s=this;setTimeout((function(){s.onError("catch",e,{force:!0})}),0)}if(this.config.current.dedupe){var r=(a.message+a.stack).substr(0,1e4);if(r===f)return;f=r}!function(){function e(){var e=0;return m.forEach(a.console,(function(t){e+=(t.message||"").length})),8e4<=e}for(var t=0;e()&&t<a.console.length;)a.console[t].message=m.truncate(a.console[t].message,1e3),t++}(),this.log.clear(),setTimeout((function(){w=!1})),w=!0,this.transmitter.sendError(a,this.customer.token)}}catch(e){this.onFault(e)}}),onFault:function(e){var t=this.transmitter||new p;e=e||{},e={token:(this.customer||{}).token,file:e.file||e.fileName,msg:e.message||"unknown",stack:(e.stack||"unknown").substr(0,1e3),url:this.window.location,v:"3.10.1",h:"fb090f9249a14e8440f317f57bd82ec8d6ea32a4",x:this.util.uuid()},t.sendTrackerFault(e)},serialize:function(e,t){if(this.hasInstalled&&this.config.current.serialize&&!t)try{return this.config.current.serialize(e)}catch(e){this.onError("catch",e,{force:!0})}return a.prototype.defaults.serialize(e)},warn:function(t){m.has(e,"console.warn")&&e.console.warn("TrackJS: "+t)}},(new y).pub()}("undefined"==typeof self?void 0:self,"undefined"==typeof document?void 0:document),window.TrackJS&&TrackJS.install({token:"16c187efb05541c6b81bee305e0727d1",application:"offerupbot"})}catch(e){console.error(e),(0,i.Z)({error:"Failed to install trackjs",details:e.toString()})}}},642:(e,t,n)=>{"use strict";function i(){document.body.insertAdjacentHTML("afterbegin",'\n  <div id="ta" style="position: fixed;z-index: 900000;background-color: white;border: solid; right: 0px;width: 370px;\n                  height: 600px; \n                  padding-right: unset;\n                  padding-top: unset;\n                  height: 100%;\n                  top: 0;">\n                <div class="hopla-button" style="display: none;">\n                  <iframe width="345px" height="1000px" data-onlogin="login_callback" title="hopla:login_button HOPLA Plugin" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" allow="encrypted-media" src="https://login.hopla.to/button/button.html" style="border: none; visibility: visible; width: 345px; height: 61px;" class=""></iframe>\n                </div>\n\n                \x3c!-- <div id="taheader" class="menu" style="\n                  display: none;\n                  justify-content: space-around;\n                  font-size: x-large;\n                  padding-bottom: 9px;\n                  padding-top: 9px;\n                  ">\n                    <a id="viewer" href="#" style="\n                    color: black;\n                    text-decoration: underline;\n                    ">Viewer</a>\n                    <a id="offerbot" href="#" style="\n                    color: black;\n                    text-decoration: none;\n                    ">OfferBot</a>\n                </div> --\x3e\n                \x3c!-- MDL Tab Container --\x3e\n                <div id="taheader" class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect" style="height: 100%;">\n                  <div id="info-header" style="display: none; color: white;background: rgb(63,81,181);line-height: 26px;padding: 5px 0px;width: 100%;text-align: center; justify-content: space-around;">\n                    <span id="info-subscription"></span>\n                    <span id="info-website"></span>\n                    <span><a id="info-logout" href="#" onclick="hopla_logout()" style="text-decoration: none;color: white;-webkit-highlight: none;">Logout</a></span>\n                  </div>\n                  \x3c!-- Tab Bars --\x3e\n                  <div id="menu" class="mdl-tabs__tab-bar" style="display: none;">\n                      <a href="#page2" class="mdl-tabs__tab is-active" style="width: 100%;">Automate</a>\n                      <a href="#page3" class="mdl-tabs__tab" style="width: 100%;">Content</a>\n                  </div>\n\n                  \x3c!-- <div id="page1" class="mdl-tabs__panel is-active" style="height: 100%;">\n                    <iframe id="taframe" src="https://sell.phones.trade/?model=12pro&amp;storage=128gb&amp;network=unlocked&amp;condition=usedlikenew&a=1" style="\n                      height: 100%;\n                    "></iframe>\n                    <button id="reportbug2" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored" style="position: absolute;\n                      bottom: 0px;\n                      left: 50%;\n                      transform: translate(-50%);\n                      z-index: 1;\n                      width: 100%;\n                      display: none;\n                      height: 44px;">\n                        Report a\n                        <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="bug" class="svg-inline--fa fa-bug fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" style="width: 22px;padding-left: 3px;margin-bottom: 3px;"><path fill="currentColor" d="M511.988 288.9c-.478 17.43-15.217 31.1-32.653 31.1H424v16c0 21.864-4.882 42.584-13.6 61.145l60.228 60.228c12.496 12.497 12.496 32.758 0 45.255-12.498 12.497-32.759 12.496-45.256 0l-54.736-54.736C345.886 467.965 314.351 480 280 480V236c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v244c-34.351 0-65.886-12.035-90.636-32.108l-54.736 54.736c-12.498 12.497-32.759 12.496-45.256 0-12.496-12.497-12.496-32.758 0-45.255l60.228-60.228C92.882 378.584 88 357.864 88 336v-16H32.666C15.23 320 .491 306.33.013 288.9-.484 270.816 14.028 256 32 256h56v-58.745l-46.628-46.628c-12.496-12.497-12.496-32.758 0-45.255 12.498-12.497 32.758-12.497 45.256 0L141.255 160h229.489l54.627-54.627c12.498-12.497 32.758-12.497 45.256 0 12.496 12.497 12.496 32.758 0 45.255L424 197.255V256h56c17.972 0 32.484 14.816 31.988 32.9zM257 0c-61.856 0-112 50.144-112 112h224C369 50.144 318.856 0 257 0z"></path></svg>\n                    </button>\n                  </div> --\x3e\n\n                  <div id="page2" class="mdl-tabs__panel is-active" style="position: relative; height: calc(100% - 83px); display: none;">\n                    <ul class="demo-list-control mdl-list">\n                      <li class="mdl-list__item" style="height: 100px;">\n                          <span class="mdl-list__item-primary-content">\n                            <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                              <textarea class="mdl-textfield__input" type="text" rows= "3" id="keywords" ></textarea>\n                              <label class="mdl-textfield__label" for="keywords">Keywords</label>\n                            </div>\n                          </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows= "3" id="zipcodes" ></textarea>\n                            <label class="mdl-textfield__label" for="zipcodes">Zipcodes</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows= "3" id="skipwords" ></textarea>\n                            <label class="mdl-textfield__label" for="skipwords">Skip Words</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Listing Price Min\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="100" id="listing_min_price" placeholder="0" style="text-align: unset;">\n                            <label class="mdl-textfield__label" for="listing_min_price"></label>\n                          </span>\n                        </span>\n                        <span class="mdl-list__item-primary-content" style="margin-left: 20px;">\n                          Max\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="1000" id="listing_max_price" placeholder="0">\n                            <label class="mdl-textfield__label" for="listing_max_price"></label>\n                          </span>\n                        </span>\n                      </li>\n                      \x3c!-- <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Owner Listings Min\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="1" id="owner_min_lists" placeholder="0" style="text-align: unset;">\n                            <label class="mdl-textfield__label" for="owner_min_lists"></label>\n                          </span>\n                        </span>\n                        <span class="mdl-list__item-primary-content" style="margin-left: 20px;">\n                          Max\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="1" id="owner_max_lists" placeholder="0">\n                            <label class="mdl-textfield__label" for="owner_max_lists"></label>\n                          </span>\n                        </span>\n                      </li> --\x3e\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Bot Mode\n                        </span>\n                        <div>\n                          <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="mode_single">\n                            <input type="radio" id="mode_single" class="mdl-radio__button" name="bot_mode" value="single" checked disabled>\n                            <span class="mdl-radio__label">Single</span>\n                          </label>\n                          <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="mode_multi">\n                            <input type="radio" id="mode_multi" class="mdl-radio__button" name="bot_mode" value="multi" disabled>\n                            <span class="mdl-radio__label">Multi</span>\n                          </label>\n                        </div>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Listing Max Age\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" id="listing_max_age" value=90 placeholder="0">\n                            <label class="mdl-textfield__label" for="listing_max_age"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Listing Price Delta\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="text" id="listing_price_delta" placeholder="0">\n                            <label class="mdl-textfield__label" for="listing_price_delta"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Custom Price Delta\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="text" id="custom_price_delta" placeholder="0">\n                            <label class="mdl-textfield__label" for="custom_price_delta"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Price Round Up/Down\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" id="roundupdown" placeholder="0">\n                            <label class="mdl-textfield__label" for="roundupdown"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Continue After Storage\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-continue_after_storage">\n                            <input type="checkbox" id="switch-continue_after_storage" class="mdl-switch__input" />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Continue After Network\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-continue_after_network">\n                            <input type="checkbox" id="switch-continue_after_network" class="mdl-switch__input" />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Skip Shipping-Enabled\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-skipshippingenabled">\n                            <input type="checkbox" id="switch-skipshippingenabled" class="mdl-switch__input" checked />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px; display: none;">\n                        <span class="mdl-list__item-primary-content">\n                          Send Partner Messages\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-sendpartnermessages">\n                            <input type="checkbox" id="switch-sendpartnermessages" class="mdl-switch__input" />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="display: none; padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Streak\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="5" id="streak" placeholder="0" style="text-align: unset;">\n                            <label class="mdl-textfield__label" for="streak"></label>\n                          </span>\n                        </span>\n                        <span class="mdl-list__item-primary-content">\n                          Then Timeout\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="15" id="streaktimeout" placeholder="0">\n                            <label class="mdl-textfield__label" for="streaktimeout"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Max Concurrent Conversations\n                        </span>\n                        <span class="mdl-list__item-secondary-action tawsmall">\n                          <span class="mdl-textfield mdl-js-textfield">\n                            <input class="mdl-textfield__input" type="number" value="50" id="maxconcurrentconversations" placeholder="0">\n                            <label class="mdl-textfield__label" for="maxconcurrentconversations"></label>\n                          </span>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 43px;">\n                        <span class="mdl-list__item-primary-content">\n                          Delete After Sending\n                        </span>\n                        <span class="mdl-list__item-secondary-action">\n                          <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-deleteaftersend">\n                            <input type="checkbox" id="switch-deleteaftersend" class="mdl-switch__input" checked />\n                          </label>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item taseparator" style="padding-top: unset !important;\n                        padding-bottom: unset !important;\n                        height: 81px;">\n                        <div class="buttons_container">\n                          <button id="purge_listings" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent bgred">\n                            Purge Listings\n                          </button>\n                          <button id="purge_owners" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent bgred">\n                            Purge Owners\n                          </button>\n                        </div>\n                      </li>\n                    </ul>\n                    <div id="status" style="color: white;background: black;line-height: 26px;padding: 5px 0px;position: absolute;bottom: 111px;width: 100%;text-align: center;min-height: 61px;align-items: center;display: flex;justify-content: center;">\n                        <span id="statustext" style="\n                    "></span></div>\n                    <div id="stats" style="color: white;background: rgb(63,81,181);line-height: 26px;padding: 5px 0px;position: absolute;bottom: 49px;width: 100%;text-align: center;">\n                        <div>TODAY\'S STATS</div>\n                        <div><span id="stat_offers">0</span> offers&nbsp;&nbsp;<span id="stat_partners">0</span> partners&nbsp;&nbsp;<span id="stat_runs">0</span> runs&nbsp;&nbsp;<span id="stat_streaks">0</span> streak&nbsp;&nbsp;<span id="stat_ko">0</span> KO</div>\n                    </div>\n                    <div class="footer" style="\n                      justify-content: space-around;\n                      display: flex;\n                      position: absolute;\n                      bottom: 5px;\n                      width: 100%; align-items: center;\n                      border-top: solid 1px;\n                      border-top-color: #e0e0e0;\n                      height: 44px;\n                      padding-right: 10px;\n                      ">\n                      <span>Run From</span>\n                      <input id="runfrom" type="time" style="width: unset;font-size: 16px;font-family: Lato,&quot;Helvetica Neue&quot;,Arial,sans-serif;font-weight: 400;" class="mdl-textfield__input" value="09:00">\n                      <span>Until</span>\n                      <input id="rununtil" type="time" style="width: unset;font-size: 16px;font-family: Lato,&quot;Helvetica Neue&quot;,Arial,sans-serif;font-weight: 400;" class="mdl-textfield__input" value="18:00">\n                      <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="switch-rununtil">\n                        <input type="checkbox" id="switch-rununtil" class="mdl-switch__input">\n                        <span class="mdl-switch__label"></span>\n                      </label>\n                    </div>\n                  </div>\n\n                  <div id="page3" class="mdl-tabs__panel" style="\n                    height: calc(100% - 83px);\n                    overflow: hidden auto;\n                    position: relative;\n                    display: none;">\n                    <div id="page2loading" class="mdl-spinner mdl-js-spinner is-active" style="position: absolute;left: 50%;top: 30%; display:none;"></div>\n                    <ul class="demo-list-control mdl-list">\n                      <li class="mdl-list__item" style="height: 100px;">  \n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="openermessage" ></textarea>\n                            <label class="mdl-textfield__label" for="openermessage">Opener Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_1" ></textarea>\n                            <label class="mdl-textfield__label" for="question_1">Question 1</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_2" ></textarea>\n                            <label class="mdl-textfield__label" for="question_2">Question 2</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="gbmessage" ></textarea>\n                            <label class="mdl-textfield__label" for="gbmessage">GB Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="networkmessage" ></textarea>\n                            <label class="mdl-textfield__label" for="networkmessage">Network Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_3" ></textarea>\n                            <label class="mdl-textfield__label" for="question_3">Question 3</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="question_4" ></textarea>\n                            <label class="mdl-textfield__label" for="question_4">Question 4</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="lowball_message" ></textarea>\n                            <label class="mdl-textfield__label" for="lowball_message">Lowball</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="offermessage" ></textarea>\n                            <label class="mdl-textfield__label" for="offermessage">Offer Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 100px;">\n                        <span class="mdl-list__item-primary-content">\n                          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <textarea class="mdl-textfield__input" type="text" rows="3" id="meetupmessage" ></textarea>\n                            <label class="mdl-textfield__label" for="meetupmessage">Meetup Message</label>\n                          </div>\n                        </span>\n                      </li>\n                      <li class="mdl-list__item" style="height: 60px; display: none;">\n                        <span class="mdl-list__item-primary-content">\n                          <span class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                            <input class="mdl-textfield__input" type="text" id="partnermessage">\n                            <label class="mdl-textfield__label" for="partnermessage">Partner Message</label>\n                          </span>\n                        </span>\n                      </li>\n                    </ul>\n                    <div class="variables" style="padding-bottom: 10px; position: absolute;\n                    bottom: 55px;\n                    padding: 0px 16px;">\n                        <span style="display: block;">Available Variables:</span>\n                        <span class="variable">[name]</span>\n                        <span class="variable">[model]</span>\n                        <span class="variable">[network]</span>\n                        <span class="variable">[memory]</span>\n                        <span class="variable">[price]</span>\n                        <span class="variable">[listing_price]</span>\n                        <span class="variable">[deductions]</span>\n                        <span class="variable">[condition]</span>\n                        \x3c!-- <span class="variable">[quote_link]</span>\n                        <span class="variable">[pickup_link]</span> \n                        <span class="variable">[partner_link]</span> \n                        <span class="variable">[website]</span> --\x3e\n                    </div>\n                    <div class="template-actions" style="\n                      justify-content: space-between;\n                      display: flex;\n                      position: absolute;\n                      bottom: 0px;\n                      width: 100%;\n                    ">\n                      <button id="test_template" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"\n                        style="width: 50%;\n                        margin-right: 1px;\n                        height: 44px;">\n                        Test\n                      </button>\n                      <button id="restore_defaults" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect"\n                        style="width: 50%;\n                        height: 44px;">\n                        Restore Defaults\n                      </button>\n                    </div>\n                  </div>\n                  \n                </div>\n\n                \n                <dialog id="dialog-bug" class="mdl-dialog">\n                  <h4 class="mdl-dialog__title">Bug Report</h4>\n                  <div class="mdl-dialog__content">\n                    <div id="buglistingdetails">\n                    </div>\n                    <div>\n                        <br>\n                        <p>Based on the info above. The bot determined that the phone variant is:</p>\n                        <div id="bugvariantdetails">\n                        </div>\n                      </div>\n                    <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">\n                      <textarea class="mdl-textfield__input" type="text" rows= "3" id="bugcomment" ></textarea>\n                      <label class="mdl-textfield__label" for="bugcomment">Bug Details</label>\n                    </div>\n                  </div>\n                  <div class="mdl-dialog__actions">\n                    <button type="button" class="mdl-button sendbug">Submit</button>\n                    <button type="button" class="mdl-button close">Close</button>\n                  </div>\n                </dialog>\n              </div>')}n.r(t),n.d(t,{insertUI:()=>i})},5038:(e,t,n)=>{"use strict";n.r(t),n.d(t,{loadInputs:()=>s});var i=n(7426),a=n(3624);function s(){let e=!1;for(const t in localStorage)if(t.startsWith("input_")){const n=t.replace("input_",""),a=localStorage.getItem(t),s=document.getElementById(n);s&&("checkbox"===s.type?"switch-rununtil"===n?((0,i.o)(!0),e=!0):s.checked="true"===a:s.value=a)}else if(t.startsWith("radio_")){const e=t.replace("radio_",""),n=localStorage.getItem(t);let i=document.getElementsByName(e);if(i&&(i=i[0],"radio"===i.type)){const e=document.getElementById(n);e&&(0,a.B)(e).then((()=>{e.parentNode.MaterialRadio.check()}))}}e||(0,i.o)(!0)}},4219:(e,t,n)=>{"use strict";n.r(t),n.d(t,{loadStats:()=>a});var i=n(9171);function a(){const e=new Date,t=`${e.getFullYear()}${e.getMonth()+1}${e.getDate()}`;let n=localStorage.getItem(`stats_${t}`);if(n){n=JSON.parse(n);const e=["offers","partners","runs","streaks","ko"],t={};["offers","partners","runs","streaks","ko"].forEach((e=>{e in n&&(document.getElementById(`stat_${e}`).textContent=n[e])})),e.forEach((e=>{e in n&&("ko"===e?t.KO=n[e]:t[e]=n[e])})),(0,i._)(t)}}},1992:(e,t,n)=>{"use strict";n.r(t),n.d(t,{logout:()=>a});var i=n(147);function a(){HOPLA_login.notyou((function(e){console.log("after not you",e),(0,i.login_callback)(e)}))}},147:(e,t,n)=>{"use strict";n.r(t),n.d(t,{onSessionReady:()=>r,login_callback:()=>o});var i=n(3539),a=n(8414),s=n(3624);function r(e){if(console.log("session ready",e),showLoading(!1),e.isAnonymous){const e=document.querySelector(".hopla-button");e&&(e.style.display="block")}else o(e)}function o(e){console.log("login_callback",e);let t=document.querySelector(".hopla-button");t&&(t.style.display="none"),t=document.querySelector("#ta #menu"),t&&(t.style.display="flex"),t=document.querySelector("#ta #page2"),t&&(t.style.display=null),t=document.querySelector("#ta #page3"),t&&(t.style.display=null),componentHandler.upgradeDom();const n=e&&e.uid;n&&async function(e){const t=await fetch(`https://us-central1-trade-apples.cloudfunctions.net/partners?isTeammember=1&uid=${e}`).then((e=>e.json()));let n=t&&t.isTeamMember&&t.isTeamMember.partnerId;return n||(n=e),n}(n).then((t=>{window.taPartnerId=t,window.taEmail=e&&e.email,(0,a.getPartnerDetails)(t).then((async e=>{if(e.error)return console.error(e.error),void l(e,!1);window.taUID=n,window.var_domain=e&&e.partner_details&&e.partner_details.website&&e.partner_details.website.domain,window.var_domain||(window.var_domain=""),window.taEmail||(window.taEmail=e&&e.partner_details&&e.partner_details.email),window.TrackJS&&window.taEmail&&window.TrackJS&&window.TrackJS.configure({userId:window.taEmail}),l(e,n!==t)}))})),document.getElementById("taheader").style.display="block",document.getElementById("taheader").style.height="100%"}function l(e,t){(0,i.CONSOLE_MESSAGE)("custom","");let n=function(e){return e&&e.subscription_details&&e.subscription_details.business&&"active"===e.subscription_details.business.status?"Business":e&&e.subscription_details&&e.subscription_details.trader&&"active"===e.subscription_details.trader.status?"Trader":""}(e);!n&&t&&(n="Team Member");const a=document.querySelector("#info-header");a&&(a.style.display="flex");const r='<a id="info-logout" href="#" onclick="hopla_logout()" style="color: white;-webkit-highlight: none;">Logout</a>';if(!n)return window.isAllowed=!1,void(a&&(a.innerHTML=`<span> <a target="_blank" href="https://phones.trade/join-us/">Subscribe here</a> to use this bot or ${r}</span>`));window.isAllowed=!0,a&&(a.innerHTML=`<span id="info-subscription"></span>\n    <span id="info-website"></span>\n    <span>${r}</span>`);let o=document.querySelector("#info-subscription");if(o&&(o.textContent=n),o=document.querySelector("#info-website"),o&&(o.textContent=window.var_domain),"Business"===n){let e=document.getElementById("mode_multi");e&&(e.disabled=!1,(0,s.B)(e).then((e=>{e.parentNode.MaterialRadio.checkDisabled()}))),e=document.getElementById("mode_single"),e&&(e.disabled=!1,(0,s.B)(e).then((e=>{e.parentNode.MaterialRadio.checkDisabled()})))}}},9107:(e,t,n)=>{"use strict";n.d(t,{e:()=>s});var i=n(9178);function a(e,t){return e&&t?t.includes("%")?(t=t.replace(/[^\d\.-]/g,""),e+e*((t=Number(t))/100)):(t=t.replace(/[^\d\.-]/g,""),e+(t=Number(t))):e}function s(e,t,n,s){let r=e,o=t&&t.model;o||(o="");let l=t&&t.network;l?l.toLowerCase().startsWith("locked")&&(l="Locked"):l="";let c=t&&t.storage;c||(c="");let d=t&&t.price;d||(d="");let u="";if(t&&t.condition)try{u=t.condition.split("-")[1],u=u.trim(),u=(0,i.M)(u)}catch(e){u=t.condition.split("-")[0],u=u.trim(),u=(0,i.M)(u)}let p="no deductions";t&&t.deductions&&t.deductions.length&&(p=t.deductions.join(", "));const m=document.querySelector("#custom_price_delta").value||0,h=document.querySelector("#listing_price_delta").value||0;r=r.replace(/\[model\]/g,o),r=r.replace(/\[network\]/g,l),r=r.replace(/\[memory\]/g,c),r=r.replace(/\[name\]/g,n.split(" ")[0]);let g,f=r.match(/\[price\s?-\s?(\d+)\]/);if(d&&f&&f.length>1){const e=parseFloat(f[1]);let t=d-parseFloat(e);t<0&&(t=0),r=r.replace(/\[price\s?-\s?\d+\]/,`$${t}`)}else if(d&&r.match(/\[price\]/)){let e=d;m&&(e=a(d,m));let t=document.getElementById("roundupdown").value;t&&(t=parseFloat(t)),e=function(e,t){if(!t)return e;const n=t>0?Math.ceil(e/Math.abs(t)):Math.floor(e/Math.abs(t));return Math.abs(n*t)}(e,t),e<0&&(e=0),r=r.replace(/\[price\]/,`$${e}`)}else r=r.replace(/\[price\s?-\s?\d+\]/,"");if(f=r.match(/\[listing_price\s?-\s?(\d+)\]/),void 0!==s&&f&&f.length>1){const e=parseFloat(f[1]);let t=s-parseFloat(e);t<0&&(t=0),r=r.replace(/\[listing_price\s?-\s?\d+\]/,`$${t}`)}else if(void 0!==s&&r.match(/\[listing_price\]/)){let e=s;h&&(e=a(e,h)),e<0&&(e=0),r=r.replace(/\[listing_price\]/,`$${e}`)}else r=r.replace(/\[listing_price\s?-\s?\d+\]/,"your price");return window.partner_link?g=window.partner_link:t.partner_link&&(window.partner_link=t.partner_link,g=t.partner_link),r=r.replace(/\[condition\]/g,u),r=r.replace(/\[deductions\]/g,p),r}},7850:(e,t,n)=>{"use strict";function i(e){if(e.target.id&&"number"===e.target.type){let t=e.target.value;"0"===t||t.startsWith("-")||(e.target.value=`-${t}`)}}n.r(t),n.d(t,{prefix:()=>i})},9869:(e,t,n)=>{"use strict";n.r(t),n.d(t,{processKeyword:()=>k});var i=n(9088),a=n(8498),s=n(1203),r=n(4347),o=n(3539),l=n(6725),c=n(6901),d=n(1060);async function u(e,t,n,i){(0,o.CONSOLE_MESSAGE)("custom","Checking owner_lists is in range.");const a=await(0,l.skips)().getOtherIphoneListings(e,t),s=a&&a.length;if(s){const t="single"===document.querySelector("[name=bot_mode]:checked").value;if(t){if(s<=2)return console.log("MODE: SINGLE. IN RANGE",s),!0}else if(s>=3)return console.log("MODE: MULTI. IN RANGE",s),!0;const a=t?"SINGLE":"MULTI";return console.log(`MODE: ${a}. NOT IN RANGE`,s),(0,o.CONSOLE_MESSAGE)("has_listings",{owner_lists:s,listing_id:e,owner_name:n,listing_name:i}),!1}}function p(e,t){return Math.floor(Math.random()*(t-e+1)+e)}n(9105);var m=n(2320),h=n(5826);function g(e,t){let n=!1;return e.includes("[model]")&&!t.model&&(console.log("Failed. No model",e,t),n=!0),e.includes("[network]")&&!t.network&&(console.log("Failed. Network",e,t),n=!0),e.includes("[memory]")&&!t.storage&&(console.log("Failed. No memory",e,t),n=!0),n}var f=n(9107),w=n(2617),y=n(2287),_=n(4246),b=n(7367),v=n(8329);async function x(e){let t=!1;if(!window.isRun)return void console.log("bot stopped.");const n=e.id,i=e.title,r=e.owner.id,c=e.owner.profile.name,d=await(0,h.getVariant)(n);if(console.log("variant",d),d.skip)return void await(0,l.skips)().saveToSkipListing(n);const u=await(0,m.getQuote)(d,n);console.log("variantQuote",u);let x,S="",k="",I=(0,v.z)().openermessage;if(I&&!g(I,d)){I=(0,f.e)(I,u,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,x||(x=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*p(s.messageDelay[0],s.messageDelay[1]),m=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(m).format("HH"),mm:moment(m).format("mm"),ss:moment(m).format("ss")}),await(0,_.sleep)(l),S&&(S+="\n"),S+=I,k&&(k+=", "),k+="openermessage"}if(I=(0,v.z)().question_1,I&&!g(I,d)){I=(0,f.e)(I,u,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,x||(x=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*p(s.messageDelay[0],s.messageDelay[1]),m=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(m).format("HH"),mm:moment(m).format("mm"),ss:moment(m).format("ss")}),await(0,_.sleep)(l),S&&(S+="\n"),S+=I,k&&(k+=", "),k+="question_1"}if(I=(0,v.z)().question_2,I&&!g(I,d)){I=(0,f.e)(I,u,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,x||(x=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*p(s.messageDelay[0],s.messageDelay[1]),m=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(m).format("HH"),mm:moment(m).format("mm"),ss:moment(m).format("ss")}),await(0,_.sleep)(l),S&&(S+="\n"),S+=I,k&&(k+=", "),k+="question_2"}let E,L=!1,M=!1,C=!1;if(!d.storage){L=!0,I=(0,v.z)().gbMessage,I=(0,f.e)(I,u,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,x||(x=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*p(s.messageDelay[0],s.messageDelay[1]),m=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(m).format("HH"),mm:moment(m).format("mm"),ss:moment(m).format("ss")}),await(0,_.sleep)(l),S&&(S+="\n"),S+=I,k&&(k+=", "),k+="gbMessage"}if(L&&!document.querySelector("#switch-continue_after_storage").checked&&(C=!0),!C&&!d.network){M=!0,I=(0,v.z)().networkMessage,I=(0,f.e)(I,u,c,d.listing_price);const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,x||(x=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*p(s.messageDelay[0],s.messageDelay[1]),m=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(m).format("HH"),mm:moment(m).format("mm"),ss:moment(m).format("ss")}),await(0,_.sleep)(l),S&&(S+="\n"),S+=I,k&&(k+=", "),k+="networkMessage"}if(M&&!document.querySelector("#switch-continue_after_network").checked&&(C=!0),u.price>d.listing_price?(E="Offer message sent.",I=(0,v.z)().offerMessage):(E="Lowball message sent.",I=(0,v.z)().lowball_message),I=(0,f.e)(I,u,c,d.listing_price),!C&&I&&!g(I,d)){S&&(S+="\n");const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,x||(x=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*p(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,_.sleep)(l),S+=I,k&&(k+=", "),k+="accept/offerMessage"}if(I=(0,v.z)().meetupMessage,I=(0,f.e)(I,u,c,d.listing_price),!C&&I&&!g(I,d)){const e=await(0,a.apiOfferUp)().sendMessage(n,I,i,r,c);t=!0,x||(x=e),(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:I,listing_price:d.listing_price,listing_id:n,listing_name:i});const l=1e3*p(s.messageDelay[0],s.messageDelay[1]),u=(new Date).getTime()+l;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Message Sent",hh:moment(u).format("HH"),mm:moment(u).format("mm"),ss:moment(u).format("ss")}),await(0,_.sleep)(l),S&&(S+="\n"),S+=I,k&&(k+=", "),k+="meetupMessage"}return x&&document.querySelector("#switch-deleteaftersend").checked&&(console.log("Deleting conversation",x),await(0,a.apiOfferUp)().deleteMessage(x),console.log("Conversation has been deleted:",x)),window.messagesSent+=1,(0,b.stats)().addOffer(),(0,b.stats)().addStreak(),await async function(e){if(s.disableLogs)return;const{uid:t,ownerName:n,listingid:i,message:a,templateName:r}=e,o={Date:(new Date).toGMTString(),UserID:t,Name:n,ListingID:i,"Message Sent":a,template:r,tabId:window.tabId,extension_version:window.extension_version},l=(0,w.g)();return l&&(o.email=l),async function e(t){return fetch("https://sheets.hopla.tools/?HT=9ec6989caf07d1305c6c386880840f8a&mode=log",{method:"POST",body:JSON.stringify(o)}).then((async e=>(0,y.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (sendBotLog)",n,t),t&&t>6?"":(await(0,_.sleep)(1e4),t||(t=0),e(t+=1)))))}().catch((e=>(console.error("Fetch Failed (sendBotLog))",e),"")))}({uid:r,ownerName:c,listingid:n,message:S,templateName:k}),!!t&&S}async function S(){const e=document.getElementById("streak").value,t=document.getElementById("streaktimeout").value;if(e&&t&&window.iStreaks>=e){const e=(new Date).getTime()+60*t*1e3;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Streak",hh:moment(e).format("HH"),mm:moment(e).format("mm"),ss:moment(e).format("ss")}),await(0,_.sleep)(60*t*1e3),(0,b.stats)().resetCurrentStreak()}}async function k(e,t){if(!window.isAllowed)return console.error("You are not allowed to use this bot! x("),"not-allowed";await(0,o.getConsoleMessages)(),await new Promise((e=>{!function t(){if("complete"===document.readyState)return e();setTimeout(t,30)}()})),(0,o.CONSOLE_MESSAGE)("fetching_listings",{keyword:e,zipcode:t});let n=await(0,a.apiOfferUp)().fetchListings(e,t);(0,o.CONSOLE_MESSAGE)("fetch_listings",{num_listings:n.length,keyword:e,zipcode:t}),n&&Array.isArray(n)&&(0,b.stats)().addTotalListingsScraped(n),n=function(e){const t=document.querySelector("#ta #keywords").value,n=e.length,i=(e=e.filter((e=>{const n=e.tile&&e.tile.title;if(!n)return!1;const i=t.split(",").map((e=>e.trim())).join("|"),a=new RegExp(i,"i");return!!n.match(a)}))).length;return i!==n&&(0,o.CONSOLE_MESSAGE)("skip_no_keyword",{num_listings:n-i}),e}(n),n=function(e){const t=e.length,n=(e=e.filter((e=>{const t=e.tile&&e.tile.title;return!(0,d.w)(t)}))).length;return n!==t&&(0,o.CONSOLE_MESSAGE)("custom",`Skipped ${t-n} containing skip word.`),e}(n),n=(0,c.f)(n),n=await async function(e){const t=[],n=e.length;if(!document.querySelector("#switch-skipshippingenabled").checked)return;const i=(e=e.filter((e=>{const n=e.tile&&e.tile.fulfillmentDetails&&e.tile.fulfillmentDetails.shippingEnabled,i=e.tile&&e.tile.id;return n&&i&&t.push(i),!n}))).length;return i!==n&&(0,o.CONSOLE_MESSAGE)("shipping_enabled",{num_listings:n-i}),t.length&&await(0,l.skips)().saveToSkipListingBatch(t),e}(n),n=await async function(e){const t=[],n=e.length,i=(e=e.filter((e=>{const n=e.tile&&e.tile.state,i=e.tile&&e.tile.id;return"DELETED"!==n||(t.push(i),!1)}))).length;return i!==n&&(0,o.CONSOLE_MESSAGE)("deleted_listings",{num_listings:n-i}),t.length&&await(0,l.skips)().saveToSkipListingBatch(t),e}(n);const m=n.length;for(let e=0;e<m;e++){if(window.listingsChecked||(window.listingsChecked=0),window.listingsChecked+=1,window.listingsChecked>s.listingsPerKeyword)return window.listingsChecked=0,"listingsPerKeyword reached.";if(!window.isRun)return void console.log("Bot stopped.");const t=n[e]&&n[e].tile&&n[e].tile.id,a=n[e]&&n[e].tile&&n[e].tile.title;if(!t){console.error("listing has no id");continue}if(await(0,l.skips)().isSkipListing(t)){(0,o.CONSOLE_MESSAGE)("skip_listing",{listing_id:t,listing_name:a});continue}const c=await(0,r.fetchListingDetail)(t),m=c.description;if(m&&(0,d.w)(m)){(0,o.CONSOLE_MESSAGE)("skipword_found",{listing_name:a,listing_id:t});continue}const h=c&&c.owner&&c.owner.id,g=c&&c.owner&&c.owner.profile&&c.owner.profile.name;if(!h){console.error(`Failed to get ownerid of listing ${t}!`);continue}if(await(0,l.skips)().isSkipMessagedUser(h)){await(0,i.addAllUserListingsToSkipList)(h),(0,o.CONSOLE_MESSAGE)("already_messaged",{owner_id:h,owner_name:g,listing_id:t,listing_name:a});continue}if(!await u(t,h,g,a)){await(0,i.addAllUserListingsToSkipList)(h);continue}const f=await x(c);if(f){const e=c.price;(0,o.CONSOLE_MESSAGE)("message_sent",{message_sent:f,listing_price:e,listing_id:t,listing_name:a}),await(0,i.addAllUserListingsToSkipList)(h),await(0,l.skips)().saveToMessagedUsers(h);const n=1e3*p(s.userDelay[0],s.userDelay[1]),r=(new Date).getTime()+n;(0,o.CONSOLE_MESSAGE)("timeout",{message:"Finished sending all messages to user.",hh:moment(r).format("HH"),mm:moment(r).format("mm"),ss:moment(r).format("ss")}),await(0,_.sleep)(n)}await S()}return console.log("no more new results available"),"no more results"}},4053:(e,t,n)=>{"use strict";n.r(t),n.d(t,{processWriteQueue:()=>s});var i=n(2287),a=n(6849);async function s(){window.writeQueue||(window.writeQueue=[]);const e=[...window.writeQueue];window.writeQueue=[];for(const t of e)try{let e=await fetch("https://us-central1-trade-apples.cloudfunctions.net/markplacebotstats",{method:"POST",headers:{"Content-Length":"application/json"},body:JSON.stringify(t)}).then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text())).catch((e=>{console.log(e)}));"ok"!==e&&(0,a.Z)({error:"Failed to write to dashboard",data:t,sheetsApiResponse:e})}catch(e){console.error(e),(0,a.Z)({error:"Failed to write to dashboard3",data:t})}setTimeout((()=>{s()}),2e3)}},1063:(e,t,n)=>{"use strict";n.r(t),n.d(t,{restoreDefaults:()=>r});var i=n(2287),a=n(6849),s=n(4246);function r(){function e(e){if("createEvent"in document){const t=document.createEvent("HTMLEvents");t.initEvent("change",!1,!0),e.dispatchEvent(t)}else e.fireEvent("onchange");e.parentElement&&e.parentElement.MaterialTextfield&&e.parentElement.MaterialTextfield.change(e.value)}document.getElementById("page2loading").style.display="block",fetch("https://sheets.hopla.tools/?HT=f69076cf5284374a09ec721768bdf0ae&format=json").then((async e=>(0,i.handleFetchErrors)(e))).then((e=>e.text())).then((async e=>{try{return JSON.parse(e)}catch(t){return await(0,a.Z)({error:"Failed to parse sheets.hopla.tools api response.",x:e}),{}}})).then((t=>{if(document.getElementById("page2loading").style.display="none",t.result&&Array.isArray(t.result)&&t.result.length){const n={};t.result.forEach((e=>{n[e["Input Name"]]=e.Value}));const i=n.Keywords||"",a=n.Zipcodes||"",s=n["Skip Words"]||"",r=n["Offer Message"]||"",o=n["Lowball Message"]||"",l=n["Meetup Message"]||"",c=n["GB Message"]||"",d=n["Network Message"]||"",u=n["Partner Message"]||"";let p="",m="",h="";window.isEnterprise?(p=n["Enterprise Opener Message"]||"",m=n["Enterprise Offer Message"]||"",h=n["Enterprise Closing Message"]||""):(p=n["Opener Message"]||"",m=n["Offer Message"]||"");let g=document.querySelector("#keywords");g.value=i,e(g),g=document.querySelector("#zipcodes"),g.value=a,e(g),g=document.querySelector("#skipwords"),g.value=s,e(g),g=document.querySelector("#openermessage"),g.value=p,e(g),e(g),e(g),g=document.querySelector("#offermessage"),g.value=r,e(g),g=document.querySelector("#lowball_message"),g.value=o,e(g),g=document.querySelector("#meetupmessage"),g.value=l,e(g),g=document.querySelector("#gbmessage"),g.value=c,e(g),g=document.querySelector("#networkmessage"),g.value=d,e(g),g=document.querySelector("#partnermessage"),g.value=u,e(g)}})).catch((e=>(console.error("Fetch Failed",e),(0,s.sleep)(1e4).then((()=>r())))))}},6849:(e,t,n)=>{"use strict";function i(e){return fetch("https://webhook.hopla.workers.dev?project=OfferUpBot",{method:"POST",body:JSON.stringify(e),mode:"no-cors"})}n.d(t,{Z:()=>i})},7426:(e,t,n)=>{"use strict";function i(e){e||window.viewermode?window.isViewMode=!0:(document.querySelector('#ta #menu a[href="#page2"]').click(),window.isViewMode=!1),window.viewermode&&(document.querySelector("#menu").style.display="none")}n.d(t,{o:()=>i}),n(8927),n(5826)},7091:(e,t,n)=>{"use strict";function i(e){window.isKO||e.match&&(window.navigator.onLine||e.match(/offline/))&&(document.querySelector("#statustext").textContent=e)}n.r(t),n.d(t,{showLastConsoleLog:()=>i})},1023:(e,t,n)=>{"use strict";function i(e){let t=document.querySelector("#loadingoverlay");t?t.style.display=e?"flex":"none":function(e){const t=document.querySelector("#ta");t&&(t.insertAdjacentHTML("afterbegin",`<div id="loadingoverlay" style="display: ${e?"flex":"none"};" class='loading-one'>\n          <div class='loading-two'>\n              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"\n                  class='svg'>\n                  <circle r="80" cx="500" cy="90" class='circle-one' />\n                  <circle r="80" cx="500" cy="910" class='circle-one' />\n                  <circle r="80" cx="90" cy="500" class='circle-one' />\n                  <circle r="80" cx="910" cy="500" class='circle-one' />\n                  <circle r="80" cx="212" cy="212" class='circle-one' />\n                  <circle r="80" cx="788" cy="212" class='circle-one' />\n                  <circle r="80" cx="212" cy="788" class='circle-one' />\n                  <circle r="80" cx="788" cy="788" class='circle-one' />\n              </svg>\n          </div>\n          <span style="position: fixed; padding-top: 165px;">Loading. Please wait...</span>\n      </div>\n    `),document.head.insertAdjacentHTML("beforeend","<style>\n      /* Loading Overlay - START */\n      .loading-one {\n        box-sizing: border-box;\n        display: flex;\n        position: absolute;\n        flex-flow: column nowrap;\n        align-items: center;\n        justify-content: space-around;\n        background: rgba(255, 255, 255, 0.8);\n        top: 0px;\n        left: 0px;\n        width: 100%;\n        height: 100%;\n        z-index: 2147483647;\n      }\n\n      .loading-two {\n        order: 1;\n        box-sizing: border-box;\n        overflow: visible;\n        flex: 0 0 auto;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        animation-name: around;\n        animation-duration: 2000ms;\n        animation-timing-function: linear;\n        animation-iteration-count: infinite;\n        width: 120px;\n        height: 120px;\n      }\n\n      .circle-one {\n        fill: var(--black);\n      }\n\n      .svg {\n        width: 100%;\n        height: 100%;\n        fill: var(--black);\n      }\n\n      @keyframes around {\n        0% {\n          transform: rotate(0deg)\n        }\n\n        100% {\n          transform: rotate(360deg)\n        }\n      }\n\n      /* Loading Overlay - END */\n    </style>"))}(e)}n.r(t),n.d(t,{showLoading:()=>i})},6725:(e,t,n)=>{"use strict";n.r(t),n.d(t,{skips:()=>p});var i=n(8498),a=n(4347),s=n(6901);function r(e){const t=new Date,n=new Date(e);return Math.floor((t-n)/864e5)}var o=n(3539),l=(n(9105),n(2287)),c=n(4246),d=n(1060),u=n(4484);function p(){async function e(e,t,n){let i=`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?batch=1&listname=${e}`;n&&(i+=`&localcheck=${window.taPartnerId}`);return await async function e(n){return fetch(i,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(t)}).then((async e=>(0,l.handleFetchErrors)(e))).then((e=>e.text())).catch((async t=>(console.error("Fetch Failed (saveIdToLogBatch)",t,n),n&&n>6?"":(await(0,c.sleep)(1e4),n||(n=0),e(n+=1)))))}().then((n=>{try{const i=JSON.parse(n);if(!i.success||"added"!==i.success)return(0,u._apiSendBug)({error:"Failed to copy ids from storage to db",listname:e,aIds:t,response:n})}catch(i){return(0,u._apiSendBug)({error:"Failed copy ids from storage to db",listname:e,aIds:t,response:n})}}))}async function t(e,t,n){let i=`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?listname=${e}&id=${t}&email=${window.taEmail}`;n&&(i+=`&localcheck=${window.taPartnerId}`);return await async function e(t){return fetch(i,{method:"POST"}).then((async e=>(0,l.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (saveIdToLog)",n,t),t&&t>6?"":(await(0,c.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((n=>{try{const i=JSON.parse(n);if(!i.success||"added"!==i.success)return(0,u._apiSendBug)({error:"Failed to save to log",listname:e,id:t,response:n})}catch(i){return(0,u._apiSendBug)({error:"Failed to save to log",listname:e,id:t,response:n})}}))}async function n(t,n){let i=localStorage.getItem(t);i&&(i=JSON.parse(i),i&&Array.isArray(i)&&i.length&&(await e(n,i),localStorage.setItem(t,"[]")))}async function m(e,t,n,i){let a=`https://us-central1-trade-apples.cloudfunctions.net/offerupbot?isexist=${t}&listname=${e}`;n&&(a+="&noexpiry=1"),i&&(a+=`&localcheck=${window.taPartnerId}`);return await async function e(t){return fetch(a).then((async e=>(0,l.handleFetchErrors)(e))).then((e=>e.text())).catch((async n=>(console.error("Fetch Failed (isIdInLog)",n,t),t&&t>6?"":(await(0,c.sleep)(1e4),t||(t=0),e(t+=1)))))}().then((n=>{try{const i=JSON.parse(n);return"success"in i?i.success:((0,u._apiSendBug)({error:"Failed to check logs",listname:e,id:t,response:n}),!1)}catch(i){return(0,u._apiSendBug)({error:"Failed to check logs",listname:e,id:t,response:n}),!1}}))}return{saveToPartnerMessaged:e=>t("partnermessage",e),saveToMessagedUsers:e=>t("users",e,!0),saveToSkipListing:e=>{let n="listings";"single"===document.querySelector("[name=bot_mode]:checked").value||(n="listings_multi"),t(n,e,!0)},saveToSkipListingBatch:t=>{let n="listings";"single"===document.querySelector("[name=bot_mode]:checked").value||(n="listings_multi"),e(n,t,!0)},isSkipListing:async e=>{let t="listings";return"single"===document.querySelector("[name=bot_mode]:checked").value||(t="listings_multi"),await n("skip_listings",t),m(t,e,!0,!0)},getOtherIphoneListings:async function(e,t){if(!t){const n=await(0,a.fetchListingDetail)(e);if(!n||!n.owner)return void(0,u._apiSendBug)({error:"getOtherIphoneListings failed. No listing owner returned."});t=n.owner.id}const n=[];(0,o.CONSOLE_MESSAGE)("custom",`Fetching other listings of user (${t}).`);const l=await(0,i.apiOfferUp)().getUserListings(t),c=document.querySelector("#ta #keywords").value.split(",").map((e=>e.trim())).join("|");for(const t of l)if(t.id!==e&&t.listingId!==e&&t.title){const e=t.title,i=t.description,a=t.postDate,l=Number(t.price),u=new RegExp(c,"i");if(a){const e=document.getElementById("listing_max_age");if(e){const n=e.value,i=r(a);if(i>n){(0,o.CONSOLE_MESSAGE)("skip_old_listing",{age:i,listing_id:t.id,listing_name:t.title});continue}}}if(await p().isSkipListing(t.listingId))continue;if(!e.match(u))continue;let m=(0,d.w)(e);if(!m&&i&&(m=(0,d.w)(i)),m)continue;if(!(0,s.d)(l))continue;const h=t.fulfillmentDetails&&t.fulfillmentDetails.shippingEnabled;if(document.querySelector("#switch-skipshippingenabled").checked&&h&&t.listingId){await p().saveToSkipListing(t.listingId);continue}n.push(t.id)}return[...new Set(n)]},isSkipMessagedUser:async e=>(await n("skip_messagedusers","users"),m("users",e,"",!0)),isSkipPartnerMessage:async e=>(await n("skip_partnermessaged","partnermessage"),m("partnermessage",e,!0))}}},4246:(e,t,n)=>{"use strict";function i(e){return new Promise((t=>setTimeout(t,e)))}n.r(t),n.d(t,{sleep:()=>i})},9973:(e,t,n)=>{"use strict";function i(){if(Array.from(document.querySelectorAll("button")).find((e=>"Log in"===e.textContent))&&(alert("You are not logged in! You have to login to offerup first."),1))return!1;let e=document.querySelector("#runfrom").value,t=document.querySelector("#rununtil").value;if(t&&e){e=e.split(":"),t=t.split(":");const n=new Date,i=new Date;i.setHours(e[0],e[1]);const a=new Date;return a.setHours(t[0],t[1]),i>a&&a.setDate(a.getDate()+1),n>=i&&n<=a}return alert("No schedule set! Bot will not run."),!1}n.r(t),n.d(t,{start:()=>b});var a=n(1203),s=n(3539);function r(){let e=localStorage.getItem("lastZipIdx")||0;e=parseInt(e,10);let t=localStorage.getItem("lastKwIdx");t=t?parseInt(t,10)+1:0;let n=document.querySelector("#ta #keywords").value;if(!n)return console.error("No keywords found."),void alert("No keywords found.");n=n.split(",").map((e=>e.trim()));let i=document.querySelector("#ta #zipcodes").value;return i?(i=i.split(",").map((e=>e.trim())),t>=n.length&&(t=0,e+=1,e>=i.length&&(e=0)),localStorage.setItem("lastKwIdx",t),localStorage.setItem("lastZipIdx",e),String(n[t]).trim().length?{keyword:n[t],zipcode:i[e]}:r()):(console.error("No zipcodes input found."),void alert("No zipcodes input found."))}function o(){let e=localStorage.getItem("tsSpamDetected");if(e){e=parseInt(e,10);const t=(new Date).getTime();if(t<e)return e-t}return!1}var l=n(4219),c=n(8498),d=n(4246),u=n(7367);async function p(){if(!window.isRun)return;const e=document.getElementById("maxconcurrentconversations").value;if(e){const t=await(0,c.apiOfferUp)().countConversations();if(t&&(0,u.stats)().setThreadsCount(t),t>=e)return window.maxConvoReached||(window.maxConvoReached=!0,(0,s.CONSOLE_MESSAGE)("halted_threads")),await(0,d.sleep)(a.intervalConversationsCheck),p();window.maxConvoReached=!1}}var m=n(9869),h=n(7426);function g(){document.querySelector("#switch-rununtil").parentElement.MaterialSwitch?((0,h.o)(!0),document.querySelector("#switch-rununtil").parentElement.MaterialSwitch.off(),localStorage.setItem("input_switch-rununtil",!1),localStorage.removeItem("lastKwIdx")):setTimeout((()=>{g()}),2e3)}var f=n(7091),w=n(7121),y=n(3443);function _(){window.isWaitingForSchedule?(0,s.CONSOLE_MESSAGE)("halted_schedule"):(window.isWaitingForSchedule=!0,document.getElementById("switch-rununtil").checked?((0,s.CONSOLE_MESSAGE)("halted_schedule"),i()?(window.isWaitingForSchedule=!1,window.isRun=1,(0,u.stats)().resetCurrentStreak(),(0,u.stats)().addRun(),b()):setTimeout((()=>{window.isWaitingForSchedule=!1,_()}),5e3)):window.isWaitingForSchedule=!1)}async function b(){if(window.viewermode)return void(0,f.showLastConsoleLog)("Tab is in viewer mode.");(0,w.X)(!1);const e=setInterval((()=>{i()||(window.isRun=0,(0,s.CONSOLE_MESSAGE)("halted_schedule"),clearInterval(e),(0,w.X)(!0),_())}),1e4);if(!i())return clearInterval(e),(0,w.X)(!0),void _();if(a.showAlerts&&alert("start"),!(0,y.t)())return g(),void(0,w.X)(!0);if((0,l.loadStats)(),o()){const e=o(),t=(new Date).getTime()+e;(0,s.CONSOLE_MESSAGE)("halted_soft",{hh:moment(t).format("HH"),mm:moment(t).format("mm"),ss:moment(t).format("ss")}),await(0,d.sleep)(e)}const{keyword:t,zipcode:n}=r();for(let e=1;e<40;){if(!window.isRun){console.log("Bot stopped.");break}await p();const e=await(0,m.processKeyword)(t,n);if("no more results"===e)return(0,s.CONSOLE_MESSAGE)("custom","No listings left.."),await(0,d.sleep)(5e3),void b();if("listingsPerKeyword reached."===e)return(0,s.CONSOLE_MESSAGE)("custom","Listings per keyword has been reached. Starting a new search."),void b();if("not-allowed"===e)return void(0,s.CONSOLE_MESSAGE)("custom","You are not allowed to use this bot.");if(window.messagesSent>1&&window.messagesSent%20==0){const e=(new Date).getTime()+60*a.delayPerXMessages*1e3;(0,s.CONSOLE_MESSAGE)("timeout",{message:"20 messages has been sent",hh:moment(e).format("HH"),mm:moment(e).format("mm"),ss:moment(e).format("ss")}),await(0,d.sleep)(60*a.delayPerXMessages*1e3)}}}},7367:(e,t,n)=>{"use strict";n.r(t),n.d(t,{stats:()=>s,getStats:()=>r});var i=n(9171),a=n(4484);function s(){const e=new Date,t=`${e.getFullYear()}${e.getMonth()+1}${e.getDate()}`;let n=localStorage.getItem(`stats_${t}`);function a(){localStorage.setItem(`stats_${t}`,JSON.stringify(n))}return n=n?JSON.parse(n):{},{addOffer:()=>{const e="offers";n[e]||(n[e]=0),n[e]+=1,a(),document.getElementById("stat_offers").textContent=n[e],(0,i._)({offers:n[e]})},addPartner:()=>{const e="partners";n[e]||(n[e]=0),n[e]+=1,a(),document.getElementById(`stat_${e}`).textContent=n[e],(0,i._)({partners:n[e]})},addRun:()=>{n.runs||(n.runs=0),n.runs+=1,a(),document.getElementById("stat_runs").textContent=n.runs,(0,i._)({runs:n.runs})},addStreak:()=>{window.iStreaks+=1,document.getElementById("stat_streaks").textContent=window.iStreaks,(0,i._)({streaks:window.iStreaks})},addKo:()=>{n.ko||(n.ko=0),n.ko+=1,a(),document.getElementById("stat_ko").textContent=n.ko,(0,i._)({KO:n.ko})},resetCurrentStreak:()=>{window.iStreaks=0,document.getElementById("stat_streaks").textContent=window.iStreaks,(0,i._)({streaks:0})},addTotalListingsScraped:e=>{const t="listings_scraped_ids",s=e.map((e=>e.tile&&e.tile.id));n[t]||(n[t]=[]);const r=[...new Set(n[t].concat(s))];n[t]=r,a(),(0,i._)({listings_scraped:r.length})},setThreadsCount:e=>{const t="num_threads";n[t]=e,a(),(0,i._)({num_threads:n[t]})}}}function r(){try{const e={},t=new Date,n=`${t.getFullYear()}${t.getMonth()+1}${t.getDate()}`;let i=localStorage.getItem(`stats_${n}`);if(i){const t=["offers","partners","runs","streaks","ko"];i=JSON.parse(i),t.forEach((t=>{e[t]=i[t]||0}))}return e}catch(e){console.error(e),(0,a._apiSendBug)({error:"Failed to get stats",details:e.toString()})}}},8329:(e,t,n)=>{"use strict";n.d(t,{z:()=>a});const i=n(6503);function a(e){return{openermessage:(()=>{const t=localStorage.getItem("input_openermessage")||"";return e?t:i.unspin(t)})(),gbMessage:(()=>{const t=localStorage.getItem("input_gbmessage")||"";return e?t:i.unspin(t)})(),networkMessage:(()=>{const t=localStorage.getItem("input_networkmessage")||"";return e?t:i.unspin(t)})(),offerMessage:(()=>{const t=localStorage.getItem("input_offermessage")||"";return e?t:i.unspin(t)})(),closingmessage:(()=>{const t=localStorage.getItem("input_closingmessage")||"";return e?t:i.unspin(t)})(),meetupMessage:(()=>{const t=localStorage.getItem("input_meetupmessage")||"";return e?t:i.unspin(t)})(),partnerMessage:(()=>{const t=localStorage.getItem("input_partnermessage")||"";return e?t:i.unspin(t)})(),question_1:(()=>{const t=localStorage.getItem("input_question_1")||"";return e?t:i.unspin(t)})(),question_2:(()=>{const t=localStorage.getItem("input_question_2")||"";return e?t:i.unspin(t)})(),question_3:(()=>{const t=localStorage.getItem("input_question_3")||"";return e?t:i.unspin(t)})(),question_4:(()=>{const t=localStorage.getItem("input_question_4")||"";return e?t:i.unspin(t)})(),lowball_message:(()=>{const t=localStorage.getItem("input_lowball_message")||"";return e?t:i.unspin(t)})()}}},803:(e,t,n)=>{"use strict";n.r(t),n.d(t,{testTemplates:()=>r});var i=n(9107),a=n(8329),s=n(3443);function r(){const e=[];(0,s.t)()&&(Object.keys((0,a.z)()).forEach((t=>{if(window.isEnterprise&&["gbMessage","networkMessage","partnerMessage","acceptMessage","meetupMessage"].includes(t))return;let n=(0,a.z)()[t];const s={model:"IPHONE 11 PRO",storage:"64GB",network:"Unlocked",price:450,condition:"Grade A - Like New [NO cracks, scratches, scuffs or dents]",deductions:[]};try{n=(0,i.e)(n,s,"Silver",600)}catch(e){console.trace(),console.error(e)}n=`${t}: ${n}\n\n`,e.push(n)})),alert(e.join("")))}},1060:(e,t,n)=>{"use strict";function i(e){const t=localStorage.getItem("input_skipwords");if(t){let n=!1;if(t.split(",").map((e=>e.trim())).forEach((t=>{t&&e&&e.match(new RegExp(t,"i"))&&(n=t)})),n)return n}}n.d(t,{w:()=>i})},5281:(e,t,n)=>{"use strict";n.d(t,{Q:()=>r});var i=n(8927),a=n(5149),s=n(5508);async function r(e,t){let n;if(e?n=e:window.location.href.includes("inbox/message/")&&(n=await(0,i.t)()),!n)return;window.bugReport={};const r=t||await(0,s.T)(n);window.bugReport.listingId=n;const o=(0,a.N)(r.attributes,"model"),l=(0,a.N)(r.attributes,"carrierNetwork");if(document.querySelector("#buglistingdetails").innerHTML="",document.querySelector("#bugvariantdetails").innerHTML="",c("URL",window.location.href),r.title){let e=r.title;e=u(e,"title"),c("Title",e),window.bugReport.listing_title=e}if(r.description){let e=r.description;e=u(e,"description"),c("Description",e),window.bugReport.listing_description=e}if(o){let e=o;e=u(e,"modelFromAttribute"),c("Model",e),window.bugReport.listing_detail_model=e}if(l){let e=l;e=u(e,"networkFromAttribute"),c("Network",e),window.bugReport.listing_detail_network=e}function c(e,t){document.querySelector("#buglistingdetails").innerHTML+=` <div class="report-detail">\n                            <span class="label">${e}</span>\n                            <span id="itemtitle">${t}</span>\n                          </div>`}function d(e,t){document.querySelector("#bugvariantdetails").innerHTML+=` <div class="report-detail">\n                            <span class="label">${e}</span>\n                            <span id="itemtitle">${t}</span>\n                          </div>`}function u(e,t){if(window.textMatchIndex[n]&&window.textMatchIndex[n][t]){if(window.textMatchIndex[n][t].model){const i=window.textMatchIndex[n][t].model.rgx;e=e.replace(i,(e=>`<strong class="blue">${e}</strong>`))}if(window.textMatchIndex[n][t].storage){const i=window.textMatchIndex[n][t].storage.rgx;e=e.replace(i,(e=>`<strong class="green">${e}</strong>`))}if(window.textMatchIndex[n][t].network){const i=window.textMatchIndex[n][t].network.rgx;e=e.replace(i,(e=>`<strong class="purple">${e}</strong>`))}if(window.textMatchIndex[n][t].deductions){const i=window.textMatchIndex[n][t].deductions;for(const t of i)e=e.replace(t,(e=>`<strong class="red">${e}</strong>`))}}return e}window.lastVariant&&(window.lastVariant.model&&(window.bugReport.model=window.lastVariant.model,d("Model",window.lastVariant.model)),window.lastVariant.storage&&(window.bugReport.storage=window.lastVariant.storage,d("Storage",window.lastVariant.storage)),window.lastVariant.network&&(window.bugReport.network=window.lastVariant.network,d("Network",window.lastVariant.network)),window.lastVariant.condition&&(window.bugReport.condition=window.lastVariant.condition,d("Condition",window.lastVariant.condition)))}},7121:(e,t,n)=>{"use strict";function i(e){const t=["#keywords","#zipcodes","#skipwords","#openermessage","#gbmessage","#networkmessage","#offermessage","#closingmessage","#acceptmessage","#meetupmessage","#partnermessage"];for(const n of t){let t=document.querySelector(n);t&&(t.disabled=!e)}}n.d(t,{X:()=>i})},3443:(e,t,n)=>{"use strict";n.d(t,{t:()=>r});var i=n(3539),a=n(8329);const s=n(6503);function r(){const e=[];return Object.keys((0,a.z)()).forEach((t=>{const n=(0,a.z)(!0)[t];s.validate(n)||e.push(t)})),!e.length||((0,i.CONSOLE_MESSAGE)("custom","Invalid spintax detected."),alert("You have invalid spintax format in "+e.join(", ")),!1)}},3624:(e,t,n)=>{"use strict";function i(e){return new Promise((t=>{!function n(){if(e.parentNode.MaterialRadio)return t(e);setTimeout(n,30)}()}))}n.d(t,{B:()=>i})},9171:(e,t,n)=>{"use strict";n.d(t,{_:()=>s});var i=n(2617);function a(){const e=new Date;return`${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`}async function s({offers:e,partners:t,runs:n,streaks:s,KO:r,listings_scraped:o,num_threads:l}){if(!window.taEmail)return;const c=document.getElementById("roundupdown").value,d=document.querySelector("#switch-skipshippingenabled").checked,u=document.getElementById("streaktimeout").value,p=document.getElementById("streak").value,m=document.querySelector("#switch-deleteaftersend").checked,h=document.querySelector("#skipwords").value,g=document.querySelector("#ta #zipcodes").value,f=document.querySelector("#ta #keywords").value,w=document.getElementById("maxconcurrentconversations").value,y=document.querySelector("#runfrom").value,_=document.querySelector("#rununtil").value,b=function(){const e=new Date;let t=e.getMonth()+1;t<10&&(t=`0${t}`);let n=e.getDate();return n<10&&(n=`0${n}`),`${e.getFullYear()}-${t}-${n}`}(),v={key:(0,i.g)()||window.taEmail,partner_email:window.taEmail,date:b,version:window.extension_version};void 0!==e&&(v.offers=e),void 0!==t&&(v.partners=t),void 0!==n&&(v.runs=n),void 0!==s&&(v.streaks=s),void 0!==r&&(v.KO=r),void 0!==y&&(v["run from"]=y),void 0!==_&&(v.until=_),void 0!==c&&(v["offer add/deduct"]=c),void 0!==d&&(v["skip shipping"]=d),void 0!==p&&(v["max streak"]=p),void 0!==u&&(v.timeout=u),void 0!==o&&(v.listings_scraped=o),void 0!==w&&(v["max concurrent"]=w),void 0!==m&&(v["delete after sending"]=m),void 0!==h&&(v.skipwords=h),void 0!==g&&(v.zipcodes=g),void 0!==f&&(v.keywords=f),void 0!==l&&(v["threads inbox"]=l),function(){const e=(new Date).getTime();let t=localStorage.getItem("runtimeHits");if(t){t=JSON.parse(t);const i=t[t.length-1];n=i,Date.now()-n>=6e5&&(t.push(e),e-i<12e5&&function(){const e=a();let t=localStorage.getItem("runTimePerDay");t?(t=JSON.parse(t),t[e]||(t={},t[e]=0),t[e]=parseInt(t[e])+1):t={[e]:1},localStorage.setItem("runTimePerDay",JSON.stringify(t))}())}else t=[],t.push(e);var n;localStorage.setItem("runtimeHits",JSON.stringify(t))}(),v.runtime_points=function(){let e=localStorage.getItem("runTimePerDay");if(e){const t=a();return e=JSON.parse(e),e[t]?e[t]:0}return 0}(),window.writeQueue||(window.writeQueue=[]),window.writeQueue.push(v)}},6503:(e,t,n)=>{e.exports=n(9819)},9819:(e,t)=>{!function(e){e.isSpintax=function(e){return null!==e.match(/\{[^}]*\|*[^}]*\}/)},e.findSpintax=function(e){return e.match(/\{([^{}]+?)\}/)},e.unspin=function(t,n){for(var i,a,s,r=t,o=0;e.isSpintax(t);){if(o>=1e3)throw new Error("Unable unspin text after 1000 iterations ("+r+")");s=(a=(i=e.findSpintax(t))[1].split("|"))[Math.floor((n||Math.random)()*a.length)],t=t.replace(i[0],s),o++}return t},e.count=function(t){for(var n,i,a,s,r,o=0,l=/%%%\d+%%%/g,c=/%%%(\d+)%%%/,d=t,u=0;e.isSpintax(t);){if(u>=1e3)throw new Error("Unable unspin text after 1000 iterations ("+d+")");for(i=(n=e.findSpintax(t))[1].split("|"),a=0,r=0;r<i.length;r++)i[r].match(l)?a+=parseInt(i[r].match(c)[1])||1:a+=1;t=t.replace(n[0],"%%%N%%%".replace("N",a.toString())),u++}if(t.match(l))for(s=t.match(l),o=1,r=0;r<s.length;r++)o*=parseInt(s[r].match(c)[1])||1;return o},e.validate=function(t){return null===(t=e.unspin(t)).match(/(\{[^}]*\|)|(\|[^{]*\})/)}}(t)},9178:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});const i=e=>e?e=(e=e.replace(/\[.+?\]/,"")).trim():""},127:(e,t)=>{t.viewModeCheck=function(){window.location.href.match("/inbox|inbox/message")&&(window.viewermode=!0)}}},t={};function n(i){var a=t[i];if(void 0!==a)return a.exports;var s=t[i]={exports:{}};return e[i](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{if(window.isAlreadyInjected)throw new Error("Marketplace Bot is already injected to this page.");window.isAlreadyInjected=!0;const{addAllUserListingsToSkipList:e}=n(9088),{apiOfferUp:t}=n(8498),{attachEvents:i}=n(5596),{showAlerts:a}=n(1203),{fetchListingDetail:s}=n(4347),{getConsoleMessages:r,CONSOLE_MESSAGE:o}=n(3539),{getPartnerDetails:l}=n(8414),{getQuote:c}=n(2320),{getVariant:d}=n(5826),{default:u}=n(3119),{handleFetchErrors:p}=n(2287),{injectHoplaLogin:m}=n(6722),{injectLogger:h}=n(7731),{injectMdl:g}=n(4559),{injectMoment:f}=n(3695),{injectStyle:w}=n(5729),{injectTrackjs:y}=n(7933),{insertUI:_}=n(642),{loadInputs:b}=n(5038),{loadStats:v}=n(4219),{logout:x}=n(1992),{onSessionReady:S,login_callback:k}=n(147),{prefix:I}=n(7850),{processKeyword:E}=n(9869),{processWriteQueue:L}=n(4053),{restoreDefaults:M}=n(1063),{showLoading:C}=n(1023),{skips:O}=n(6725),{sleep:N}=n(4246),{start:T}=n(9973),{stats:D}=n(7367),{testTemplates:F}=n(803),{_apiSendBug:j}=n(4484),{viewModeCheck:A}=n(127);window.extension_version="3.66",window.messagesSent=0,window.iStreaks=0,window.isRun=0,window.isViewMode=!0,window.tabId=Math.round(1e4*Math.random()),window.textMatchIndex={},window.isEnterprise=!1,window.bugReport={},window.isKO=!1,window.storeFirebaseLog=async function(e,t){return async function n(i){return fetch("https://us-central1-trade-apples.cloudfunctions.net/sendlog",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({logType:"offerup",ts:t||"",log:e})}).then((async e=>p(e))).then((e=>e.text())).catch((async e=>(console.error("Fetch Failed (storeFirebaseLog)",e,i),i&&i>6?"":(await N(1e4),i||(i=0),n(i+=1)))))}().catch((e=>(console.error("Fetch Failed (storeFirebaseLog)",e),"")))},window.testTemplates=F,window.restoreDefaults=M,window.prefix=I,window.apiOfferUp=t,window.skips=O,window.fetchListingDetail=s,window.processKeyword=E,window.addAllUserListingsToSkipList=e,window.CONSOLE_MESSAGE=o,window.getConsoleMessages=r,window.getVariant=d,window.getQuote=c,window.showLoading=C,window.login_callback=k,window.getPartnerDetails=l,window.hopla_logout=x;let q=!1;console.log(`Marketplace Bot Version ${window.extension_version}`);try{!function(){"use strict";let e=!1;a&&alert("Offerup Bot has been injected!"),window.addEventListener("online",(()=>{q=!1,console.log("You are back online!"),setTimeout((()=>{let e=document.querySelector("#statustext");e&&"You are back online!"===e.textContent&&(console.log("Will restart bot."),T())}),1e4)})),window.addEventListener("offline",(async()=>{for(q=!0,console.log("You are offline.");q;)await n(1e3)}));try{t()}catch(e){console.error("Bot crashed. offline",e),j({error:"Found error in the bot.",info:e.toString()})}async function t(){w(),f(),y(),r(),_(),C(!0),m(S),g(),b(),v(),i(),L(),window.isAllowed&&(e=!0)}function n(e){return new Promise((t=>setTimeout(t,e)))}window.main=t,window.start=T}()}catch(e){console.trace(),console.error("caught error",e),console.log("Caught error. Will restart bot."),j({error:"Found error in the bot.",info:e.toString()})}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,